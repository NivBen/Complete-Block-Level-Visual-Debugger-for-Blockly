{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/init.js","webpack:///./src/blockly/blockly_init.js","webpack:///./src/blockly/generator/logic.js","webpack:///./src/blockly/generator/loops.js","webpack:///./src/blockly/generator/math.js","webpack:///./src/blockly/generator/text.js","webpack:///./src/blockly/generator/variables.js","webpack:///./src/actions/run.js","webpack:///./src/actions/step.js","webpack:///./src/actions/stop.js","webpack:///./src/actions/start.js","webpack:///./src/index.js","webpack:///./src/blockly/generator/procedures.js","webpack:///./src/blockly/core/generator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","workspace","Blockly","inject","media","toolbox","document","getElementById","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","highlightBlock","id","traceOn_","execution_finished","onmessage","obj","data","type","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","generation","tmp","tmp_count","nest","JavaScript","block","args","branchs","tmps","code","elseifCount_","valueToCode","ORDER_NONE","statementToCode","elseCount_","operator","EQ","NEQ","LT","LTE","GT","GTE","getFieldValue","order","ORDER_EQUALITY","ORDER_RELATIONAL","argument0","argument1","tmp0","tmp1","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","defaultArgument","ORDER_LOGICAL_NOT","ORDER_ATOMIC","ORDER_CONDITIONAL","getField","repeats","String","Number","ORDER_ASSIGNMENT","branch","addLoopTrap","loopVar","variableDB_","getDistinctName","Variables","NAME_TYPE","endVar","match","isNumber","until","variable0","getName","increment","up","parseFloat","step","Math","abs","startVar","incVar","INDENT","listVar","indexVar","tuple","ADD","ORDER_ADDITION","MINUS","ORDER_SUBTRACTION","MULTIPLY","ORDER_MULTIPLICATION","DIVIDE","ORDER_DIVISION","POWER","ORDER_COMMA","ORDER_FUNCTION_CALL","arg","ORDER_UNARY_NEGATION","genaration","quote_","varName","STATEMENT_PREFIX","workspaceToCode","postMessage","console","log","onclick","funcName","Procedures","prefixLines","replace","INFINITE_LOOP_TRAP","returnValue","x","arguments_","length","join","scrub_","definitions_","Generator","isNaN","goog","asserts","fail","targetBlock","getInputTargetBlock","this","blockToCode","assertArray","innerOrder"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","window.workspace = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\n\t \r\nBlockly.Xml.domToWorkspace(window.workspace,\r\n\tdocument.getElementById('startBlocks'));\r\n\t\t\r\n\r\nexport var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"../../debuggee/bundle.js\");\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\talert(msg);\r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (id) => {\r\n\t\t\t\twindow.workspace.traceOn_ = true;\r\n\t\t\t\twindow.workspace.highlightBlock(id);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","export var generation = {\r\n    tmp : '$',\r\n    tmp_count : 0,\r\n    nest : -1\r\n}","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['controls_if'] = function(block) {\r\n  var n = 0;\r\n  var args = [];\r\n   var branchs = [];\r\n   var tmps = [];\r\n   var code = '';\r\n   for(n = 0; n<=block.elseifCount_; ++n){\r\n    tmps[n] = generation.tmp + generation.tmp_count++;\r\n  }\r\n  \r\n  args[0] = Blockly.JavaScript.valueToCode(block, 'IF' + 0,\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  branchs[0] = Blockly.JavaScript.statementToCode(block, 'DO' + 0);\r\n  \r\n  for (n = 1; n <= block.elseifCount_; n++) {\r\n    args[n] = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    branchs[n] = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n  }\r\n\r\n  for(n = 0; n<=block.elseifCount_; ++n){\r\n    code += args[n] + tmps[n] + ' = ' + generation.tmp + ';\\n'; \r\n  }\r\n  code += 'if (' + tmps[0] + ') {\\n' + \r\n  // '  let local_over = isStepOver();\\n' +                              // me\r\n  branchs[0] + '}';\r\n  for (n = 1; n <= block.elseifCount_; n++) {\r\n    code += ' else if (' + tmps[n] + ') {\\n' + \r\n      // '  let local_over = isStepOver();\\n' +                            // me\r\n      branchs[n] + '}';\r\n  }\r\n\r\n  if (block.elseCount_) {\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\r\n    code += ' else {\\n' +\r\n    // '  let local_over = isStepOver();\\n' +                           // me\r\n    branch + '}';\r\n  }\r\n  alert(code);\r\n  return code + '\\n';\r\n};\r\n\r\n\r\nBlockly.JavaScript['logic_compare'] = function(block) {\r\n  // Comparison operator.\r\n  var OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>='\r\n  };\r\n  var operator = OPERATORS[block.getFieldValue('OP')];\r\n  var order = (operator == '==' || operator == '!=') ?\r\n      Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL;\r\n  generation.nest++;\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\r\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\r\n  var tmp0 = generation.tmp + generation.tmp_count++;\r\n  var tmp1 = generation.tmp + generation.tmp_count++;\r\n  var code = argument0 + 'var ' + tmp0 + ' = ' + generation.tmp +';\\n' +\r\n         argument1 + 'var ' + tmp1 + ' = ' + generation.tmp +';\\n' +\r\n         'await wait(' + generation.nest + ');\\n' + \r\n         generation.tmp +' = (' + tmp0 + operator + tmp1 + ');\\n';\r\n  generation.nest--;       \r\n  //var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n\r\nBlockly.JavaScript['logic_operation'] = function(block) {\r\n  // Operations 'and', 'or'.\r\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\r\n  var order = (operator == '&&') ? Blockly.JavaScript.ORDER_LOGICAL_AND :\r\n      Blockly.JavaScript.ORDER_LOGICAL_OR;\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order);\r\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n\r\nBlockly.JavaScript['logic_negate'] = function(block) {\r\n  // Negation.\r\n  var order = Blockly.JavaScript.ORDER_LOGICAL_NOT;\r\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL', order) ||\r\n      'true';\r\n  var code = '!' + argument0;\r\n  return [code, order];\r\n};\r\n\r\nBlockly.JavaScript['logic_boolean'] = function(block) {\r\n  // Boolean values true and false.\r\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\r\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.JavaScript['logic_null'] = function(block) {\r\n  // Null data type.\r\n  return ['null', Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.JavaScript['logic_ternary'] = function(block) {\r\n  // Ternary operator.\r\n  var value_if = Blockly.JavaScript.valueToCode(block, 'IF',\r\n      Blockly.JavaScript.ORDER_CONDITIONAL) || 'false';\r\n  var value_then = Blockly.JavaScript.valueToCode(block, 'THEN',\r\n      Blockly.JavaScript.ORDER_CONDITIONAL) || 'null';\r\n  var value_else = Blockly.JavaScript.valueToCode(block, 'ELSE',\r\n      Blockly.JavaScript.ORDER_CONDITIONAL) || 'null';\r\n  var code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Blockly.JavaScript.ORDER_CONDITIONAL];\r\n};\r\n\r\n\r\n","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['controls_repeat_ext'] = function(block) {\r\n    // Repeat n times.\r\n    generation.nest++;\r\n    if (block.getField('TIMES')) {\r\n      // Internal number.\r\n      var repeats = String(Number(block.getFieldValue('TIMES')));\r\n    } else {\r\n      // External number.\r\n      var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\r\n          Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    }\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        'count', Blockly.Variables.NAME_TYPE);\r\n    var endVar = repeats;\r\n    if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\r\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'repeat_end', Blockly.Variables.NAME_TYPE);\r\n      code += repeats + 'var ' + endVar + ' = ' + generation.tmp + ';\\n';\r\n    }\r\n    code += 'await wait(' + generation.nest + ', true);\\n' +\r\n        'for (var ' + loopVar + ' = 0; ' +\r\n        loopVar + ' < ' + endVar + '; ' +\r\n        loopVar + '++) {\\n' +\r\n        // '  let local_over = isStepOver();\\n' +                            // me\r\n        branch + '}\\n';\r\n    generation.nest--;\r\n    return code;\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['controls_repeat'] =\r\n      Blockly.JavaScript['controls_repeat_ext'];\r\n  \r\n  Blockly.JavaScript['controls_whileUntil'] = function(block) {\r\n    // Do while/until loop.\r\n    var until = block.getFieldValue('MODE') == 'UNTIL';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\r\n        until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    if (until) {\r\n      argument0 = '!' + argument0;\r\n    }\r\n    return 'while (' + argument0 + ') {\\n' +\r\n        // '  let local_over = isStepOver();\\n' +                            // me\r\n        branch + '}\\n';\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_for'] = function(block) {\r\n    // For loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var increment = Blockly.JavaScript.valueToCode(block, 'BY',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code;\r\n    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\r\n        Blockly.isNumber(increment)) {\r\n      // All arguments are simple numbers.\r\n      var up = parseFloat(argument0) <= parseFloat(argument1);\r\n      code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\r\n          variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\r\n          variable0;\r\n      var step = Math.abs(parseFloat(increment));\r\n      if (step == 1) {\r\n        code += up ? '++' : '--';\r\n      } else {\r\n        code += (up ? ' += ' : ' -= ') + step;\r\n      }\r\n      code += ') {\\n' +\r\n        //'  let local_over = isStepOver();\\n' +                           // me\r\n        branch + '}\\n';\r\n    } else {\r\n      code = '';\r\n      // Cache non-trivial values to variables to prevent repeated look-ups.\r\n      var startVar = argument0;\r\n      if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\r\n        startVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_start', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n      }\r\n      var endVar = argument1;\r\n      if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\r\n        var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_end', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n      }\r\n      // Determine loop direction at start, in case one of the bounds\r\n      // changes during loop execution.\r\n      var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_inc', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + incVar + ' = ';\r\n      if (Blockly.isNumber(increment)) {\r\n        code += Math.abs(increment) + ';\\n';\r\n      } else {\r\n        code += 'Math.abs(' + increment + ');\\n';\r\n      }\r\n      code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n      code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n      code += '}\\n';\r\n      code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\r\n          '     ' + incVar + ' >= 0 ? ' +\r\n          variable0 + ' <= ' + endVar + ' : ' +\r\n          variable0 + ' >= ' + endVar + ';\\n' +\r\n          '     ' + variable0 + ' += ' + incVar + ') {\\n' +\r\n          // '  let local_over = isStepOver();\\n' +                            // me\r\n          branch + '}\\n';\r\n    }\r\n    return code;\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_forEach'] = function(block) {\r\n    // For each loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    var listVar = argument0;\r\n    if (!argument0.match(/^\\w+$/)) {\r\n      listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_list', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        variable0 + '_index', Blockly.Variables.NAME_TYPE);\r\n    branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\r\n        listVar + '[' + indexVar + '];\\n' + branch;\r\n    code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' +\r\n    // '  let local_over = isStepOver();\\n' +                            // me\r\n    branch + '}\\n';\r\n    return code;\r\n  };","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['math_number'] = function(block) {\r\n    // Numeric value.\r\n    generation.nest++;\r\n    var code = 'await wait(' + generation.nest + ');\\n' + generation.tmp + ' = ' + parseFloat(block.getFieldValue('NUM')) + ';\\n';\r\n    generation.nest--;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['math_arithmetic'] = function(block) {\r\n    // Basic arithmetic operators, and power.\r\n    var OPERATORS = {\r\n      'ADD': [' + ', Blockly.JavaScript.ORDER_ADDITION],\r\n      'MINUS': [' - ', Blockly.JavaScript.ORDER_SUBTRACTION],\r\n      'MULTIPLY': [' * ', Blockly.JavaScript.ORDER_MULTIPLICATION],\r\n      'DIVIDE': [' / ', Blockly.JavaScript.ORDER_DIVISION],\r\n      'POWER': [null, Blockly.JavaScript.ORDER_COMMA]  // Handle power separately.\r\n    };\r\n    var tuple = OPERATORS[block.getFieldValue('OP')];\r\n    var operator = tuple[0];\r\n    var order = tuple[1];\r\n    generation.nest++;\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\r\n    var code;\r\n    // Power in JavaScript requires a special case since it has no operator.\r\n    if (!operator) {\r\n      var tmp0 = generation.tmp + generation.tmp_count++;\r\n      var tmp1 = generation.tmp + generation.tmp_count++; \r\n     \r\n\r\n      code = argument0 + 'var ' + tmp0 + ' = ' + generation.tmp +';\\n' +\r\n             argument1 + 'var ' + tmp1 + ' = ' + generation.tmp +';\\n' +\r\n             'await wait(' + generation.nest + ');\\n' + \r\n             generation.tmp + ' = Math.pow(' + tmp0 + ', ' + tmp1 + ');';\r\n      generation.nest--;       \r\n      return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    var tmp0 = generation.tmp + generation.tmp_count++;\r\n    var tmp1 = generation.tmp + generation.tmp_count++;\r\n    \r\n    code = argument0 + 'var ' + tmp0 + ' = ' + generation.tmp + ';\\n' +\r\n           argument1 + 'var ' + tmp1 + ' = ' + generation.tmp + ';\\n' +\r\n           'await wait(' + generation.nest + ');\\n' + \r\n           generation.tmp +' = ' + tmp0 + operator + tmp1 + ';\\n';\r\n    // code = argument0 + operator + argument1;\r\n    generation.nest--; \r\n    return [code, order];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['math_single'] = function(block) {\r\n    // Math operators with single operand.\r\n    alert(\"MY_math_single!!!\");\r\n    var operator = block.getFieldValue('OP');\r\n    var code;\r\n    var arg; \r\n    if (operator == 'NEG') {\r\n      // Negation is a special case given its different operator precedence.\r\n      arg = Blockly.JavaScript.valueToCode(block, 'NUM',\r\n          Blockly.JavaScript.ORDER_UNARY_NEGATION) || '0';\r\n      if (arg[4] == '-') {\r\n        // --3 is not legal in JS.\r\n        arg = ' ' + arg;\r\n      }\r\n      //code = '-' + arg;\r\n      code = arg + generation.tmp + '= (-1)*' + generation.tmp + ';\\n';\r\n      return [code, Blockly.JavaScript.ORDER_UNARY_NEGATION];\r\n    }\r\n    if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\r\n      arg = Blockly.JavaScript.valueToCode(block, 'NUM',\r\n          Blockly.JavaScript.ORDER_DIVISION) || '0';\r\n    } else {\r\n      arg = Blockly.JavaScript.valueToCode(block, 'NUM',\r\n          Blockly.JavaScript.ORDER_NONE) || '0';\r\n    }\r\n    // First, handle cases which generate values that don't need parentheses\r\n    // wrapping the code.\r\n    switch (operator) {\r\n      case 'ABS':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.abs(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'ROOT':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.sqrt(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'LN':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.log(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'EXP':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.exp(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'POW10':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.pow(10,' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'ROUND':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.round(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'ROUNDUP':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.ceil(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'ROUNDDOWN':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.floor(' + generation.tmp + ');\\nawait wait();\\n';\r\n        break;\r\n      case 'SIN':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.sin(' + genaration.tmp + ' / 180 * Math.PI);\\nawait wait();\\n';\r\n        break;\r\n      case 'COS':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.cos(' + generation.tmp + ' / 180 * Math.PI);\\nawait wait();\\n';\r\n        break;\r\n      case 'TAN':\r\n        code = arg + 'await wait();\\n' + generation.tmp + ' = Math.tan(' + generation.tmp + ' / 180 * Math.PI);\\nawait wait();\\n';\r\n        break;\r\n    }\r\n    if (code) {\r\n      return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    // Second, handle cases which generate values that may need parentheses\r\n    // wrapping the code.\r\n    switch (operator) {\r\n      case 'LOG10':\r\n        code = 'Math.log(' + arg + ') / Math.log(10)';\r\n        break;\r\n      case 'ASIN':\r\n        code = 'Math.asin(' + arg + ') / Math.PI * 180';\r\n        break;\r\n      case 'ACOS':\r\n        code = 'Math.acos(' + arg + ') / Math.PI * 180';\r\n        break;\r\n      case 'ATAN':\r\n        code = 'Math.atan(' + arg + ') / Math.PI * 180';\r\n        break;\r\n      default:\r\n        throw 'Unknown math operator: ' + operator;\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_DIVISION];\r\n  };\r\n  ","import {generation} from '../blockly_init.js'; \r\n\r\n\r\nBlockly.JavaScript['text'] = function(block) {\r\n    // Text value.\r\n    generation.nest++;\r\n    var code = 'await wait(' + generation.nest + ');\\n' + generation.tmp + ' = ' + Blockly.JavaScript.quote_(block.getFieldValue('TEXT')) + ';';\r\n    generation.nest--;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\nBlockly.JavaScript['text_print'] = function(block) {\r\n    // Print statement.\r\n    generation.nest++;\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var code = argument0 + \r\n        'await wait(' + generation.nest + ');\\n' +\r\n        'window.alert(' + generation.tmp + ');\\n';\r\n    generation.nest--;\r\n    return code;\r\n  };","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['variables_get'] = function(block) {\r\n    // Variable getter.\r\n    generation.nest++;\r\n    var code = 'await wait(' + generation.nest + ');\\n' + generation.tmp + ' = ' + Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'),Blockly.Variables.NAME_TYPE) + ';\\n';\r\n    generation.nest--;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\nBlockly.JavaScript['variables_set'] = function(block) {\r\n    generation.nest++;\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var varName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n        var code = argument0 + \r\n                   'await wait(' + generation.nest + ');\\n' +        \r\n                   varName + ' = ' + generation.tmp + ';\\n';\r\n        generation.nest--;\r\n        return code;\r\n  };","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Run\"] = () => {\r\n\r\n    if(Debuggee_Worker.hasInstance()) return; \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"run\", \"data\": code});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepInto\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepInto\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\\n';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace); \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": code});\r\n    console.log(code);\r\n}\r\n","import './init.js';\r\nimport {Blocly_Debugger} from './init.js';\r\nimport './blockly/blockly_init.js';\r\nimport './blockly/core/generator.js';\r\nimport './blockly/generator/logic.js';\r\nimport './blockly/generator/loops.js';\r\nimport './blockly/generator/math.js';\r\nimport './blockly/generator/procedures.js';\r\nimport './blockly/generator/text.js';\r\nimport './blockly/generator/variables.js';\r\nimport './actions/run.js';\r\nimport './actions/step.js';\r\nimport './actions/stop.js';\r\nimport './actions/start.js';\r\n\r\ndocument.getElementById(\"RunButton\").onclick = Blocly_Debugger[\"Run\"];\r\ndocument.getElementById(\"StepIntoButton\").onclick = Blocly_Debugger[\"StepInto\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\r\n          '\\'' + block.id + '\\''), Blockly.JavaScript.INDENT) + branch;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  return ' + returnValue + ';\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n' +\r\n        branch + '  if(local_out==false) flag_out = false;\\n' + returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };","Blockly.Generator.prototype.valueToCode = function(block, name, order) {\r\n    if (isNaN(order)) {\r\n      goog.asserts.fail('Expecting valid order from block \"%s\".', block.type);\r\n    }\r\n    var targetBlock = block.getInputTargetBlock(name);\r\n    if (!targetBlock) {\r\n      return '';\r\n    }\r\n    var tuple = this.blockToCode(targetBlock);\r\n    if (tuple === '') {\r\n      // Disabled block.\r\n      return '';\r\n    }\r\n    // Value blocks must return code and order of operations info.\r\n    // Statement blocks must only return code.\r\n    goog.asserts.assertArray(tuple, 'Expecting tuple from value block \"%s\".',\r\n        targetBlock.type);\r\n    var code = tuple[0];\r\n    var innerOrder = tuple[1];\r\n    if (isNaN(innerOrder)) {\r\n      goog.asserts.fail('Expecting valid order from value block \"%s\".',\r\n          targetBlock.type);\r\n    }\r\n    if (code && order <= innerOrder) {\r\n      if (order == innerOrder && (order == 0 || order == 99)) {\r\n        // Don't generate parens around NONE-NONE and ATOMIC-ATOMIC pairs.\r\n        // 0 is the atomic order, 99 is the none order.  No parentheses needed.\r\n        // In all known languages multiple such code blocks are not order\r\n        // sensitive.  In fact in Python ('a' 'b') 'c' would fail.\r\n      } else {\r\n        // The operators outside this code are stonger than the operators\r\n        // inside this code.  To prevent the code from being pulled apart,\r\n        // wrap the code in parentheses.\r\n        // Technically, this should be handled on a language-by-language basis.\r\n        // However all known (sane) languages use parentheses for grouping.\r\n        if(order != 5 && order != 6)                    // for * / % + -\r\n            code = '(' + code + ')';\r\n      }\r\n    }\r\n    return code;\r\n  };"],"sourceRoot":""}