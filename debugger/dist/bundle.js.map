{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/init.js","webpack:///./src/blockly/blockly_init.js","webpack:///./src/blockly/generator/math.js","webpack:///./src/blockly/generator/text.js","webpack:///./src/blockly/generator/variables.js","webpack:///./src/actions/run.js","webpack:///./src/actions/step.js","webpack:///./src/actions/stop.js","webpack:///./src/actions/start.js","webpack:///./src/index.js","webpack:///./src/blockly/generator/procedures.js","webpack:///./src/blockly/generator/loops.js","webpack:///./src/blockly/generator/logic.js","webpack:///./src/blockly/core/generator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","workspace","Blockly","inject","media","toolbox","document","getElementById","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","highlightBlock","id","traceOn_","execution_finished","onmessage","obj","data","type","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","generation","tmp","tmp_count","JavaScript","block","parseFloat","getFieldValue","ORDER_ATOMIC","tuple","ADD","ORDER_ADDITION","MINUS","ORDER_SUBTRACTION","MULTIPLY","ORDER_MULTIPLICATION","DIVIDE","ORDER_DIVISION","POWER","ORDER_COMMA","operator","order","argument0","valueToCode","argument1","tmp0","tmp1","ORDER_FUNCTION_CALL","quote_","ORDER_NONE","variableDB_","getName","Variables","NAME_TYPE","ORDER_ASSIGNMENT","STATEMENT_PREFIX","code","workspaceToCode","postMessage","onclick","funcName","Procedures","branch","statementToCode","prefixLines","replace","INDENT","INFINITE_LOOP_TRAP","returnValue","args","x","arguments_","length","join","scrub_","definitions_","getField","repeats","String","Number","addLoopTrap","loopVar","getDistinctName","endVar","match","isNumber","until","ORDER_LOGICAL_NOT","variable0","increment","up","step","Math","abs","startVar","incVar","listVar","indexVar","argument","elseifCount_","elseCount_","Generator","isNaN","goog","asserts","fail","targetBlock","getInputTargetBlock","this","blockToCode","assertArray","innerOrder"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","window.workspace = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\n\t \r\nBlockly.Xml.domToWorkspace(window.workspace,\r\n\tdocument.getElementById('startBlocks'));\r\n\t\t\r\n\r\nexport var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"../../debuggee/bundle.js\");\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\talert(msg);\r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (id) => {\r\n\t\t\t\twindow.workspace.traceOn_ = true;\r\n\t\t\t\twindow.workspace.highlightBlock(id);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","// import './core/generator.js';\r\n// import './generator/logic.js';\r\n// import './generator/loops.js';\r\n// import './generator/math.js';\r\n// import './generator/procedures.js';\r\n// import './generator/text.js';\r\n// import './generator/variables.js';\r\n\r\nexport var generation = {\r\n    tmp : '$',\r\n    tmp_count : 0\r\n}","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['math_number'] = function(block) {\r\n    // Numeric value.\r\n    var code = generation.tmp + ' = ' + parseFloat(block.getFieldValue('NUM')) + ';\\n';\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['math_arithmetic'] = function(block) {\r\n    // Basic arithmetic operators, and power.\r\n    var OPERATORS = {\r\n      'ADD': [' + ', Blockly.JavaScript.ORDER_ADDITION],\r\n      'MINUS': [' - ', Blockly.JavaScript.ORDER_SUBTRACTION],\r\n      'MULTIPLY': [' * ', Blockly.JavaScript.ORDER_MULTIPLICATION],\r\n      'DIVIDE': [' / ', Blockly.JavaScript.ORDER_DIVISION],\r\n      'POWER': [null, Blockly.JavaScript.ORDER_COMMA]  // Handle power separately.\r\n    };\r\n    var tuple = OPERATORS[block.getFieldValue('OP')];\r\n    var operator = tuple[0];\r\n    var order = tuple[1];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\r\n    var code;\r\n    // Power in JavaScript requires a special case since it has no operator.\r\n    if (!operator) {\r\n      var tmp0 = generation.tmp + generation.tmp_count++;\r\n      var tmp1 = generation.tmp + generation.tmp_count++; \r\n      code = argument0 + 'var ' + tmp0 + ' = ' + generation.tmp +';' +\r\n             '\\nawait wait();\\n' +\r\n             argument1 + 'var ' + tmp1 + ' = ' + generation.tmp +';' +\r\n             '\\nawait wait();\\n' +\r\n             generation.tmp + ' = Math.pow(' + tmp0 + ', ' + tmp1 + ');';\r\n      return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    var tmp0 = generation.tmp + generation.tmp_count++;\r\n    var tmp1 = generation.tmp + generation.tmp_count++;\r\n    code = argument0 + 'var ' + tmp0 + ' = ' + generation.tmp + \r\n           ';\\nawait wait();\\n' +\r\n           argument1 + 'var ' + tmp1 + ' = ' + generation.tmp + \r\n           ';\\nawait wait();\\n' +\r\n           generation.tmp +' = ' + tmp0 + operator + tmp1 + ';\\n';\r\n    // code = argument0 + operator + argument1;\r\n    return [code, order];\r\n  };","import {generation} from '../blockly_init.js'; \r\n\r\n\r\nBlockly.JavaScript['text'] = function(block) {\r\n    // Text value.\r\n    var code = generation.tmp + ' = ' + Blockly.JavaScript.quote_(block.getFieldValue('TEXT')) + ';';\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\nBlockly.JavaScript['text_print'] = function(block) {\r\n    // Print statement.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n\r\n    return argument0 + 'window.alert(' + generation.tmp + ');\\n';\r\n  };","import {generation} from '../blockly_init.js'; \r\n\r\nBlockly.JavaScript['variables_get'] = function(block) {\r\n    // Variable getter.\r\n    var code = generation.tmp + ' = ' + Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'),Blockly.Variables.NAME_TYPE) + ';\\n';\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n  };\r\n\r\nBlockly.JavaScript['variables_set'] = function(block) {\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var varName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    return argument0 + varName + ' = ' + generation.tmp + ';\\n';\r\n    // return varName + ' = ' + argument0 + ';\\n';\r\n  };","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Run\"] = () => {\r\n\r\n    if(Debuggee_Worker.hasInstance()) return; \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"run\", \"data\": code});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepInto\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepInto\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\\nawait wait();\\n';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace); \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": code});\r\n}\r\n","import './init.js';\r\nimport {Blocly_Debugger} from './init.js';\r\nimport './blockly/blockly_init.js';\r\nimport './blockly/core/generator.js';\r\nimport './blockly/generator/logic.js';\r\nimport './blockly/generator/loops.js';\r\nimport './blockly/generator/math.js';\r\nimport './blockly/generator/procedures.js';\r\nimport './blockly/generator/text.js';\r\nimport './blockly/generator/variables.js';\r\nimport './actions/run.js';\r\nimport './actions/step.js';\r\nimport './actions/stop.js';\r\nimport './actions/start.js';\r\n\r\ndocument.getElementById(\"RunButton\").onclick = Blocly_Debugger[\"Run\"];\r\ndocument.getElementById(\"StepIntoButton\").onclick = Blocly_Debugger[\"StepInto\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","// // function definition\r\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n//       branch = Blockly.JavaScript.prefixLines(\r\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\r\n//           '\\'' + block.id + '\\''), Blockly.JavaScript.INDENT) + branch;\r\n//     }\r\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n//           '\\'' + block.id + '\\'') + branch;\r\n//     }\r\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n//         Blockly.JavaScript.ORDER_NONE) || '';\r\n//     if (returnValue) {\r\n//       returnValue = '  return ' + returnValue + ';\\n';\r\n//     }\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n//           Blockly.Variables.NAME_TYPE);\r\n//     }\r\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n//         '  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n' +\r\n//         branch + '  if(local_out==false) flags.out = false;\\n' + returnValue + '}'; \r\n//     code = Blockly.JavaScript.scrub_(block, code);\r\n//     Blockly.JavaScript.definitions_[funcName] = code;\r\n//     return null;\r\n//   };\r\n//   Blockly.JavaScript['procedures_defnoreturn'] =\r\n//   Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// // function call \r\n// Blockly.JavaScript['procedures_callreturn'] = function(block) {\r\n//     // Call a procedure with a return value.\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n//           Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n//     }\r\n//     var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n//     return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//   };\r\n  \r\n// Blockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n//     // Call a procedure with no return value.\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n//           Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n//     }\r\n//     var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n//     return code;\r\n//   };\r\n\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\r\n          '\\'' + block.id + '\\''), Blockly.JavaScript.INDENT) + branch;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  return ' + returnValue + ';\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n' +\r\n        branch + '  if(local_out==false) flag_out = false;\\n' + returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };","// Blockly.JavaScript['controls_repeat_ext'] = function(block) {\r\n//     // Repeat n times.\r\n//     if (block.getField('TIMES')) {\r\n//       // Internal number.\r\n//       var repeats = String(Number(block.getFieldValue('TIMES')));\r\n//     } else {\r\n//       // External number.\r\n//       var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\r\n//           Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n//     }\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n//     var code = '';\r\n//     var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//         'count', Blockly.Variables.NAME_TYPE);\r\n//     var endVar = repeats;\r\n//     if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\r\n//       var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//           'repeat_end', Blockly.Variables.NAME_TYPE);\r\n//       code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n//     }\r\n//     code += 'for (var ' + loopVar + ' = 0; ' +\r\n//         loopVar + ' < ' + endVar + '; ' +\r\n//         loopVar + '++) {\\n' +\r\n//         '  let local_over = isStepOver();\\n'                            // me\r\n//         + branch + '}\\n';\r\n//     return code;\r\n//   };\r\n  \r\n//   Blockly.JavaScript['controls_repeat'] =\r\n//       Blockly.JavaScript['controls_repeat_ext'];\r\n  \r\n//   Blockly.JavaScript['controls_whileUntil'] = function(block) {\r\n//     // Do while/until loop.\r\n//     var until = block.getFieldValue('MODE') == 'UNTIL';\r\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\r\n//         until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\r\n//         Blockly.JavaScript.ORDER_NONE) || 'false';\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n//     if (until) {\r\n//       argument0 = '!' + argument0;\r\n//     }\r\n//     return 'while (' + argument0 + ') {\\n' +\r\n//         '  let local_over = isStepOver();\\n'                            // me\r\n//         + branch + '}\\n';\r\n//   };\r\n  \r\n//   Blockly.JavaScript['controls_for'] = function(block) {\r\n//     // For loop.\r\n//     var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\r\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n//     var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\r\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n//     var increment = Blockly.JavaScript.valueToCode(block, 'BY',\r\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n//     var code;\r\n//     if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\r\n//         Blockly.isNumber(increment)) {\r\n//       // All arguments are simple numbers.\r\n//       var up = parseFloat(argument0) <= parseFloat(argument1);\r\n//       code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\r\n//           variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\r\n//           variable0;\r\n//       var step = Math.abs(parseFloat(increment));\r\n//       if (step == 1) {\r\n//         code += up ? '++' : '--';\r\n//       } else {\r\n//         code += (up ? ' += ' : ' -= ') + step;\r\n//       }\r\n//       code += ') {\\n' +\r\n//         '  let local_over = isStepOver();\\n'                            // me\r\n//         + branch + '}\\n';\r\n//     } else {\r\n//       code = '';\r\n//       // Cache non-trivial values to variables to prevent repeated look-ups.\r\n//       var startVar = argument0;\r\n//       if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\r\n//         startVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//             variable0 + '_start', Blockly.Variables.NAME_TYPE);\r\n//         code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n//       }\r\n//       var endVar = argument1;\r\n//       if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\r\n//         var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//             variable0 + '_end', Blockly.Variables.NAME_TYPE);\r\n//         code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n//       }\r\n//       // Determine loop direction at start, in case one of the bounds\r\n//       // changes during loop execution.\r\n//       var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//           variable0 + '_inc', Blockly.Variables.NAME_TYPE);\r\n//       code += 'var ' + incVar + ' = ';\r\n//       if (Blockly.isNumber(increment)) {\r\n//         code += Math.abs(increment) + ';\\n';\r\n//       } else {\r\n//         code += 'Math.abs(' + increment + ');\\n';\r\n//       }\r\n//       code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n//       code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n//       code += '}\\n';\r\n//       code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\r\n//           '     ' + incVar + ' >= 0 ? ' +\r\n//           variable0 + ' <= ' + endVar + ' : ' +\r\n//           variable0 + ' >= ' + endVar + ';\\n' +\r\n//           '     ' + variable0 + ' += ' + incVar + ') {\\n' +\r\n//           '  let local_over = isStepOver();\\n'                            // me\r\n//           + branch + '}\\n';\r\n//     }\r\n//     return code;\r\n//   };\r\n  \r\n//   Blockly.JavaScript['controls_forEach'] = function(block) {\r\n//     // For each loop.\r\n//     var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n//     var code = '';\r\n//     // Cache non-trivial values to variables to prevent repeated look-ups.\r\n//     var listVar = argument0;\r\n//     if (!argument0.match(/^\\w+$/)) {\r\n//       listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//           variable0 + '_list', Blockly.Variables.NAME_TYPE);\r\n//       code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n//     }\r\n//     var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n//         variable0 + '_index', Blockly.Variables.NAME_TYPE);\r\n//     branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\r\n//         listVar + '[' + indexVar + '];\\n' + branch;\r\n//     code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' +\r\n//     '  let local_over = isStepOver();\\n'                            // me\r\n//     + branch + '}\\n';\r\n//     return code;\r\n//   };\r\n\r\nBlockly.JavaScript['controls_repeat_ext'] = function(block) {\r\n    // Repeat n times.\r\n    if (block.getField('TIMES')) {\r\n      // Internal number.\r\n      var repeats = String(Number(block.getFieldValue('TIMES')));\r\n    } else {\r\n      // External number.\r\n      var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\r\n          Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    }\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        'count', Blockly.Variables.NAME_TYPE);\r\n    var endVar = repeats;\r\n    if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\r\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'repeat_end', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n    }\r\n    code += 'for (var ' + loopVar + ' = 0; ' +\r\n        loopVar + ' < ' + endVar + '; ' +\r\n        loopVar + '++) {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_repeat'] =\r\n      Blockly.JavaScript['controls_repeat_ext'];\r\n  \r\n  Blockly.JavaScript['controls_whileUntil'] = function(block) {\r\n    // Do while/until loop.\r\n    var until = block.getFieldValue('MODE') == 'UNTIL';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\r\n        until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    if (until) {\r\n      argument0 = '!' + argument0;\r\n    }\r\n    return 'while (' + argument0 + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_for'] = function(block) {\r\n    // For loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var increment = Blockly.JavaScript.valueToCode(block, 'BY',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code;\r\n    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\r\n        Blockly.isNumber(increment)) {\r\n      // All arguments are simple numbers.\r\n      var up = parseFloat(argument0) <= parseFloat(argument1);\r\n      code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\r\n          variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\r\n          variable0;\r\n      var step = Math.abs(parseFloat(increment));\r\n      if (step == 1) {\r\n        code += up ? '++' : '--';\r\n      } else {\r\n        code += (up ? ' += ' : ' -= ') + step;\r\n      }\r\n      code += ') {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n    } else {\r\n      code = '';\r\n      // Cache non-trivial values to variables to prevent repeated look-ups.\r\n      var startVar = argument0;\r\n      if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\r\n        startVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_start', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n      }\r\n      var endVar = argument1;\r\n      if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\r\n        var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_end', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n      }\r\n      // Determine loop direction at start, in case one of the bounds\r\n      // changes during loop execution.\r\n      var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_inc', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + incVar + ' = ';\r\n      if (Blockly.isNumber(increment)) {\r\n        code += Math.abs(increment) + ';\\n';\r\n      } else {\r\n        code += 'Math.abs(' + increment + ');\\n';\r\n      }\r\n      code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n      code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n      code += '}\\n';\r\n      code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\r\n          '     ' + incVar + ' >= 0 ? ' +\r\n          variable0 + ' <= ' + endVar + ' : ' +\r\n          variable0 + ' >= ' + endVar + ';\\n' +\r\n          '     ' + variable0 + ' += ' + incVar + ') {\\n' +\r\n          '  let local_over = isStepOver();\\n'                            // me\r\n          + branch + '}\\n';\r\n    }\r\n    return code;\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_forEach'] = function(block) {\r\n    // For each loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    var listVar = argument0;\r\n    if (!argument0.match(/^\\w+$/)) {\r\n      listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_list', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        variable0 + '_index', Blockly.Variables.NAME_TYPE);\r\n    branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\r\n        listVar + '[' + indexVar + '];\\n' + branch;\r\n    code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' +\r\n    '  let local_over = isStepOver();\\n'                            // me\r\n    + branch + '}\\n';\r\n    return code;\r\n  };","// // If/elseif/else condition.\r\n// Blockly.JavaScript['controls_if'] = function(block) {\r\n//     var n = 0;\r\n//     var argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n//         Blockly.JavaScript.ORDER_NONE) || 'false';\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n//     var code = 'if (' + argument + ') {\\n' + \r\n//     '  let local_over = isStepOver();\\n'                              // me\r\n//      + branch + '}';\r\n//     for (n = 1; n <= block.elseifCount_; n++) {\r\n//       argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n//           Blockly.JavaScript.ORDER_NONE) || 'false';\r\n//       branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n//       code += ' else if (' + argument + ') {\\n' + \r\n//       '  let local_over = isStepOver();\\n'                            // me\r\n//       + branch + '}';\r\n//     }\r\n//     if (block.elseCount_) {\r\n//       branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\r\n//       code += ' else {\\n' +\r\n//       '  let local_over = isStepOver();\\n'                            // me\r\n//       + branch + '}';\r\n//     }\r\n//     return code + '\\n';\r\n//   };\r\n\r\n\r\nBlockly.JavaScript['controls_if'] = function(block) {\r\n  var n = 0;\r\n  var argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n  var code = 'if (' + argument + ') {\\n' + \r\n  '  let local_over = isStepOver();\\n'                              // me\r\n   + branch + '}';\r\n  for (n = 1; n <= block.elseifCount_; n++) {\r\n    argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n    code += ' else if (' + argument + ') {\\n' + \r\n    '  let local_over = isStepOver();\\n'                            // me\r\n    + branch + '}';\r\n  }\r\n  if (block.elseCount_) {\r\n    branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\r\n    code += ' else {\\n' +\r\n    '  let local_over = isStepOver();\\n'                            // me\r\n    + branch + '}';\r\n  }\r\n  return code + '\\n';\r\n};","Blockly.Generator.prototype.valueToCode = function(block, name, order) {\r\n    if (isNaN(order)) {\r\n      goog.asserts.fail('Expecting valid order from block \"%s\".', block.type);\r\n    }\r\n    var targetBlock = block.getInputTargetBlock(name);\r\n    if (!targetBlock) {\r\n      return '';\r\n    }\r\n    var tuple = this.blockToCode(targetBlock);\r\n    if (tuple === '') {\r\n      // Disabled block.\r\n      return '';\r\n    }\r\n    // Value blocks must return code and order of operations info.\r\n    // Statement blocks must only return code.\r\n    goog.asserts.assertArray(tuple, 'Expecting tuple from value block \"%s\".',\r\n        targetBlock.type);\r\n    var code = tuple[0];\r\n    var innerOrder = tuple[1];\r\n    if (isNaN(innerOrder)) {\r\n      goog.asserts.fail('Expecting valid order from value block \"%s\".',\r\n          targetBlock.type);\r\n    }\r\n    if (code && order <= innerOrder) {\r\n      if (order == innerOrder && (order == 0 || order == 99)) {\r\n        // Don't generate parens around NONE-NONE and ATOMIC-ATOMIC pairs.\r\n        // 0 is the atomic order, 99 is the none order.  No parentheses needed.\r\n        // In all known languages multiple such code blocks are not order\r\n        // sensitive.  In fact in Python ('a' 'b') 'c' would fail.\r\n      } else {\r\n        // The operators outside this code are stonger than the operators\r\n        // inside this code.  To prevent the code from being pulled apart,\r\n        // wrap the code in parentheses.\r\n        // Technically, this should be handled on a language-by-language basis.\r\n        // However all known (sane) languages use parentheses for grouping.\r\n        if(order != 5 && order != 6)                    // for * / % + -\r\n            code = '(' + code + ')';\r\n      }\r\n    }\r\n    return code;\r\n  };"],"sourceRoot":""}