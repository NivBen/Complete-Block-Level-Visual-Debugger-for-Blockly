{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/init.js","webpack:///./src/actions/run.js","webpack:///./src/actions/step.js","webpack:///./src/actions/stop.js","webpack:///./src/actions/start.js","webpack:///./src/index.js","webpack:///./src/blockly/loops.js","webpack:///./src/blockly/logic.js","webpack:///./src/blockly/procedures.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","workspace","Blockly","inject","media","toolbox","document","getElementById","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","highlightBlock","id","traceOn_","execution_finished","onmessage","obj","data","type","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","JavaScript","STATEMENT_PREFIX","code","workspaceToCode","postMessage","onclick","block","getField","repeats","String","Number","getFieldValue","valueToCode","ORDER_ASSIGNMENT","branch","statementToCode","addLoopTrap","loopVar","variableDB_","getDistinctName","Variables","NAME_TYPE","endVar","match","isNumber","until","argument0","ORDER_LOGICAL_NOT","ORDER_NONE","variable0","getName","argument1","increment","up","parseFloat","step","Math","abs","startVar","incVar","INDENT","listVar","indexVar","argument","elseifCount_","elseCount_","funcName","Procedures","prefixLines","replace","INFINITE_LOOP_TRAP","returnValue","args","x","arguments_","length","join","scrub_","definitions_","ORDER_COMMA","ORDER_FUNCTION_CALL"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","window.workspace = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\n\t \r\nBlockly.Xml.domToWorkspace(window.workspace,\r\n\tdocument.getElementById('startBlocks'));\r\n\t\t\r\n\r\nexport var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"../../debuggee/bundle.js\");\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\talert(msg);\r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (id) => {\r\n\t\t\t\twindow.workspace.traceOn_ = true;\r\n\t\t\t\twindow.workspace.highlightBlock(id);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Run\"] = () => {\r\n\r\n    if(Debuggee_Worker.hasInstance()) return; \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"run\", \"data\": code});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepInto\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepInto\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\\nawait stepInto_wait(local_over);\\n';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace); \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": code});\r\n}\r\n","import './init.js';\r\nimport {Blocly_Debugger} from './init.js';\r\nimport './blockly/blockly.js';\r\nimport './actions/run.js';\r\nimport './actions/step.js';\r\nimport './actions/stop.js';\r\nimport './actions/start.js';\r\n\r\ndocument.getElementById(\"RunButton\").onclick = Blocly_Debugger[\"Run\"];\r\ndocument.getElementById(\"StepIntoButton\").onclick = Blocly_Debugger[\"StepInto\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","Blockly.JavaScript['controls_repeat_ext'] = function(block) {\r\n    // Repeat n times.\r\n    if (block.getField('TIMES')) {\r\n      // Internal number.\r\n      var repeats = String(Number(block.getFieldValue('TIMES')));\r\n    } else {\r\n      // External number.\r\n      var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\r\n          Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    }\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        'count', Blockly.Variables.NAME_TYPE);\r\n    var endVar = repeats;\r\n    if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\r\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'repeat_end', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n    }\r\n    code += 'for (var ' + loopVar + ' = 0; ' +\r\n        loopVar + ' < ' + endVar + '; ' +\r\n        loopVar + '++) {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_repeat'] =\r\n      Blockly.JavaScript['controls_repeat_ext'];\r\n  \r\n  Blockly.JavaScript['controls_whileUntil'] = function(block) {\r\n    // Do while/until loop.\r\n    var until = block.getFieldValue('MODE') == 'UNTIL';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\r\n        until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    if (until) {\r\n      argument0 = '!' + argument0;\r\n    }\r\n    return 'while (' + argument0 + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_for'] = function(block) {\r\n    // For loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\r\n    var increment = Blockly.JavaScript.valueToCode(block, 'BY',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code;\r\n    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\r\n        Blockly.isNumber(increment)) {\r\n      // All arguments are simple numbers.\r\n      var up = parseFloat(argument0) <= parseFloat(argument1);\r\n      code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\r\n          variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\r\n          variable0;\r\n      var step = Math.abs(parseFloat(increment));\r\n      if (step == 1) {\r\n        code += up ? '++' : '--';\r\n      } else {\r\n        code += (up ? ' += ' : ' -= ') + step;\r\n      }\r\n      code += ') {\\n' +\r\n        '  let local_over = isStepOver();\\n'                            // me\r\n        + branch + '}\\n';\r\n    } else {\r\n      code = '';\r\n      // Cache non-trivial values to variables to prevent repeated look-ups.\r\n      var startVar = argument0;\r\n      if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\r\n        startVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_start', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n      }\r\n      var endVar = argument1;\r\n      if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\r\n        var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            variable0 + '_end', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n      }\r\n      // Determine loop direction at start, in case one of the bounds\r\n      // changes during loop execution.\r\n      var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_inc', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + incVar + ' = ';\r\n      if (Blockly.isNumber(increment)) {\r\n        code += Math.abs(increment) + ';\\n';\r\n      } else {\r\n        code += 'Math.abs(' + increment + ');\\n';\r\n      }\r\n      code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n      code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n      code += '}\\n';\r\n      code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\r\n          '     ' + incVar + ' >= 0 ? ' +\r\n          variable0 + ' <= ' + endVar + ' : ' +\r\n          variable0 + ' >= ' + endVar + ';\\n' +\r\n          '     ' + variable0 + ' += ' + incVar + ') {\\n' +\r\n          '  let local_over = isStepOver();\\n'                            // me\r\n          + branch + '}\\n';\r\n    }\r\n    return code;\r\n  };\r\n  \r\n  Blockly.JavaScript['controls_forEach'] = function(block) {\r\n    // For each loop.\r\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\r\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\r\n    var code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    var listVar = argument0;\r\n    if (!argument0.match(/^\\w+$/)) {\r\n      listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          variable0 + '_list', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n        variable0 + '_index', Blockly.Variables.NAME_TYPE);\r\n    branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\r\n        listVar + '[' + indexVar + '];\\n' + branch;\r\n    code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' +\r\n    '  let local_over = isStepOver();\\n'                            // me\r\n    + branch + '}\\n';\r\n    return code;\r\n  };","// If/elseif/else condition.\r\nBlockly.JavaScript['controls_if'] = function(block) {\r\n    var n = 0;\r\n    var argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n        Blockly.JavaScript.ORDER_NONE) || 'false';\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n    var code = 'if (' + argument + ') {\\n' + \r\n    '  let local_over = isStepOver();\\n'                              // me\r\n     + branch + '}';\r\n    for (n = 1; n <= block.elseifCount_; n++) {\r\n      argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\r\n          Blockly.JavaScript.ORDER_NONE) || 'false';\r\n      branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\r\n      code += ' else if (' + argument + ') {\\n' + \r\n      '  let local_over = isStepOver();\\n'                            // me\r\n      + branch + '}';\r\n    }\r\n    if (block.elseCount_) {\r\n      branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\r\n      code += ' else {\\n' +\r\n      '  let local_over = isStepOver();\\n'                            // me\r\n      + branch + '}';\r\n    }\r\n    return code + '\\n';\r\n  };","// function definition\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\r\n          '\\'' + block.id + '\\''), Blockly.JavaScript.INDENT) + branch;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  return ' + returnValue + ';\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n' +\r\n        branch + '  if(local_out==false) flag_out = false;\\n' + returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };"],"sourceRoot":""}