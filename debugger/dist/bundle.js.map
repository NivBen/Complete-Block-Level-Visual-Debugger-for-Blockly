{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/init.js","webpack:///./src/blockly/blockly_init.js","webpack:///./src/blockly/generator/procedures.js","webpack:///./src/blockly/core/generator.js","webpack:///./src/blockly/generator/lists.js","webpack:///./src/actions/run.js","webpack:///./src/actions/step.js","webpack:///./src/actions/stop.js","webpack:///./src/actions/start.js","webpack:///./src/index.js","webpack:///./src/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","workspace","Blockly","inject","media","toolbox","document","getElementById","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","prompt","postMessage","type","data","highlightBlock","id","traceOn_","execution_finished","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","generation","tmp","tmp_count","nest","JavaScript","block","funcName","variableDB_","getName","getFieldValue","Procedures","NAME_TYPE","branch","statementToCode","STATEMENT_PREFIX","prefixLines","replace","INDENT","INFINITE_LOOP_TRAP","returnValue","valueToCode","ORDER_NONE","args","x","arguments_","length","Variables","code","join","scrub_","definitions_","ORDER_COMMA","ORDER_FUNCTION_CALL","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","isString","fail","addLoopTrap","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","argument0","mode","where","at","ORDER_UNARY_NEGATION","list","isNumber","parseFloat","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","getDistinctName","xVar","value_input","value_delim","functionName","workspaceToCode","console","log","onclick","text","where1","where2","at1","at2","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField","quote_"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","window.workspace = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\n\t \r\nBlockly.Xml.domToWorkspace(window.workspace,\r\n\tdocument.getElementById('startBlocks'));\r\n\t\t\r\n\r\nexport var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"../../debuggee/bundle.js\");\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\twindow.alert(msg);\r\n\t\t\t},\r\n\t\t\t\"prompt\" : (msg) => {\r\n\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (id) => {\r\n\t\t\t\twindow.workspace.traceOn_ = true;\r\n\t\t\t\twindow.workspace.highlightBlock(id);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","export var generation = {\r\n    tmp : '$id',\r\n    tmp_count : 0,\r\n    nest : -1\r\n}","import {generation} from '../blockly_init'\r\n\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  return ' + returnValue + ';\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n        '  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n' +\r\n        branch + '  if(local_out==false) flag_out = false;\\n' + returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };","import {generation} from '../blockly_init'\r\n\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\'' + block.id + '\\'),' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\'' + block.id + '\\')') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, generation.nest +\r\n        ', \\'' + id + '\\''), this.INDENT);\r\n  }\r\n  return branch;\r\n};","'use strict';\r\nimport {generation} from '../blockly_init'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n    // Get element at index.\r\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n    list = '(' + list + ')';\r\n    if (where == 'FIRST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'lists_remove_from_end',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(list, x) {',\r\n              '  x = list.length - x;',\r\n              '  return list.splice(x, 1)[0];',\r\n              '}']);\r\n        code = functionName + '(' + list + ', ' + at + ')';\r\n        if (mode == 'GET_REMOVE') {\r\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n        } else if (mode == 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'lists_get_random_item',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n            '  var x = Math.floor(Math.random() * list.length);',\r\n            '  if (remove) {',\r\n            '    return list.splice(x, 1)[0];',\r\n            '  } else {',\r\n            '    return list[x];',\r\n            '  }',\r\n            '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_getIndex).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n \r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_list', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    if (where == 'FIRST') {\r\n      if (mode == 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'SET') {\r\n        var code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      var code = cacheList();\r\n      if (mode == 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n            ');\\n';\r\n        return code;\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var code = cacheList();\r\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_x', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n          '.length);\\n';\r\n      if (mode == 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!value_input) {\r\n        value_input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!value_input) {\r\n        value_input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Run\"] = () => {\r\n\r\n    if(Debuggee_Worker.hasInstance()) return; \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"run\", \"data\": code});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepInto\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepInto\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace); \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": code});\r\n    console.log(code);\r\n}\r\n","import './init.js';\r\nimport {Blocly_Debugger} from './init.js';\r\nimport './blockly/blockly.js';\r\nimport './actions/run.js';\r\nimport './actions/step.js';\r\nimport './actions/stop.js';\r\nimport './actions/start.js';\r\n\r\ndocument.getElementById(\"RunButton\").onclick = Blocly_Debugger[\"Run\"];\r\ndocument.getElementById(\"StepIntoButton\").onclick = Blocly_Debugger[\"StepInto\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        // Blockly uses one-based indicies.\r\n        if (Blockly.isNumber(at)) {\r\n          // If the index is a naked number, decrement it right now.\r\n          at = parseFloat(at) - 1;\r\n        } else {\r\n          // If the index is dynamic, decrement it in code.\r\n          at += ' - 1';\r\n        }\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var code = text + '.slice(-' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'text_random_letter',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n              '  var x = Math.floor(Math.random() * text.length);',\r\n              '  return text[x];',\r\n              '}']);\r\n        code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else {\r\n        text = '(' + text + ')';\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_get_substring',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(text, where1, at1, where2, at2) {',\r\n            '  function getAt(where, at) {',\r\n            '    if (where == \\'FROM_START\\') {',\r\n            '      at--;',\r\n            '    } else if (where == \\'FROM_END\\') {',\r\n            '      at = text.length - at;',\r\n            '    } else if (where == \\'FIRST\\') {',\r\n            '      at = 0;',\r\n            '    } else if (where == \\'LAST\\') {',\r\n            '      at = text.length - 1;',\r\n            '    } else {',\r\n            '      throw \\'Unhandled option (text_getSubstring).\\';',\r\n            '    }',\r\n            '    return at;',\r\n            '  }',\r\n            '  at1 = getAt(where1, at1);',\r\n            '  at2 = getAt(where2, at2) + 1;',\r\n            '  return text.slice(at1, at2);',\r\n            '}']);\r\n      var code = functionName + '(' + text + ', \\'' +\r\n          where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var code;\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n      code = '(' + argument0 + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_toTitleCase',\r\n          [ 'function ' +\r\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n            '  return str.replace(/\\\\S+/g,',\r\n            '      function(txt) {return txt[0].toUpperCase() + ' +\r\n                'txt.substring(1).toLowerCase();});',\r\n            '}']);\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    alert(\"text_trim\");\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];"],"sourceRoot":""}