{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../generator/blockly/generator/text.js","webpack:///./init_blockly.js","webpack:///../debugger/init.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/start.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Blockly","JavaScript","block","valueToCode","ORDER_FUNCTION_CALL","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","argument0","ORDER_NONE","where","at","ORDER_UNARY_NEGATION","text","isNumber","parseFloat","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","where1","where2","at1","at2","code","UPPERCASE","LOWERCASE","TITLECASE","alert","LEFT","RIGHT","BOTH","getField","msg","quote_","window","workspace","inject","media","toolbox","document","getElementById","systemEditorId","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","prompt","postMessage","type","data","highlightBlock","CurrentSystemEditorId","traceOn_","id","execution_finished","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","breakpoints","block_id","STATEMENT_PREFIX","code1","workspaceToCode","code2","console","log","generation","nest","currentSystemEditorId","mode","list","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","xVar","value_input","value_delim","functionName","funcName","getName","Procedures","branch","statementToCode","prefixLines","replace","INDENT","INFINITE_LOOP_TRAP","returnValue","args","x","arguments_","length","join","scrub_","definitions_","ORDER_COMMA","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","isString","fail","addLoopTrap","warn","getMainWorkspace","init","blocks","getTopBlocks","line","push","outputConnection","scrubNakedValue","finish","BlockSvg","showContextMenu_","e","options","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","duplicateOption","Msg","DUPLICATE_BLOCK","enabled","duplicate_","getDescendants","remainingCapacity","isEditable","collapsed_","comments","commentOption","userAgent","IE","comment","REMOVE_COMMENT","setCommentText","ADD_COMMENT","inputList","NEXT_STATEMENT","inlineOption","isInline","getInputsInline","EXTERNAL_INPUTS","INLINE_INPUTS","setInputsInline","collapse","expandOption","EXPAND_BLOCK","setCollapsed","collapseOption","COLLAPSE_BLOCK","disable","disableOption","ENABLE_BLOCK","DISABLE_BLOCK","getInheritedDisabled","setDisabled","descendantCount","nextBlock","deleteOption","DELETE_BLOCK","DELETE_X_BLOCKS","String","dispose","breakpointOption","includes","index","indexOf","splice","helpOption","isFunction","helpUrl","HELP","showHelp_","customContextMenu","ContextMenu","show","RTL","currentBlock","onclick"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        // Blockly uses one-based indicies.\r\n        if (Blockly.isNumber(at)) {\r\n          // If the index is a naked number, decrement it right now.\r\n          at = parseFloat(at) - 1;\r\n        } else {\r\n          // If the index is dynamic, decrement it in code.\r\n          at += ' - 1';\r\n        }\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var code = text + '.slice(-' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'text_random_letter',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n              '  var x = Math.floor(Math.random() * text.length);',\r\n              '  return text[x];',\r\n              '}']);\r\n        code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else {\r\n        text = '(' + text + ')';\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_get_substring',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(text, where1, at1, where2, at2) {',\r\n            '  function getAt(where, at) {',\r\n            '    if (where == \\'FROM_START\\') {',\r\n            '      at--;',\r\n            '    } else if (where == \\'FROM_END\\') {',\r\n            '      at = text.length - at;',\r\n            '    } else if (where == \\'FIRST\\') {',\r\n            '      at = 0;',\r\n            '    } else if (where == \\'LAST\\') {',\r\n            '      at = text.length - 1;',\r\n            '    } else {',\r\n            '      throw \\'Unhandled option (text_getSubstring).\\';',\r\n            '    }',\r\n            '    return at;',\r\n            '  }',\r\n            '  at1 = getAt(where1, at1);',\r\n            '  at2 = getAt(where2, at2) + 1;',\r\n            '  return text.slice(at1, at2);',\r\n            '}']);\r\n      var code = functionName + '(' + text + ', \\'' +\r\n          where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var code;\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n      code = '(' + argument0 + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_toTitleCase',\r\n          [ 'function ' +\r\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n            '  return str.replace(/\\\\S+/g,',\r\n            '      function(txt) {return txt[0].toUpperCase() + ' +\r\n                'txt.substring(1).toLowerCase();});',\r\n            '}']);\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    alert(\"text_trim\");\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];","window.workspace = {};\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\r\n\r\nBlockly.Xml.domToWorkspace(window.workspace[\"blockly1\"],\r\n\tdocument.getElementById('startBlocks'));\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(window.workspace[\"blockly2\"],\r\n \tdocument.getElementById('startBlocks'));","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\"); // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\twindow.alert(msg);\r\n\t\t\t},\r\n\t\t\t\"prompt\" : (msg) => {\r\n\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (data) => {\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\t\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\r\n\t\t\t\t// block.setCollapsed(false);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nexport var breakpoints = [];\r\n\r\nBlocly_Debugger[\"Breakpoint\"] = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\":breakpoints});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Continue\"] = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepIn\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepParent\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init.js\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\nimport {breakpoints} from './breakpoints.js';\r\n// function addCode(js){                                // gia na kanw debug to eval \r\n//     var e = document.createElement('script');\r\n//     e.type = 'text/javascript';\r\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\r\n//     document.head.appendChild(e);\r\n// }\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    // var code = \"async function code(){\\n\" + code1 + code2 +\" };\\ncode();\";\r\n    // addCode(code);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": breakpoints}});\r\n    console.log(code1 + code2);\r\n}\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n    // Get element at index.\r\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n    list = '(' + list + ')';\r\n    if (where == 'FIRST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'lists_remove_from_end',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(list, x) {',\r\n              '  x = list.length - x;',\r\n              '  return list.splice(x, 1)[0];',\r\n              '}']);\r\n        code = functionName + '(' + list + ', ' + at + ')';\r\n        if (mode == 'GET_REMOVE') {\r\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n        } else if (mode == 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'lists_get_random_item',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n            '  var x = Math.floor(Math.random() * list.length);',\r\n            '  if (remove) {',\r\n            '    return list.splice(x, 1)[0];',\r\n            '  } else {',\r\n            '    return list[x];',\r\n            '  }',\r\n            '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_getIndex).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n \r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_list', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    if (where == 'FIRST') {\r\n      if (mode == 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'SET') {\r\n        var code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      var code = cacheList();\r\n      if (mode == 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n            ');\\n';\r\n        return code;\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var code = cacheList();\r\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_x', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n          '.length);\\n';\r\n      if (mode == 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!value_input) {\r\n        value_input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!value_input) {\r\n        value_input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(flags.currNest != -1) flags.parent = false;\\n  flags.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n    }else{\r\n        returnValue = '  if(flags.currNest != -1) flags.parent = false;\\n  flags.currNest = global_nest;\\n' + '  return;\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n        '  let global_nest = flags.currNest;\\n' + \r\n        '  if(isStepOver() || isStepParent()) flags.currNest = -1;\\n' +\r\n        branch +    \r\n        returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  flags.currNest = global_nest;\\n  flags.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'),' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\')') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};","import {Blocly_Debugger, breakpoints} from '../../../debugger/debugger.js';\r\n\r\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      // Option to duplicate this block.\r\n      var duplicateOption = {\r\n        text: Blockly.Msg.DUPLICATE_BLOCK,\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly.duplicate_(block);\r\n        }\r\n      };\r\n      if (this.getDescendants().length > this.workspace.remainingCapacity()) {\r\n        duplicateOption.enabled = false;\r\n      }\r\n      menuOptions.push(duplicateOption);\r\n  \r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        // Option to add/remove a comment.\r\n        var commentOption = {enabled: !goog.userAgent.IE};\r\n        if (this.comment) {\r\n          commentOption.text = Blockly.Msg.REMOVE_COMMENT;\r\n          commentOption.callback = function() {\r\n            block.setCommentText(null);\r\n          };\r\n        } else {\r\n          commentOption.text = Blockly.Msg.ADD_COMMENT;\r\n          commentOption.callback = function() {\r\n            block.setCommentText('');\r\n          };\r\n        }\r\n        menuOptions.push(commentOption);\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg.EXTERNAL_INPUTS : Blockly.Msg.INLINE_INPUTS;\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg.EXPAND_BLOCK;\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg.COLLAPSE_BLOCK;\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg.ENABLE_BLOCK : Blockly.Msg.DISABLE_BLOCK,\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      // Option to delete this block.\r\n      // Count the number of blocks that are nested in this block.\r\n      var descendantCount = this.getDescendants().length;\r\n      var nextBlock = this.getNextBlock();\r\n      if (nextBlock) {\r\n        // Blocks in the current stack would survive this block's deletion.\r\n        descendantCount -= nextBlock.getDescendants().length;\r\n      }\r\n      var deleteOption = {\r\n        text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :\r\n            Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),\r\n        enabled: true,\r\n        callback: function() {\r\n          block.dispose(true, true);\r\n        }\r\n      };\r\n      menuOptions.push(deleteOption);\r\n    }\r\n  \r\n\r\n    // Breakpoints\r\n    var breakpointOption = {\r\n      text: (!breakpoints.includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n      enabled: true,\r\n      callback: function() {\r\n          if(!breakpoints.includes(block.id)) {\r\n            breakpoints.push(block.id);\r\n            block.setCollapsed(false);                                  // expand the block if it is collapted \r\n          } else {\r\n            var index = breakpoints.indexOf(block.id);\r\n            if (index !== -1) breakpoints.splice(index, 1)\r\n          }\r\n          Blocly_Debugger[\"Breakpoint\"](breakpoints);\r\n        }\r\n    };\r\n    menuOptions.push(breakpointOption);\r\n\r\n\r\n    // Option to get help.\r\n    var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;\r\n    var helpOption = {enabled: !!url};\r\n    helpOption.text = Blockly.Msg.HELP;\r\n    helpOption.callback = function() {\r\n      block.showHelp_();\r\n    };\r\n    menuOptions.push(helpOption);\r\n    \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu && !block.isInFlyout) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n\r\n\r\n  };","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blocly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blocly_Debugger[\"Continue\"];\r\ndocument.getElementById(\"StepInButton\").onclick = Blocly_Debugger[\"StepIn\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepParentButton\").onclick = Blocly_Debugger[\"StepParent\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));"],"sourceRoot":""}