{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./index.js","webpack:///../generator/blockly/generator/text.js","webpack:///./init_blockly.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","window","prompt","postMessage","type","data","highlightBlock","workspace","CurrentSystemEditorId","traceOn_","id","execution_finished","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","Blockly","JavaScript","STATEMENT_PREFIX","code1","workspaceToCode","code2","code","breakpoints","console","log","generation","nest","currentSystemEditorId","block","valueToCode","ORDER_FUNCTION_CALL","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","argument0","ORDER_NONE","mode","where","at","ORDER_UNARY_NEGATION","list","isNumber","parseFloat","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","xVar","value_input","value_delim","functionName","funcName","getName","Procedures","branch","statementToCode","prefixLines","replace","INDENT","INFINITE_LOOP_TRAP","returnValue","args","x","arguments_","length","join","scrub_","definitions_","ORDER_COMMA","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","isString","fail","addLoopTrap","warn","getMainWorkspace","init","blocks","getTopBlocks","systemEditorId","line","push","outputConnection","scrubNakedValue","finish","BlockSvg","showContextMenu_","e","options","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","duplicateOption","text","Msg","DUPLICATE_BLOCK","enabled","duplicate_","getDescendants","remainingCapacity","isEditable","collapsed_","comments","commentOption","userAgent","IE","comment","REMOVE_COMMENT","setCommentText","ADD_COMMENT","inputList","NEXT_STATEMENT","inlineOption","isInline","getInputsInline","EXTERNAL_INPUTS","INLINE_INPUTS","setInputsInline","collapse","expandOption","EXPAND_BLOCK","setCollapsed","collapseOption","COLLAPSE_BLOCK","disable","disableOption","ENABLE_BLOCK","DISABLE_BLOCK","getInheritedDisabled","setDisabled","descendantCount","nextBlock","deleteOption","DELETE_BLOCK","DELETE_X_BLOCKS","String","dispose","breakpointOption","includes","index","indexOf","splice","helpOption","isFunction","helpUrl","HELP","showHelp_","customContextMenu","ContextMenu","show","RTL","currentBlock","document","getElementById","onclick","where1","where2","at1","at2","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField","quote_","inject","media","toolbox","Xml","domToWorkspace"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\"); // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\twindow.alert(msg);\r\n\t\t\t},\r\n\t\t\t\"prompt\" : (msg) => {\r\n\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (data) => {\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\t\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\r\n\t\t\t\t// block.setCollapsed(false);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\n// function addCode(js){                                // gia na kanw debug to eval \r\n//     var e = document.createElement('script');\r\n//     e.type = 'text/javascript';\r\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\r\n//     document.head.appendChild(e);\r\n// }\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    // var code = \"async function code(){\\n\" + code1 + code2 +\" };\\ncode();\";\r\n    // addCode(code);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints}});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger[\"Breakpoint\"].breakpoints});\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n    // Get element at index.\r\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n    list = '(' + list + ')';\r\n    if (where == 'FIRST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'lists_remove_from_end',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(list, x) {',\r\n              '  x = list.length - x;',\r\n              '  return list.splice(x, 1)[0];',\r\n              '}']);\r\n        code = functionName + '(' + list + ', ' + at + ')';\r\n        if (mode == 'GET_REMOVE') {\r\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n        } else if (mode == 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'lists_get_random_item',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n            '  var x = Math.floor(Math.random() * list.length);',\r\n            '  if (remove) {',\r\n            '    return list.splice(x, 1)[0];',\r\n            '  } else {',\r\n            '    return list[x];',\r\n            '  }',\r\n            '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_getIndex).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n \r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_list', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    if (where == 'FIRST') {\r\n      if (mode == 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'SET') {\r\n        var code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      var code = cacheList();\r\n      if (mode == 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n            ');\\n';\r\n        return code;\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var code = cacheList();\r\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_x', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n          '.length);\\n';\r\n      if (mode == 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!value_input) {\r\n        value_input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!value_input) {\r\n        value_input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\n  Blockly_debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n    }else{\r\n        returnValue = '  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\n  Blockly_debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n        '  let global_nest = Blockly_debuggee.state.currNest;\\n' + \r\n        '  if(isStepOver() || isStepParent()) Blockly_debuggee.state.currNest = -1;\\n' +\r\n        branch +    \r\n        returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  Blockly_debuggee.state.currNest = global_nest;\\n  Blockly_debuggee.state.currState.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'),' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\')') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};","import {Blockly_Debugger} from '../../../debugger/debugger.js';\r\n\r\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      // Option to duplicate this block.\r\n      var duplicateOption = {\r\n        text: Blockly.Msg.DUPLICATE_BLOCK,\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly.duplicate_(block);\r\n        }\r\n      };\r\n      if (this.getDescendants().length > this.workspace.remainingCapacity()) {\r\n        duplicateOption.enabled = false;\r\n      }\r\n      menuOptions.push(duplicateOption);\r\n  \r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        // Option to add/remove a comment.\r\n        var commentOption = {enabled: !goog.userAgent.IE};\r\n        if (this.comment) {\r\n          commentOption.text = Blockly.Msg.REMOVE_COMMENT;\r\n          commentOption.callback = function() {\r\n            block.setCommentText(null);\r\n          };\r\n        } else {\r\n          commentOption.text = Blockly.Msg.ADD_COMMENT;\r\n          commentOption.callback = function() {\r\n            block.setCommentText('');\r\n          };\r\n        }\r\n        menuOptions.push(commentOption);\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg.EXTERNAL_INPUTS : Blockly.Msg.INLINE_INPUTS;\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg.EXPAND_BLOCK;\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg.COLLAPSE_BLOCK;\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg.ENABLE_BLOCK : Blockly.Msg.DISABLE_BLOCK,\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      // Option to delete this block.\r\n      // Count the number of blocks that are nested in this block.\r\n      var descendantCount = this.getDescendants().length;\r\n      var nextBlock = this.getNextBlock();\r\n      if (nextBlock) {\r\n        // Blocks in the current stack would survive this block's deletion.\r\n        descendantCount -= nextBlock.getDescendants().length;\r\n      }\r\n      var deleteOption = {\r\n        text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :\r\n            Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),\r\n        enabled: true,\r\n        callback: function() {\r\n          block.dispose(true, true);\r\n        }\r\n      };\r\n      menuOptions.push(deleteOption);\r\n    }\r\n  \r\n\r\n    // Breakpoints\r\n    var breakpointOption = {\r\n      text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n      enabled: true,\r\n      callback: function() {\r\n          if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) {\r\n            Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(block.id);\r\n            block.setCollapsed(false);                                  // expand the block if it is collapted \r\n          } else {\r\n            var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.indexOf(block.id);\r\n            if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1)\r\n          }\r\n          Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          alert(\"Selected: \" + block.id + \"\\n breakpoints: \" + Blockly_Debugger.actions[\"Breakpoint\"].breakpoints);\r\n        }\r\n    };\r\n    menuOptions.push(breakpointOption);\r\n\r\n\r\n    // Option to get help.\r\n    var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;\r\n    var helpOption = {enabled: !!url};\r\n    helpOption.text = Blockly.Msg.HELP;\r\n    helpOption.callback = function() {\r\n      block.showHelp_();\r\n    };\r\n    menuOptions.push(helpOption);\r\n    \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu && !block.isInFlyout) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n\r\n\r\n  };","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        // Blockly uses one-based indicies.\r\n        if (Blockly.isNumber(at)) {\r\n          // If the index is a naked number, decrement it right now.\r\n          at = parseFloat(at) - 1;\r\n        } else {\r\n          // If the index is dynamic, decrement it in code.\r\n          at += ' - 1';\r\n        }\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var code = text + '.slice(-' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'text_random_letter',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n              '  var x = Math.floor(Math.random() * text.length);',\r\n              '  return text[x];',\r\n              '}']);\r\n        code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else {\r\n        text = '(' + text + ')';\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_get_substring',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(text, where1, at1, where2, at2) {',\r\n            '  function getAt(where, at) {',\r\n            '    if (where == \\'FROM_START\\') {',\r\n            '      at--;',\r\n            '    } else if (where == \\'FROM_END\\') {',\r\n            '      at = text.length - at;',\r\n            '    } else if (where == \\'FIRST\\') {',\r\n            '      at = 0;',\r\n            '    } else if (where == \\'LAST\\') {',\r\n            '      at = text.length - 1;',\r\n            '    } else {',\r\n            '      throw \\'Unhandled option (text_getSubstring).\\';',\r\n            '    }',\r\n            '    return at;',\r\n            '  }',\r\n            '  at1 = getAt(where1, at1);',\r\n            '  at2 = getAt(where2, at2) + 1;',\r\n            '  return text.slice(at1, at2);',\r\n            '}']);\r\n      var code = functionName + '(' + text + ', \\'' +\r\n          where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var code;\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n      code = '(' + argument0 + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_toTitleCase',\r\n          [ 'function ' +\r\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n            '  return str.replace(/\\\\S+/g,',\r\n            '      function(txt) {return txt[0].toUpperCase() + ' +\r\n                'txt.substring(1).toLowerCase();});',\r\n            '}']);\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    alert(\"text_trim\");\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];","window.workspace = {};\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\r\n\r\nBlockly.Xml.domToWorkspace(window.workspace[\"blockly1\"],\r\n\tdocument.getElementById('startBlocks'));\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(window.workspace[\"blockly2\"],\r\n \tdocument.getElementById('startBlocks'));"],"sourceRoot":""}