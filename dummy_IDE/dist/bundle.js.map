{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/watches.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/breakpoint.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./events.js","webpack:///./init_blockly.js","webpack:///./index.js","webpack:///../generator/blockly/core/block.js","webpack:///../generator/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","msg","window","alert","postMessage","type","data","prompt","workspace","CurrentSystemEditorId","traceOn_","highlightBlock","id","document","getElementById","innerHTML","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","watches","dispatchEvent","Event","update","new_watches","getWatches","init","length","variables","new_vars","getVariables","workspace_vars","getAllVariables","map","variable","variables_names","j","includes","nvar","push","expr","cursorBreakpoint","Blockly","JavaScript","STATEMENT_PREFIX","code1","workspaceToCode","code2","code","MouseEvent","breakpoints","block_id","enable","console","log","wait_view","getBlockById","block","setCollapsed","parentBlock_","style","stroke","fill","reset_view","disable","indexOf","generation","nest","currentSystemEditorId","valueToCode","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","item","ORDER_NONE","options","oneBasedIndex","ORDER_ADDITION","ORDER_FUNCTION_CALL","mode","where","listOrder","ORDER_COMMA","list","at","getAdjusted","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","ORDER_SUBTRACTION","xVar","input","delimiter","functionName","direction","funcName","getName","Procedures","branch","statementToCode","replace","prefixLines","INDENT","INFINITE_LOOP_TRAP","returnValue","args","arguments_","join","scrub_","definitions_","x","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","assert","outputConnection","isString","fail","addLoopTrap","warn","getMainWorkspace","blocks","getTopBlocks","systemEditorId","line","scrubNakedValue","finish","myBlockToCode","stmt_Prefix","myscrub_","a","b","targetConnection","getCommentText","utils","wrap","COMMENT_WRAP","getProcedureDef","e","inputList","INPUT_VALUE","connection","targetBlock","allNestedComments","functionNames_","reset","quote_","Breakpoint_Icon","Icon","createIcon","create","width_","height_","drawIcon_","group","createSvgElement","class","block_","cx","cy","setVisible","visible","isEnable","myDisable","index","splice","dom","removeNode","iconGroup_","createElementNS","SVG_NS","setAttribute","body","runtimeStyle","currentStyle","appendChild","BlockSvg","showContextMenu_","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","ContextMenu","blockDuplicateOption","isEditable","collapsed_","comments","blockCommentOption","NEXT_STATEMENT","inlineOption","enabled","isInline","getInputsInline","text","Msg","setInputsInline","collapse","expandOption","collapseOption","disableOption","getInheritedDisabled","setDisabled","blockDeleteOption","breakpointOption","icon","new_br","DisableBreakpointOption","runToCursorOption","watchOption","toString","new_watch","evalOption","block___","blockHelpOption","customContextMenu","show","RTL","currentBlock","addEventListener","inject","media","toolbox","Xml","domToWorkspace","onclick","Block","opt_maxLength","opt_emptyToken","emptyFieldPlaceholder","getInput","fieldRow","text_","field","FieldDropdown","getValue","getText","child","child_text","string","trim","truncate","argument0","textOrder","where1","where2","at1","at2","getIndex_","wherePascalCase","FIRST","LAST","FROM_START","FROM_END","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher = {};\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\");\t // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher[\"alert\"] = (msg) => {\r\n\t\t\t\t\twindow.alert(msg);\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"alert\",\"data\": \"\"});\r\n\t\t\t\t};\r\n\t\tdispatcher[\"prompt\"] = (msg) => {\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \t\t\t\t\t\r\n\t\t\t\t};\r\n\t\tdispatcher[\"highlightBlock\"] = (data) => {\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t}; \t\t\t\t\t\t\r\n\t\tdispatcher[\"execution_finished\"] = () => {\r\n\t\t\t\t\tinstance = undefined;\r\n\t\t\t\t\tdocument.getElementById(\"val_table\").innerHTML = '';\r\n\t\t\t\t};\t\t\r\n\t};\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    document.getElementById(\"val_table\").innerHTML = '';\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = {};\r\nBlockly_Debugger.actions[\"Variables\"] = {};\r\nBlockly_Debugger.actions[\"Eval\"] = {};\r\n\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = (function(){\r\n    var watches = [];\r\n    \r\n    function handler(){\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n        if(!Debuggee_Worker.hasInstance()) return; \r\n        Debuggee_Worker.Instance().postMessage({\"type\":\"watch\", \"data\": watches});\r\n    }\r\n\r\n    function update(new_watches){\r\n        watches = new_watches;\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n    };\r\n    \r\n    function getWatches(){\r\n        return watches;\r\n    }\r\n\r\n    function init(){\r\n        for(var i=0; i<watches.length; ++i){\r\n            watches[i].value = undefined;\r\n        }\r\n    }\r\n\r\n    return {\r\n        handler : handler,\r\n        update : update,\r\n        getWatches : getWatches,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = (function(){\r\n    var variables = [];\r\n\r\n    function handler() {};     \r\n\r\n    function update(new_vars){\r\n        variables = new_vars;\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n    \r\n    function getVariables(){\r\n        return variables;\r\n    };\r\n\r\n    function init(){\r\n        // var variables1 = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n        // var variables2 = (window.workspace[\"blockly2\"].getAllVariables()).map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n\r\n\r\n        var workspace_vars = [];\r\n        workspace_vars[0] = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n        workspace_vars[1] = window.workspace[\"blockly2\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n\r\n        for(var i = 0; i<workspace_vars.length; i++){\r\n            var variables_names =  variables.map((variable) => {\r\n                return variable.name;\r\n            });   \r\n            for(var j = 0; j<workspace_vars[i].length; ++j){\r\n                if(variables_names.includes(workspace_vars[i][j])) continue;\r\n                var nvar = {\r\n                    \"name\" : workspace_vars[i][j],\r\n                    \"value\" : undefined\r\n                }\r\n                variables.push(nvar);\r\n            }\r\n        }\r\n\r\n\r\n        // var variables_names =  variables.map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n\r\n        // for(var i = 0; i<variables1.length; ++i){\r\n        //     if(variables_names.includes(variables1[i])) continue;\r\n        //     var nvar = {\r\n        //         \"name\" : variables1[i],\r\n        //         \"value\" : undefined\r\n        //     }\r\n        //     variables.push(nvar);\r\n        // }\r\n\r\n        // variables_names =  variables.map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n        \r\n        // for(var i = 0; i<variables2.length; ++i){\r\n        //     if(variables_names.includes(variables2[i])) continue;\r\n        //     var nvar = {\r\n        //         \"name\" : variables2[i],\r\n        //         \"value\" : undefined\r\n        //     }\r\n        //     variables.push(nvar);\r\n        // }\r\n        //dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n\r\n    return {\r\n        update : update,\r\n        getVariables : getVariables,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\nBlockly_Debugger.actions[\"Eval\"].handler = function (expr){\r\n    if(!Debuggee_Worker.hasInstance()) return;\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"eval\", \"data\": expr});\r\n}\r\n\r\n\r\nDebuggee_Worker.AddOnDispacher(\"watches\", Blockly_Debugger.actions[\"Watch\"].update);\r\nDebuggee_Worker.AddOnDispacher(\"variables\", Blockly_Debugger.actions[\"Variables\"].update);","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\nimport './watches.js';\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = (cursorBreakpoint) => {\r\n    if(Debuggee_Worker.hasInstance()) return;\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    \r\n    Blockly_Debugger.actions[\"Variables\"].init();\r\n    Blockly_Debugger.actions[\"Watch\"].init();\r\n\r\n    document.getElementById(\"val_table\").innerHTML = `  <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Variables  \r\n                                                            <!--i class=\"fa fa-bars\"></i-->\r\n                                                            </div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Value</th> \r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n\r\n                                                            </table>\r\n                                                            <table id=\"variables\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Watches</div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Code</th> \r\n                                                                <th>Value</th>\r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n                                                            </table>\r\n                                                            <table id=\"watches\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>`;\r\n\r\n    \r\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \"\";\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return { \"block_id\" : obj.block_id,\r\n                                                                                                                                                                      \"enable\" : obj.enable}}),\r\n                                                                               \"cursorBreakpoint\": cursorBreakpoint,\r\n                                                                               \"watches\": Blockly_Debugger.actions[\"Watch\"].getWatches(),\r\n                                                                               \"variables\": Blockly_Debugger.actions[\"Variables\"].getVariables()\r\n                                                                            }});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\nBlockly_Debugger.actions[\"RunToCursor\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n}\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].wait_view = (block_id) => {\r\n    var CurrentSystemEditorId = window.workspace[\"blockly1\"].getBlockById(block_id) ? \"blockly1\" : \"blockly2\";\r\n    var block = window.workspace[CurrentSystemEditorId].getBlockById(block_id);\r\n    while(block!=null){\r\n        block.setCollapsed(false);\r\n        block = block.parentBlock_;\r\n    }\r\n    window.workspace[CurrentSystemEditorId].traceOn_ = true;                // hilighting (gt den kanei an einai collapsed)\r\n    window.workspace[CurrentSystemEditorId].highlightBlock(block_id);\r\n    \r\n    document.getElementById(block_id).style.stroke = 'red';\r\n    document.getElementById(block_id).style.fill = 'yellow';\r\n    document.getElementById(block_id).style['stroke-width'] = '5px';\r\n}\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].reset_view = (block_id) =>{\r\n    document.getElementById(block_id).style.stroke = 'yellow';\r\n    document.getElementById(block_id).style.fill = 'red';\r\n    document.getElementById(block_id).style['stroke-width'] = '1px';\r\n}\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].disable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.stroke = 'yellow';\r\n        document.getElementById(block_id).style.fill = '#FA8258';\r\n        document.getElementById(block_id).style['stroke-width'] = '1px';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = false;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].enable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.fill = 'red';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = true;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].handler = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) {\r\n        Blockly_Debugger.actions[\"Start\"].handler(block_id);\r\n        return;\r\n    }; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"runToCursor\", \"data\": block_id});\r\n}\r\n\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_wait_view\", Blockly_Debugger.actions[\"Breakpoint\"].wait_view);\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_reset_view\", Blockly_Debugger.actions[\"Breakpoint\"].reset_view);\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    // old blockly\r\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \r\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\r\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\r\n//     // Get element at index.\r\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n//     var mode = block.getFieldValue('MODE') || 'GET';\r\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n//     list = '(' + list + ')';\r\n//     if (where == 'FIRST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.shift()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.shift();\\n';\r\n//       }\r\n//     } else if (where == 'LAST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.pop()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.pop();\\n';\r\n//       }\r\n//     } else if (where == 'FROM_START') {\r\n//       // Blockly uses one-based indicies.\r\n//       if (Blockly.isNumber(at)) {\r\n//         // If the index is a naked number, decrement it right now.\r\n//         at = parseFloat(at) - 1;\r\n//       } else {\r\n//         // If the index is dynamic, decrement it in code.\r\n//         at += ' - 1';\r\n//       }\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[' + at + ']';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.splice(' + at + ', 1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.splice(' + at + ', 1);\\n';\r\n//       }\r\n//     } else if (where == 'FROM_END') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-' + at + ')[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n//         var functionName = Blockly.JavaScript.provideFunction_(\r\n//             'lists_remove_from_end',\r\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//                 '(list, x) {',\r\n//               '  x = list.length - x;',\r\n//               '  return list.splice(x, 1)[0];',\r\n//               '}']);\r\n//         code = functionName + '(' + list + ', ' + at + ')';\r\n//         if (mode == 'GET_REMOVE') {\r\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//         } else if (mode == 'REMOVE') {\r\n//           return code + ';\\n';\r\n//         }\r\n//       }\r\n//     } else if (where == 'RANDOM') {\r\n//       var functionName = Blockly.JavaScript.provideFunction_(\r\n//           'lists_get_random_item',\r\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//               '(list, remove) {',\r\n//             '  var x = Math.floor(Math.random() * list.length);',\r\n//             '  if (remove) {',\r\n//             '    return list.splice(x, 1)[0];',\r\n//             '  } else {',\r\n//             '    return list[x];',\r\n//             '  }',\r\n//             '}']);\r\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return code + ';\\n';\r\n//       }\r\n//     }\r\n//     throw 'Unhandled combination (lists_getIndex).';\r\n//   };\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  var mode = block.getFieldValue('MODE') || 'GET';\r\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\r\n      Blockly.JavaScript.ORDER_MEMBER;\r\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  list = '(' + list + ')';\r\n  switch (where) {\r\n    case ('FIRST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case ('LAST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case ('FROM_START'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    case ('FROM_END'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    case ('RANDOM'):\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'listsGetRandomItem',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n           '  var x = Math.floor(Math.random() * list.length);',\r\n           '  if (remove) {',\r\n           '    return list.splice(x, 1)[0];',\r\n           '  } else {',\r\n           '    return list[x];',\r\n           '  }',\r\n           '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n  }\r\n  throw 'Unhandled combination (lists_getIndex).';\r\n};\r\n\r\n\r\n\r\n  \r\n\r\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n  //   // Set element at index.\r\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  //   var mode = block.getFieldValue('MODE') || 'GET';\r\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\r\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  //   // Closure, which accesses and modifies 'list'.\r\n \r\n  //   list = '(' + list + ')';\r\n  //   function cacheList() {\r\n  //     if (list.match(/^\\w+$/)) {\r\n  //       return '';\r\n  //     }\r\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\r\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n  //     list = listVar;\r\n  //     return code;\r\n  //   }\r\n  //   if (where == 'FIRST') {\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[0] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.unshift(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'LAST') {\r\n  //     if (mode == 'SET') {\r\n  //       var code = cacheList();\r\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.push(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_START') {\r\n  //     // Blockly uses one-based indicies.\r\n  //     if (Blockly.isNumber(at)) {\r\n  //       // If the index is a naked number, decrement it right now.\r\n  //       at = parseFloat(at) - 1;\r\n  //     } else {\r\n  //       // If the index is dynamic, decrement it in code.\r\n  //       at += ' - 1';\r\n  //     }\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[' + at + '] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_END') {\r\n  //     var code = cacheList();\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n  //           ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   } else if (where == 'RANDOM') {\r\n  //     var code = cacheList();\r\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\r\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n  //         '.length);\\n';\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   }\r\n  //   throw 'Unhandled combination (lists_setIndex).';\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n\r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmpList', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    switch (where) {\r\n      case ('FIRST'):\r\n        if (mode == 'SET') {\r\n          return list + '[0] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.unshift(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('LAST'):\r\n        if (mode == 'SET') {\r\n          var code = cacheList();\r\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.push(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_START'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        if (mode == 'SET') {\r\n          return list + '[' + at + '] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_END'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\r\n            Blockly.JavaScript.ORDER_SUBTRACTION);\r\n        var code = cacheList();\r\n        if (mode == 'SET') {\r\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n              ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n      case ('RANDOM'):\r\n        var code = cacheList();\r\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            'tmpX', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n            '.length);\\n';\r\n        if (mode == 'SET') {\r\n          code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n\r\n  // Blockly.JavaScript['lists_split'] = function(block) {\r\n  //   // Block for splitting text into a list, or joining a list into text.\r\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n  //       Blockly.JavaScript.ORDER_MEMBER);\r\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //   var mode = block.getFieldValue('MODE');\r\n  //   if (mode == 'SPLIT') {\r\n  //     if (!value_input) {\r\n  //       value_input = '\\'\\'';\r\n  //     }\r\n  //     var functionName = 'split';\r\n  //   } else if (mode == 'JOIN') {\r\n  //     if (!value_input) {\r\n  //       value_input = '[]';\r\n  //     }\r\n  //     var functionName = 'join';\r\n  //   } else {\r\n  //     throw 'Unknown mode: ' + mode;\r\n  //   }\r\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!input) {\r\n        input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!input) {\r\n        input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_reverse'] = function(block) {\r\n    // Block for reversing a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var code = '(' + list + ')' + '.slice().reverse()';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['lists_sort'] = function(block) {\r\n    // Block for sorting a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n    var type = block.getFieldValue('TYPE');\r\n    var getCompareFunctionName = Blockly.JavaScript.provideFunction_(\r\n        'listsGetSortCompare',\r\n        ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n            '(type, direction) {',\r\n         '  var compareFuncs = {',\r\n         '    \"NUMERIC\": function(a, b) {',\r\n         '        return parseFloat(a) - parseFloat(b); },',\r\n         '    \"TEXT\": function(a, b) {',\r\n         '        return a.toString() > b.toString() ? 1 : -1; },',\r\n         '    \"IGNORE_CASE\": function(a, b) {',\r\n         '        return a.toString().toLowerCase() > ' +\r\n            'b.toString().toLowerCase() ? 1 : -1; },',\r\n         '  };',\r\n         '  var compare = compareFuncs[type];',\r\n         '  return function(a, b) { return compare(a, b) * direction; }',\r\n         '}']);\r\n    return ['(' + list + ')' + '.slice().sort(' +\r\n        getCompareFunctionName + '(\"' + type + '\", ' + direction + '))',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n//     // Define a procedure with a return value.\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n//       branch = Blockly.JavaScript.prefixLines(\r\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\'), eval(update_values())'\r\n//         ), Blockly.JavaScript.INDENT) + branch ;\r\n//     }\r\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n//           '\\'' + block.id + '\\'') + branch;\r\n//     }\r\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n//         Blockly.JavaScript.ORDER_NONE) || '';\r\n//     if (returnValue) {\r\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n//     }else{\r\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n//     }\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n//           Blockly.Variables.NAME_TYPE);\r\n//     }\r\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n//         branch +    \r\n//         returnValue + '}'; \r\n//     code = Blockly.JavaScript.scrub_(block, code);\r\n//     Blockly.JavaScript.definitions_[funcName] = code;\r\n//     return null;\r\n//   };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Blockly.JavaScript.prefixLines(\r\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \"0\" + ', \\'' + id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n\r\n     if (returnValue) {\r\n         returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n     }else{\r\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n     }\r\n\r\n\r\n    var args = [];\r\n    for (var i = 0; i < block.arguments_.length; i++) {\r\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n                branch +    \r\n                returnValue + '}';\r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    // Add % so as not to collide with helper functions in definitions list.\r\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\r\n    return null;\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \r\n        'Expecting string from statement block \"%s\".', block.type);\r\n      if (this.STATEMENT_PREFIX) \r\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'), ' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! New blockly \r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\') ') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  id = id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};\r\n\r\n\r\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\r\n Blockly.Generator.prototype.myBlockToCode = function(block) {\r\n  if (!block || block.disabled) {\r\n    return '';\r\n  }\r\n  this.init(block.workspace);           //  added \r\n  var func = this[block.type];\r\n  var stmt_Prefix = this.STATEMENT_PREFIX;\r\n  this.STATEMENT_PREFIX = null;\r\n  goog.asserts.assertFunction(func,\r\n      'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n      this.name_, block.type);\r\n   var code = func.call(block, block);\r\n  if (goog.isArray(code)) {\r\n       goog.asserts.assert(block.outputConnection,\r\n        'Expecting string from statement block \"%s\".', block.type);\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\r\n  } else if (goog.isString(code)) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    //return code;\r\n    return this.myscrub_(block, code);\r\n  } else if (code === null) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return '';\r\n  } else {\r\n    goog.asserts.fail('Invalid code generated: %s', code);\r\n  }\r\n};\r\n\r\n\r\nBlockly.JavaScript.myscrub_=function(a,b){\r\n  var c=\"\";\r\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\r\n    var d=a.getCommentText();\r\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\"/**\\n\"+Blockly.JavaScript.prefixLines(d+\"\\n\",\" * \")+\" */\\n\"):c+Blockly.JavaScript.prefixLines(d+\"\\n\",\"// \"));\r\n    for(var e=0;e<a.inputList.length;e++)\r\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\"// \"))\r\n  }\r\n  return c+b;\r\n}\r\n\r\n\r\nBlockly.JavaScript.finish=function(a){\r\n  var b=[],c;\r\n  for(c in Blockly.JavaScript.definitions_){\r\n    if(c === \"variables\") continue;\r\n    b.push(Blockly.JavaScript.definitions_[c]);\r\n  }\r\n  delete Blockly.JavaScript.definitions_;\r\n  delete Blockly.JavaScript.functionNames_;\r\n  Blockly.JavaScript.variableDB_.reset();\r\n  return b.join(\"\\n\\n\")+\"\\n\\n\\n\"+a};\r\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\";\\n\"};\r\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\");\r\n  return\"'\"+a+\"'\"\r\n};\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\n\r\n\r\nexport var Breakpoint_Icon = function(block) {\r\n    Blockly.Icon.call(this, block);\r\n    this.createIcon();\r\n  };\r\n\r\n  Breakpoint_Icon.prototype = Object.create(Blockly.Icon.prototype);\r\n  Breakpoint_Icon.prototype.width_ = 160;\r\n  Breakpoint_Icon.prototype.height_ = 80;\r\n\r\n  Breakpoint_Icon.prototype.drawIcon_ = function(group) {\r\n    Blockly.utils.createSvgElement('circle',\r\n        {'class': 'breakpoint_enable', 'id' : this.block_.id, 'r': '6', 'cx': '8', 'cy': '8'},\r\n        group); \r\n        \r\n  }\r\n\r\n\r\n  // prepei na brw allo func name\r\n  Breakpoint_Icon.prototype.setVisible = function (visible){\r\n    var isEnable = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id==this.block_.id) return obj.enable;});\r\n    console.log(isEnable);\r\n    if(isEnable[0]){\r\n      Blockly_Debugger.actions[\"Breakpoint\"].disable(this.block_.id);\r\n    }else {\r\n      this.myDisable();\r\n      var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(this.block_.id);\r\n      if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n    }\r\n}\r\n  \r\nBreakpoint_Icon.prototype.myDisable = function (){\r\n  goog.dom.removeNode(this.iconGroup_);  \r\n  this.iconGroup_=null;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------     \r\nBlockly.utils.createSvgElement=function(a,b,c){\r\n  a=document.createElementNS(Blockly.SVG_NS,a);\r\n  for(var d in b)a.setAttribute(d,b[d]);\r\n  document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);\r\n  c&&c.appendChild(a);\r\n  return a;\r\n}\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\nimport {Breakpoint_Icon} from './breakpoint.js';\r\n\r\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\r\n\r\n\r\n      // Breakpoints\r\n      var breakpointOption = {\r\n        text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n        enabled: true,\r\n        callback: function() {\r\n            if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\r\n              var new_br = {\r\n                \"block_id\" : block.id,\r\n                \"enable\" : true,\r\n                \"icon\" : new Breakpoint_Icon(block)\r\n              }\r\n              Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(new_br);\r\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\r\n            }\r\n            else{\r\n              var icon = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\r\n              icon[0].myDisable();\r\n              var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          }\r\n      };\r\n      menuOptions.push(breakpointOption);\r\n\r\n      var DisableBreakpointOption = {\r\n        text: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \"Disable Breakpoint\" : \"Enable Breakpoint\",\r\n        enabled: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? true : false,\r\n        callback: function() {\r\n          if(Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\r\n            Blockly_Debugger.actions[\"Breakpoint\"].disable(block.id);\r\n          else\r\n            Blockly_Debugger.actions[\"Breakpoint\"].enable(block.id);\r\n        }\r\n      }\r\n      menuOptions.push(DisableBreakpointOption);\r\n\r\n      // Run to cursor\r\n      var runToCursorOption = {\r\n        text: \"Run to cursor\",\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n        }\r\n      };\r\n      menuOptions.push(runToCursorOption);\r\n\r\n\r\n      if(Debuggee_Worker.hasInstance()){\r\n        var watchOption = {\r\n          text:(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \"Add Watch\" : \"Remove Watch\",\r\n          enabled: (block.outputConnection==null) ? false : true,\r\n          callback: function(){\r\n            var name = block.toString();\r\n\r\n            if(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\r\n              var code = Blockly.JavaScript.myBlockToCode(block);\r\n              var new_watch = {\r\n                \"name\": name,\r\n                \"code\": code, \r\n                \"value\": undefined\r\n              }\r\n              Blockly_Debugger.actions[\"Watch\"].getWatches().push(new_watch);\r\n            }else{\r\n              var index = Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Watch\"].getWatches().splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Watch\"].handler();  \r\n          }\r\n        }\r\n        menuOptions.push(watchOption);\r\n\r\n\r\n        // Evaluate\r\n        var evalOption = {\r\n          text: \"Evaluate\",\r\n          enabled: (block.type === \"variables_set\" || block.type===\"math_change\") ? true : false,\r\n          callback: function(){\r\n            Blockly_Debugger.actions[\"Eval\"].handler(Blockly.JavaScript.myBlockToCode(block));  \r\n          }\r\n        };\r\n        menuOptions.push(evalOption);   \r\n      }\r\n    }\r\n\r\n\r\n    var block___ = {\r\n      text: \"block___\",\r\n      enabled:true,\r\n      callback: function(){\r\n       console.log(block);\r\n      }\r\n    };\r\n    menuOptions.push(block___); \r\n\r\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\r\n\r\n\r\n  \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n  };\r\n\r\n\r\n","import '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\naddEventListener(\"updateTable\",function (){\r\n    let variables = Blockly_Debugger.actions[\"Variables\"].getVariables();\r\n    document.getElementById(\"variables\").innerHTML = '';\r\n    for(var i = 0; i<variables.length; ++i){\r\n        document.getElementById(\"variables\").innerHTML += `<tr>\r\n                                                            <td>` + variables[i].name + `</td>\r\n                                                            <td>` +  variables[i].value + `</td>\r\n                                                            <td>` + typeof variables[i].value + `</td>\r\n                                                          </tr>`;\r\n    }\r\n});\r\n\r\n\r\naddEventListener(\"updateWatchesTable\",function (){\r\n    let watches = Blockly_Debugger.actions[\"Watch\"].getWatches();\r\n    document.getElementById(\"watches\").innerHTML = '';\r\n    for(var i = 0; i<watches.length; ++i){\r\n        document.getElementById(\"watches\").innerHTML += `<tr>\r\n                                                            <td>` + watches[i].name + `</td>\r\n                                                            <td>` + watches[i].code + `</td>\r\n                                                            <td>` + watches[i].value + `</td>\r\n                                                            <td>` + typeof watches[i].value + `</td>\r\n                                                        </tr>`;\r\n    }\r\n});","import './events.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\nwindow.workspace = {};\r\n\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly1\"]);\r\n\r\n\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly2\"]);\r\n\r\n\t//Blockly_Debugger.actions[\"Variables\"].init();","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));\r\n\r\n\r\n// if (document.addEventListener) { // IE >= 9; other browsers\r\n//     document.getElementById(\"val_table\").addEventListener('contextmenu', function(e) {\r\n//         alert(\"You've tried to open context menu\"); //here you draw your own menu\r\n//         e.preventDefault();\r\n//     }, false);\r\n// } else { // IE < 9\r\n//     document.getElementById(\"val_table\").attachEvent('oncontextmenu', function() {\r\n//         alert(\"You've tried to open context menu\");\r\n//         window.event.returnValue = false;\r\n//     });\r\n// }\r\n\r\n// let menuVisible = false;\r\n\r\n// const toggleMenu = command => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.display = command === \"show\" ? \"block\" : \"none\";\r\n//     menuVisible = !menuVisible;\r\n//   };\r\n  \r\n//   const setPosition = (top, left) => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.left = left + 'px';//`${left}px`;\r\n//     menu.style.top = top + 'px';//`${top}px`;\r\n//     toggleMenu('show');\r\n//   };\r\n  \r\n//   window.addEventListener(\"click\", e => {\r\n//     if(menuVisible)toggleMenu(\"hide\");\r\n//   });\r\n  \r\n//   document.getElementById(\"val_table\").addEventListener(\"contextmenu\", e => {\r\n//     e.preventDefault();\r\n//     const origin = {\r\n//       left: e.pageX,\r\n//       top: e.pageY\r\n//     };\r\n//     setPosition( e.pageY, e.pageX);\r\n//     return false;\r\n//   });","\r\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\r\n    var text = [];\r\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\r\n    if (this.collapsed_) {\r\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\r\n    } else {\r\n      for (var i = 0, input; input = this.inputList[i]; i++) {\r\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\r\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\r\n            text.push(emptyFieldPlaceholder);\r\n          } else {\r\n            text.push(field.getText());\r\n          }\r\n        }\r\n        if (input.connection) {\r\n          var child = input.connection.targetBlock();\r\n          if (child) {\r\n              var child_text = child.toString(undefined, opt_emptyToken);\r\n              child_text = \"(\" + child_text + \")\";\r\n            text.push(child_text);\r\n          } else {\r\n            text.push(emptyFieldPlaceholder);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    text = goog.string.trim(text.join(' ')) || '???';\r\n    if (opt_maxLength) {\r\n      // TODO: Improve truncation so that text from this block is given priority.\r\n      // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\r\n      // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\r\n      text = goog.string.truncate(text, opt_maxLength);\r\n    }\r\n    return text;\r\n  };","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\r\n        Blockly.JavaScript.ORDER_MEMBER;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        textOrder) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        // Adjust index if using one-based indices.\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n        var code = text + '.slice(' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'textRandomLetter',\r\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n             '  var x = Math.floor(Math.random() * text.length);',\r\n             '  return text[x];',\r\n             '}']);\r\n        var code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else if (text.match(/^'?\\w+'?$/) ||\r\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\r\n        where2 != 'FROM_END' && where2 != 'LAST')) {\r\n      // If the text is a variable or literal or doesn't require a call for\r\n      // length, don't generate a helper function.\r\n      text = '(' + text + ')';\r\n      switch (where1) {\r\n        case 'FROM_START':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n          break;\r\n        case 'FROM_END':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at1 = text + '.length - ' + at1;\r\n          break;\r\n        case 'FIRST':\r\n          var at1 = '0';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      switch (where2) {\r\n        case 'FROM_START':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\r\n          break;\r\n        case 'FROM_END':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at2 = text + '.length - ' + at2;\r\n          break;\r\n        case 'LAST':\r\n          var at2 = text + '.length';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n    } else {\r\n      text = '(' + text + ')';\r\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\r\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\r\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\r\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n          '(sequence' +\r\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n          // we add it as a parameter.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\r\n          ') {',\r\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\r\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\r\n            '  return sequence.slice(start, end);',\r\n            '}']);\r\n      var code = functionName + '(' + text +\r\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n          // pass it.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\r\n          ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n\r\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\r\n  //   // Change capitalization.\r\n  //   var OPERATORS = {\r\n  //     'UPPERCASE': '.toUpperCase()',\r\n  //     'LOWERCASE': '.toLowerCase()',\r\n  //     'TITLECASE': null\r\n  //   };\r\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\r\n  //   var code;\r\n  //   if (operator) {\r\n  //     // Upper and lower case are functions built into JavaScript.\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n  //     code = '(' + argument0 + ')' + operator;\r\n  //   } else {\r\n  //     // Title case is not a native JavaScript function.  Define one.\r\n  //     var functionName = Blockly.JavaScript.provideFunction_(\r\n  //         'text_toTitleCase',\r\n  //         [ 'function ' +\r\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n  //           '  return str.replace(/\\\\S+/g,',\r\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n  //               'txt.substring(1).toLowerCase();});',\r\n  //           '}']);\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n  //   }\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\r\n        Blockly.JavaScript.ORDER_NONE;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        textOrder) || '\\'\\'';\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var code = '(' + text + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'textToTitleCase',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(str) {',\r\n           '  return str.replace(/\\\\S+/g,',\r\n           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n              'txt.substring(1).toLowerCase();});',\r\n           '}']);\r\n      var code = functionName + '(' + '(' + text + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\r\n\r\n\r\n  Blockly.JavaScript['text_print'] = function(block) {\r\n    // Print statement.\r\n    var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    return 'await window.alert(' + msg + ');\\n';\r\n  };"],"sourceRoot":""}