{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./init_blockly.js","webpack:///../debugger/init.js","webpack:///../debugger/actions/run.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/start.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///./index.js","webpack:///../generator/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","workspace","Blockly","inject","media","toolbox","document","getElementById","systemEditorId","Xml","domToWorkspace","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","alert","msg","prompt","postMessage","type","data","highlightBlock","CurrentSystemEditorId","traceOn_","id","execution_finished","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blocly_Debugger","Run","JavaScript","STATEMENT_PREFIX","code","workspaceToCode","StepIn","StepOver","StepParent","StepOut","Start","code1","code2","console","log","generation","nest","currentSystemEditorId","block","valueToCode","ORDER_FUNCTION_CALL","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","argument0","ORDER_NONE","mode","where","at","ORDER_UNARY_NEGATION","list","isNumber","parseFloat","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","xVar","value_input","value_delim","functionName","funcName","getName","Procedures","branch","statementToCode","prefixLines","replace","INDENT","INFINITE_LOOP_TRAP","returnValue","args","x","arguments_","length","join","scrub_","definitions_","ORDER_COMMA","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","isString","fail","addLoopTrap","warn","getMainWorkspace","init","blocks","getTopBlocks","line","push","outputConnection","scrubNakedValue","finish","onclick","text","where1","where2","at1","at2","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField","quote_"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","window.workspace = {};\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\r\n\r\nBlockly.Xml.domToWorkspace(window.workspace[\"blockly1\"],\r\n\tdocument.getElementById('startBlocks'));\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(window.workspace[\"blockly2\"],\r\n \tdocument.getElementById('startBlocks'));","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher;\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\"); // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher = {                              \r\n\t\t\t\"alert\" : (msg) => {\r\n\t\t\t\twindow.alert(msg);\r\n\t\t\t},\r\n\t\t\t\"prompt\" : (msg) => {\r\n\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t},\r\n\t\t\t\"highlightBlock\" : (data) => {\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t}, \r\n\t\t\t\"execution_finished\" : () => {\r\n\t\t\t\tinstance = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blocly_Debugger = {};","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"Run\"] = () => {\r\n\r\n    if(Debuggee_Worker.hasInstance()) return; \r\n\r\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\r\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"run\", \"data\": code});\r\n}","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\nBlocly_Debugger[\"StepIn\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOver\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepParent\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlocly_Debugger[\"StepOut\"] = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blocly_Debugger} from \"../init.js\";\r\n\r\nBlocly_Debugger[\"Stop\"] = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\r\n\r\n// function addCode(js){                                // gia na kanw debug to eval \r\n//     var e = document.createElement('script');\r\n//     e.type = 'text/javascript';\r\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\r\n//     document.head.appendChild(e);\r\n// }\r\n\r\nBlocly_Debugger[\"Start\"] = () => {\r\n    if(Debuggee_Worker.hasInstance()) return;  \r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    // var code = \"async function code(){\\n\" + code1 + code2 +\" };\\ncode();\";\r\n    // addCode(code);\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": code});\r\n    console.log(code1 + code2);\r\n}\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n    // Get element at index.\r\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n    list = '(' + list + ')';\r\n    if (where == 'FIRST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'lists_remove_from_end',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(list, x) {',\r\n              '  x = list.length - x;',\r\n              '  return list.splice(x, 1)[0];',\r\n              '}']);\r\n        code = functionName + '(' + list + ', ' + at + ')';\r\n        if (mode == 'GET_REMOVE') {\r\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n        } else if (mode == 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'lists_get_random_item',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n            '  var x = Math.floor(Math.random() * list.length);',\r\n            '  if (remove) {',\r\n            '    return list.splice(x, 1)[0];',\r\n            '  } else {',\r\n            '    return list[x];',\r\n            '  }',\r\n            '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_getIndex).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n \r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_list', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    if (where == 'FIRST') {\r\n      if (mode == 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'LAST') {\r\n      if (mode == 'SET') {\r\n        var code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_START') {\r\n      // Blockly uses one-based indicies.\r\n      if (Blockly.isNumber(at)) {\r\n        // If the index is a naked number, decrement it right now.\r\n        at = parseFloat(at) - 1;\r\n      } else {\r\n        // If the index is dynamic, decrement it in code.\r\n        at += ' - 1';\r\n      }\r\n      if (mode == 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode == 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n    } else if (where == 'FROM_END') {\r\n      var code = cacheList();\r\n      if (mode == 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n            ');\\n';\r\n        return code;\r\n      }\r\n    } else if (where == 'RANDOM') {\r\n      var code = cacheList();\r\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmp_x', Blockly.Variables.NAME_TYPE);\r\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n          '.length);\\n';\r\n      if (mode == 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode == 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!value_input) {\r\n        value_input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!value_input) {\r\n        value_input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      branch = Blockly.JavaScript.prefixLines(\r\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n      returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(flags.currNest != -1) flags.parent = false;\\n  flags.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n    }else{\r\n        returnValue = '  if(flags.currNest != -1) flags.parent = false;\\n  flags.currNest = global_nest;\\n' + '  return;\\n';\r\n    }\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n        '  let global_nest = flags.currNest;\\n' + \r\n        '  if(isStepOver() || isStepParent()) flags.currNest = -1;\\n' +\r\n        branch +    \r\n        returnValue + '}'; \r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    Blockly.JavaScript.definitions_[funcName] = code;\r\n    return null;\r\n  };\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  flags.currNest = global_nest;\\n  flags.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'),' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\')') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blocly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"RunButton\").onclick = Blocly_Debugger[\"Run\"];\r\ndocument.getElementById(\"StepInButton\").onclick = Blocly_Debugger[\"StepIn\"];\r\ndocument.getElementById(\"StepOverButton\").onclick = Blocly_Debugger[\"StepOver\"];\r\ndocument.getElementById(\"StepParentButton\").onclick = Blocly_Debugger[\"StepParent\"];\r\ndocument.getElementById(\"StepOutButton\").onclick = Blocly_Debugger[\"StepOut\"];\r\ndocument.getElementById(\"StopButton\").onclick = Blocly_Debugger[\"Stop\"];\r\ndocument.getElementById(\"StartButton\").onclick = Blocly_Debugger[\"Start\"];\r\n\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\r\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        // Blockly uses one-based indicies.\r\n        if (Blockly.isNumber(at)) {\r\n          // If the index is a naked number, decrement it right now.\r\n          at = parseFloat(at) - 1;\r\n        } else {\r\n          // If the index is dynamic, decrement it in code.\r\n          at += ' - 1';\r\n        }\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var code = text + '.slice(-' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'text_random_letter',\r\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n              '  var x = Math.floor(Math.random() * text.length);',\r\n              '  return text[x];',\r\n              '}']);\r\n        code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\r\n        Blockly.JavaScript.ORDER_NONE) || '1';\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else {\r\n        text = '(' + text + ')';\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_get_substring',\r\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(text, where1, at1, where2, at2) {',\r\n            '  function getAt(where, at) {',\r\n            '    if (where == \\'FROM_START\\') {',\r\n            '      at--;',\r\n            '    } else if (where == \\'FROM_END\\') {',\r\n            '      at = text.length - at;',\r\n            '    } else if (where == \\'FIRST\\') {',\r\n            '      at = 0;',\r\n            '    } else if (where == \\'LAST\\') {',\r\n            '      at = text.length - 1;',\r\n            '    } else {',\r\n            '      throw \\'Unhandled option (text_getSubstring).\\';',\r\n            '    }',\r\n            '    return at;',\r\n            '  }',\r\n            '  at1 = getAt(where1, at1);',\r\n            '  at2 = getAt(where2, at2) + 1;',\r\n            '  return text.slice(at1, at2);',\r\n            '}']);\r\n      var code = functionName + '(' + text + ', \\'' +\r\n          where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var code;\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n      code = '(' + argument0 + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'text_toTitleCase',\r\n          [ 'function ' +\r\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n            '  return str.replace(/\\\\S+/g,',\r\n            '      function(txt) {return txt[0].toUpperCase() + ' +\r\n                'txt.substring(1).toLowerCase();});',\r\n            '}']);\r\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    alert(\"text_trim\");\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];"],"sourceRoot":""}