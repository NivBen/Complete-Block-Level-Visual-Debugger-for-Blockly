{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/watches.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./index.js","webpack:///../generator/blockly/generator/text.js","webpack:///./init_blockly.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","msg","window","alert","postMessage","type","data","prompt","workspace","CurrentSystemEditorId","traceOn_","highlightBlock","id","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","watches","variables","update","new_vars","dispatchEvent","Event","getVariables","cursorBreakpoint","Blockly","JavaScript","STATEMENT_PREFIX","code1","workspaceToCode","code2","code","variables1","getAllVariables","map","variable","variables2","length","nvar","push","variables_names","includes","MouseEvent","breakpoints","console","log","block_id","generation","nest","currentSystemEditorId","block","valueToCode","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","item","ORDER_NONE","options","oneBasedIndex","ORDER_ADDITION","ORDER_FUNCTION_CALL","mode","where","listOrder","ORDER_COMMA","list","at","getAdjusted","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","ORDER_SUBTRACTION","xVar","input","delimiter","functionName","funcName","getName","Procedures","branch","statementToCode","replace","prefixLines","INDENT","INFINITE_LOOP_TRAP","returnValue","args","arguments_","join","scrub_","definitions_","x","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","assert","outputConnection","isString","fail","addLoopTrap","warn","getMainWorkspace","init","blocks","getTopBlocks","systemEditorId","line","scrubNakedValue","finish","BlockSvg","showContextMenu_","e","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","ContextMenu","blockDuplicateOption","isEditable","collapsed_","comments","blockCommentOption","inputList","NEXT_STATEMENT","inlineOption","enabled","isInline","getInputsInline","text","Msg","setInputsInline","collapse","expandOption","setCollapsed","collapseOption","disable","disableOption","getInheritedDisabled","setDisabled","blockDeleteOption","breakpointOption","index","indexOf","splice","runToCursorOption","watchOption","getVars","blockHelpOption","customContextMenu","show","RTL","currentBlock","document","getElementById","onclick","addEventListener","innerHTML","argument0","textOrder","where1","where2","at1","at2","getIndex_","wherePascalCase","FIRST","LAST","FROM_START","FROM_END","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField","quote_","inject","media","toolbox","Xml","domToWorkspace"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher = {};\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\"); // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher[\"alert\"] = (msg) => {\r\n\t\t\t\t\twindow.alert(msg);\r\n\t\t\t\t};\r\n\t\tdispatcher[\"prompt\"] = (msg) => {\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t\t};\r\n\t\tdispatcher[\"highlightBlock\"] = (data) => {\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t\t\t\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\t\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\r\n\t\t\t\t\t\t\t// block.setCollapsed(false);\r\n\t\t\t\t}; \t\t\t\t\t\t\r\n\t\tdispatcher[\"execution_finished\"] = () => {\r\n\t\t\t\t\tinstance = undefined;\r\n\t\t\t\t};\t\t\r\n\t};\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = {};\r\nBlockly_Debugger.actions[\"Variables\"] = {};\r\n\r\n\r\nBlockly_Debugger.actions[\"Watch\"].watches = [];\r\nBlockly_Debugger.actions[\"Watch\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"watch\", \"data\": Blockly_Debugger.actions[\"Watch\"].watches});\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = (function(){\r\n    var variables = [];\r\n\r\n    function handler() {};     \r\n\r\n    function update(new_vars){\r\n        variables = new_vars;\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n    \r\n    function getVariables(){\r\n        return variables;\r\n    }\r\n\r\n    return {\r\n        update : update,\r\n        getVariables : getVariables,\r\n        \r\n    }\r\n})();\r\n\r\n Debuggee_Worker.AddOnDispacher(\"variables\", Blockly_Debugger.actions[\"Variables\"].update);","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\nimport './watches.js';\r\n\r\n// function addCode(js){                                // gia na kanw debug to eval \r\n//     var e = document.createElement('script');\r\n//     e.type = 'text/javascript';\r\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\r\n//     document.head.appendChild(e);\r\n// }\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = (cursorBreakpoint) => {\r\n    if(Debuggee_Worker.hasInstance()) return;\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    \r\n\r\n    var variables1 = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n        return variable.name;\r\n    });\r\n    var variables2 = (window.workspace[\"blockly2\"].getAllVariables()).map((variable) => {\r\n        return variable.name;\r\n    });\r\n    \r\n    var variables= [];\r\n    for(var i = 0; i<variables1.length; ++i){\r\n        var nvar = {\r\n            \"name\" : variables1[i],\r\n            \"value\" : undefined\r\n        }\r\n        variables.push(nvar);\r\n    }\r\n\r\n    var variables_names =  variables.map((variable) => {\r\n        return variable.name;\r\n    });\r\n    for(var i = 0; i<variables2.length; ++i){\r\n        if(variables_names.includes(variables2[i])) continue;\r\n        var nvar = {\r\n            \"name\" : variables2[i],\r\n            \"value\" : undefined\r\n        }\r\n        variables.push(nvar);\r\n    }\r\n    Blockly_Debugger.actions[\"Variables\"].update(variables);\r\n\r\n    // var code = \"async function code(){\\n\" + code1 + code2 +\" };\\ncode();\";\r\n    // addCode(code);\r\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \"\";\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints,\r\n                                                                               \"cursorBreakpoint\": cursorBreakpoint,\r\n                                                                               \"watches\": Blockly_Debugger.actions[\"Watch\"].watches,            // prepei na kanw allages gt kanoyn allo pragma\r\n                                                                               \"variables\": variables\r\n                                                                            }});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\nBlockly_Debugger.actions[\"RunToCursor\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints});\r\n}\r\n\r\n\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].handler = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) {\r\n        Blockly_Debugger.actions[\"Start\"].handler(block_id);\r\n        return;\r\n    }; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"runToCursor\", \"data\": block_id});\r\n}","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    // old blockly\r\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \r\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\r\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\r\n//     // Get element at index.\r\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n//     var mode = block.getFieldValue('MODE') || 'GET';\r\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n//     list = '(' + list + ')';\r\n//     if (where == 'FIRST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.shift()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.shift();\\n';\r\n//       }\r\n//     } else if (where == 'LAST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.pop()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.pop();\\n';\r\n//       }\r\n//     } else if (where == 'FROM_START') {\r\n//       // Blockly uses one-based indicies.\r\n//       if (Blockly.isNumber(at)) {\r\n//         // If the index is a naked number, decrement it right now.\r\n//         at = parseFloat(at) - 1;\r\n//       } else {\r\n//         // If the index is dynamic, decrement it in code.\r\n//         at += ' - 1';\r\n//       }\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[' + at + ']';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.splice(' + at + ', 1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.splice(' + at + ', 1);\\n';\r\n//       }\r\n//     } else if (where == 'FROM_END') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-' + at + ')[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n//         var functionName = Blockly.JavaScript.provideFunction_(\r\n//             'lists_remove_from_end',\r\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//                 '(list, x) {',\r\n//               '  x = list.length - x;',\r\n//               '  return list.splice(x, 1)[0];',\r\n//               '}']);\r\n//         code = functionName + '(' + list + ', ' + at + ')';\r\n//         if (mode == 'GET_REMOVE') {\r\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//         } else if (mode == 'REMOVE') {\r\n//           return code + ';\\n';\r\n//         }\r\n//       }\r\n//     } else if (where == 'RANDOM') {\r\n//       var functionName = Blockly.JavaScript.provideFunction_(\r\n//           'lists_get_random_item',\r\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//               '(list, remove) {',\r\n//             '  var x = Math.floor(Math.random() * list.length);',\r\n//             '  if (remove) {',\r\n//             '    return list.splice(x, 1)[0];',\r\n//             '  } else {',\r\n//             '    return list[x];',\r\n//             '  }',\r\n//             '}']);\r\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return code + ';\\n';\r\n//       }\r\n//     }\r\n//     throw 'Unhandled combination (lists_getIndex).';\r\n//   };\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  var mode = block.getFieldValue('MODE') || 'GET';\r\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\r\n      Blockly.JavaScript.ORDER_MEMBER;\r\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  list = '(' + list + ')';\r\n  switch (where) {\r\n    case ('FIRST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case ('LAST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case ('FROM_START'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    case ('FROM_END'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    case ('RANDOM'):\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'listsGetRandomItem',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n           '  var x = Math.floor(Math.random() * list.length);',\r\n           '  if (remove) {',\r\n           '    return list.splice(x, 1)[0];',\r\n           '  } else {',\r\n           '    return list[x];',\r\n           '  }',\r\n           '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n  }\r\n  throw 'Unhandled combination (lists_getIndex).';\r\n};\r\n\r\n\r\n\r\n  \r\n\r\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n  //   // Set element at index.\r\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  //   var mode = block.getFieldValue('MODE') || 'GET';\r\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\r\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  //   // Closure, which accesses and modifies 'list'.\r\n \r\n  //   list = '(' + list + ')';\r\n  //   function cacheList() {\r\n  //     if (list.match(/^\\w+$/)) {\r\n  //       return '';\r\n  //     }\r\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\r\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n  //     list = listVar;\r\n  //     return code;\r\n  //   }\r\n  //   if (where == 'FIRST') {\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[0] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.unshift(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'LAST') {\r\n  //     if (mode == 'SET') {\r\n  //       var code = cacheList();\r\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.push(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_START') {\r\n  //     // Blockly uses one-based indicies.\r\n  //     if (Blockly.isNumber(at)) {\r\n  //       // If the index is a naked number, decrement it right now.\r\n  //       at = parseFloat(at) - 1;\r\n  //     } else {\r\n  //       // If the index is dynamic, decrement it in code.\r\n  //       at += ' - 1';\r\n  //     }\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[' + at + '] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_END') {\r\n  //     var code = cacheList();\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n  //           ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   } else if (where == 'RANDOM') {\r\n  //     var code = cacheList();\r\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\r\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n  //         '.length);\\n';\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   }\r\n  //   throw 'Unhandled combination (lists_setIndex).';\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n\r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmpList', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    switch (where) {\r\n      case ('FIRST'):\r\n        if (mode == 'SET') {\r\n          return list + '[0] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.unshift(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('LAST'):\r\n        if (mode == 'SET') {\r\n          var code = cacheList();\r\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.push(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_START'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        if (mode == 'SET') {\r\n          return list + '[' + at + '] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_END'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\r\n            Blockly.JavaScript.ORDER_SUBTRACTION);\r\n        var code = cacheList();\r\n        if (mode == 'SET') {\r\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n              ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n      case ('RANDOM'):\r\n        var code = cacheList();\r\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            'tmpX', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n            '.length);\\n';\r\n        if (mode == 'SET') {\r\n          code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n\r\n  // Blockly.JavaScript['lists_split'] = function(block) {\r\n  //   // Block for splitting text into a list, or joining a list into text.\r\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n  //       Blockly.JavaScript.ORDER_MEMBER);\r\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //   var mode = block.getFieldValue('MODE');\r\n  //   if (mode == 'SPLIT') {\r\n  //     if (!value_input) {\r\n  //       value_input = '\\'\\'';\r\n  //     }\r\n  //     var functionName = 'split';\r\n  //   } else if (mode == 'JOIN') {\r\n  //     if (!value_input) {\r\n  //       value_input = '[]';\r\n  //     }\r\n  //     var functionName = 'join';\r\n  //   } else {\r\n  //     throw 'Unknown mode: ' + mode;\r\n  //   }\r\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!input) {\r\n        input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!input) {\r\n        input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_reverse'] = function(block) {\r\n    // Block for reversing a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var code = '(' + list + ')' + '.slice().reverse()';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n//     // Define a procedure with a return value.\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n//       branch = Blockly.JavaScript.prefixLines(\r\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\'), eval(update_values())'\r\n//         ), Blockly.JavaScript.INDENT) + branch ;\r\n//     }\r\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n//           '\\'' + block.id + '\\'') + branch;\r\n//     }\r\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n//         Blockly.JavaScript.ORDER_NONE) || '';\r\n//     if (returnValue) {\r\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n//     }else{\r\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n//     }\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n//           Blockly.Variables.NAME_TYPE);\r\n//     }\r\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n//         branch +    \r\n//         returnValue + '}'; \r\n//     code = Blockly.JavaScript.scrub_(block, code);\r\n//     Blockly.JavaScript.definitions_[funcName] = code;\r\n//     return null;\r\n//   };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Blockly.JavaScript.prefixLines(\r\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \"0\" + ', \\'' + id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n\r\n     if (returnValue) {\r\n         returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n     }else{\r\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n     }\r\n\r\n\r\n    var args = [];\r\n    for (var i = 0; i < block.arguments_.length; i++) {\r\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n                branch +    \r\n                returnValue + '}';\r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    // Add % so as not to collide with helper functions in definitions list.\r\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\r\n    return null;\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      goog.asserts.assert(block.outputConnection,               //!! Now blockly \r\n        'Expecting string from statement block \"%s\".', block.type);\r\n      code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'), ' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\') ') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  id = id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};","import {Blockly_Debugger} from '../../../debugger/debugger.js';\r\n\r\n  Blockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\r\n    }\r\n  \r\n\r\n        // Breakpoints\r\n    var breakpointOption = {\r\n      text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n      enabled: true,\r\n      callback: function() {\r\n          if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) {\r\n            Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(block.id);\r\n            block.setCollapsed(false);                                  // expand the block if it is collapted \r\n          } else {\r\n            var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.indexOf(block.id);\r\n            if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n          }\r\n          Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          //alert(\"Selected: \" + block.id + \"\\n breakpoints: \" + Blockly_Debugger.actions[\"Breakpoint\"].breakpoints);\r\n        }\r\n    };\r\n    menuOptions.push(breakpointOption);\r\n\r\n    // Run to cursor\r\n    var runToCursorOption = {\r\n      text: \"Run to cursor\",\r\n      enabled: true,\r\n      callback: function() {\r\n        Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n       // window.alert(\"Run to cursor   \" + block.id);\r\n      }\r\n    };\r\n    menuOptions.push(runToCursorOption);\r\n\r\n\r\n    // Add/Remove watch\r\n    var watchOption = {\r\n      text: (block.type===\"variables_set\" || block.type===\"variables_get\") ?((!Blockly_Debugger.actions[\"Watch\"].watches.includes(block.getVars()[0])) ? \"Add Watch\" : \"Remove Watch\") : \"Add Watch\",\r\n      enabled: (block.type===\"variables_set\" || block.type===\"variables_get\") ? true : false,\r\n      //enabled: true,\r\n      callback: function(){\r\n        //alert(block.nextConnection);\r\n        // console.log(block.nextConnection);  \r\n        // console.log(block.nextConnection.sourceBlock_.getVars());  \r\n        if(!Blockly_Debugger.actions[\"Watch\"].watches.includes(block.getVars()[0])){\r\n          Blockly_Debugger.actions[\"Watch\"].watches.push(block.getVars()[0]);\r\n        }else{\r\n          var index = Blockly_Debugger.actions[\"Watch\"].watches.indexOf(block.getVars()[0]);\r\n          if (index !== -1) Blockly_Debugger.actions[\"Watch\"].watches.splice(index, 1);\r\n        }\r\n        Blockly_Debugger.actions[\"Watch\"].handler();        \r\n        alert(Blockly_Debugger.actions[\"Watch\"].watches);\r\n\r\n      }\r\n    }\r\n\r\n    menuOptions.push(watchOption);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Blockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n//     if (this.workspace.options.readOnly || !this.contextMenu) {\r\n//       return;\r\n//     }\r\n//     // Save the current block in a variable for use in closures.\r\n//     var block = this;\r\n//     var menuOptions = [];\r\n  \r\n//     if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n//       // Option to duplicate this block.\r\n//       var duplicateOption = {\r\n//         text: Blockly.Msg.DUPLICATE_BLOCK,\r\n//         enabled: true,\r\n//         callback: function() {\r\n//           Blockly.duplicate_(block);\r\n//         }\r\n//       };\r\n//       if (this.getDescendants().length > this.workspace.remainingCapacity()) {\r\n//         duplicateOption.enabled = false;\r\n//       }\r\n//       menuOptions.push(duplicateOption);\r\n  \r\n//       if (this.isEditable() && !this.collapsed_ &&\r\n//           this.workspace.options.comments) {\r\n//         // Option to add/remove a comment.\r\n//         var commentOption = {enabled: !goog.userAgent.IE};\r\n//         if (this.comment) {\r\n//           commentOption.text = Blockly.Msg.REMOVE_COMMENT;\r\n//           commentOption.callback = function() {\r\n//             block.setCommentText(null);\r\n//           };\r\n//         } else {\r\n//           commentOption.text = Blockly.Msg.ADD_COMMENT;\r\n//           commentOption.callback = function() {\r\n//             block.setCommentText('');\r\n//           };\r\n//         }\r\n//         menuOptions.push(commentOption);\r\n//       }\r\n  \r\n//       // Option to make block inline.\r\n//       if (!this.collapsed_) {\r\n//         for (var i = 1; i < this.inputList.length; i++) {\r\n//           if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n//               this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n//             // Only display this option if there are two value or dummy inputs\r\n//             // next to each other.\r\n//             var inlineOption = {enabled: true};\r\n//             var isInline = this.getInputsInline();\r\n//             inlineOption.text = isInline ?\r\n//                 Blockly.Msg.EXTERNAL_INPUTS : Blockly.Msg.INLINE_INPUTS;\r\n//             inlineOption.callback = function() {\r\n//               block.setInputsInline(!isInline);\r\n//             };\r\n//             menuOptions.push(inlineOption);\r\n//             break;\r\n//           }\r\n//         }\r\n//       }\r\n  \r\n//       if (this.workspace.options.collapse) {\r\n//         // Option to collapse/expand block.\r\n//         if (this.collapsed_) {\r\n//           var expandOption = {enabled: true};\r\n//           expandOption.text = Blockly.Msg.EXPAND_BLOCK;\r\n//           expandOption.callback = function() {\r\n//             block.setCollapsed(false);\r\n//           };\r\n//           menuOptions.push(expandOption);\r\n//         } else {\r\n//           var collapseOption = {enabled: true};\r\n//           collapseOption.text = Blockly.Msg.COLLAPSE_BLOCK;\r\n//           collapseOption.callback = function() {\r\n//             block.setCollapsed(true);\r\n//           };\r\n//           menuOptions.push(collapseOption);\r\n//         }\r\n//       }\r\n  \r\n//       if (this.workspace.options.disable) {\r\n//         // Option to disable/enable block.\r\n//         var disableOption = {\r\n//           text: this.disabled ?\r\n//               Blockly.Msg.ENABLE_BLOCK : Blockly.Msg.DISABLE_BLOCK,\r\n//           enabled: !this.getInheritedDisabled(),\r\n//           callback: function() {\r\n//             block.setDisabled(!block.disabled);\r\n//           }\r\n//         };\r\n//         menuOptions.push(disableOption);\r\n//       }\r\n  \r\n//       // Option to delete this block.\r\n//       // Count the number of blocks that are nested in this block.\r\n//       var descendantCount = this.getDescendants().length;\r\n//       var nextBlock = this.getNextBlock();\r\n//       if (nextBlock) {\r\n//         // Blocks in the current stack would survive this block's deletion.\r\n//         descendantCount -= nextBlock.getDescendants().length;\r\n//       }\r\n//       var deleteOption = {\r\n//         text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :\r\n//             Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),\r\n//         enabled: true,\r\n//         callback: function() {\r\n//           block.dispose(true, true);\r\n//         }\r\n//       };\r\n//       menuOptions.push(deleteOption);\r\n//     }\r\n  \r\n\r\n//     // Breakpoints\r\n//     var breakpointOption = {\r\n//       text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n//       enabled: true,\r\n//       callback: function() {\r\n//           if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) {\r\n//             Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(block.id);\r\n//             block.setCollapsed(false);                                  // expand the block if it is collapted \r\n//           } else {\r\n//             var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.indexOf(block.id);\r\n//             if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n//           }\r\n//           Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n//           alert(\"Selected: \" + block.id + \"\\n breakpoints: \" + Blockly_Debugger.actions[\"Breakpoint\"].breakpoints);\r\n//         }\r\n//     };\r\n//     menuOptions.push(breakpointOption);\r\n\r\n//     // Run to cursor\r\n//     var runToCursorOption = {\r\n//       text: \"Run to cursor\",\r\n//       enabled: true,\r\n//       callback: function() {\r\n//         Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n//        // window.alert(\"Run to cursor   \" + block.id);\r\n//       }\r\n//     };\r\n//     menuOptions.push(runToCursorOption);\r\n\r\n\r\n//     // Add/Remove watch\r\n//     var watchOption = {\r\n//       text: (block.type===\"variables_set\" || block.type===\"variables_get\") ?((!Blockly_Debugger.actions[\"Watch\"].watches.includes(block.getVars()[0])) ? \"Add Watch\" : \"Remove Watch\") : \"Add Watch\",\r\n//       enabled: (block.type===\"variables_set\" || block.type===\"variables_get\") ? true : false,\r\n//       //enabled: true,\r\n//       callback: function(){\r\n//         //alert(block.nextConnection);\r\n//         // console.log(block.nextConnection);  \r\n//         // console.log(block.nextConnection.sourceBlock_.getVars());  \r\n//         if(!Blockly_Debugger.actions[\"Watch\"].watches.includes(block.getVars()[0])){\r\n//           Blockly_Debugger.actions[\"Watch\"].watches.push(block.getVars()[0]);\r\n//         }else{\r\n//           var index = Blockly_Debugger.actions[\"Watch\"].watches.indexOf(block.getVars()[0]);\r\n//           if (index !== -1) Blockly_Debugger.actions[\"Watch\"].watches.splice(index, 1);\r\n//         }\r\n//         Blockly_Debugger.actions[\"Watch\"].handler();        \r\n//         alert(Blockly_Debugger.actions[\"Watch\"].watches);\r\n\r\n//       }\r\n//     }\r\n\r\n//     menuOptions.push(watchOption);\r\n\r\n//     // Option to get help.\r\n//     var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;\r\n//     var helpOption = {enabled: !!url};\r\n//     helpOption.text = Blockly.Msg.HELP;\r\n//     helpOption.callback = function() {\r\n//       block.showHelp_();\r\n//     };\r\n//     menuOptions.push(helpOption);\r\n    \r\n//     // Allow the block to add or modify menuOptions.\r\n//     if (this.customContextMenu && !block.isInFlyout) {\r\n//       this.customContextMenu(menuOptions);\r\n//     }\r\n  \r\n//     Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n//     Blockly.ContextMenu.currentBlock = this;\r\n\r\n\r\n//   };\r\n","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));\r\n\r\n\r\naddEventListener(\"updateTable\",function (){\r\n    let variables = Blockly_Debugger.actions[\"Variables\"].getVariables();\r\n    console.log(document.getElementById(\"variables\").innerHTML);\r\n    document.getElementById(\"variables\").innerHTML = '';\r\n    for(var i = 0; i<variables.length; ++i){\r\n        document.getElementById(\"variables\").innerHTML += `<tr>\r\n                                                                <td>` + variables[i].name + `</td>\r\n                                                                <td>` +  variables[i].value + `</td>\r\n                                                                <td>` + typeof variables[i].value + `</td>\r\n                                                            </tr>`;\r\n    }\r\n});\r\n\r\n\r\n","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\r\n        Blockly.JavaScript.ORDER_MEMBER;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        textOrder) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        // Adjust index if using one-based indices.\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n        var code = text + '.slice(' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'textRandomLetter',\r\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n             '  var x = Math.floor(Math.random() * text.length);',\r\n             '  return text[x];',\r\n             '}']);\r\n        var code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else if (text.match(/^'?\\w+'?$/) ||\r\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\r\n        where2 != 'FROM_END' && where2 != 'LAST')) {\r\n      // If the text is a variable or literal or doesn't require a call for\r\n      // length, don't generate a helper function.\r\n      text = '(' + text + ')';\r\n      switch (where1) {\r\n        case 'FROM_START':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n          break;\r\n        case 'FROM_END':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at1 = text + '.length - ' + at1;\r\n          break;\r\n        case 'FIRST':\r\n          var at1 = '0';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      switch (where2) {\r\n        case 'FROM_START':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\r\n          break;\r\n        case 'FROM_END':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at2 = text + '.length - ' + at2;\r\n          break;\r\n        case 'LAST':\r\n          var at2 = text + '.length';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n    } else {\r\n      text = '(' + text + ')';\r\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\r\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\r\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\r\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n          '(sequence' +\r\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n          // we add it as a parameter.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\r\n          ') {',\r\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\r\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\r\n            '  return sequence.slice(start, end);',\r\n            '}']);\r\n      var code = functionName + '(' + text +\r\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n          // pass it.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\r\n          ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n\r\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\r\n  //   // Change capitalization.\r\n  //   var OPERATORS = {\r\n  //     'UPPERCASE': '.toUpperCase()',\r\n  //     'LOWERCASE': '.toLowerCase()',\r\n  //     'TITLECASE': null\r\n  //   };\r\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\r\n  //   var code;\r\n  //   if (operator) {\r\n  //     // Upper and lower case are functions built into JavaScript.\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n  //     code = '(' + argument0 + ')' + operator;\r\n  //   } else {\r\n  //     // Title case is not a native JavaScript function.  Define one.\r\n  //     var functionName = Blockly.JavaScript.provideFunction_(\r\n  //         'text_toTitleCase',\r\n  //         [ 'function ' +\r\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n  //           '  return str.replace(/\\\\S+/g,',\r\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n  //               'txt.substring(1).toLowerCase();});',\r\n  //           '}']);\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n  //   }\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\r\n        Blockly.JavaScript.ORDER_NONE;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        textOrder) || '\\'\\'';\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var code = '(' + text + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'textToTitleCase',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(str) {',\r\n           '  return str.replace(/\\\\S+/g,',\r\n           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n              'txt.substring(1).toLowerCase();});',\r\n           '}']);\r\n      var code = functionName + '(' + '(' + text + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\r\n\r\n\r\n"," window.workspace = {};\r\n\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\t \r\n\r\n Blockly.Xml.domToWorkspace(//window.workspace[\"blockly1\"],\r\n\tdocument.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly1\"]);\r\n\r\n\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(//window.workspace[\"blockly2\"],   \r\n\tdocument.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly2\"]);\r\n\r\n"],"sourceRoot":""}