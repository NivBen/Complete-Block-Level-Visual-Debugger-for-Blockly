{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/watches.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/breakpoint.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./events.js","webpack:///./init_blockly.js","webpack:///./index.js","webpack:///../generator/blockly/core/block.js","webpack:///../generator/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","msg","window","alert","postMessage","type","data","prompt","workspace","CurrentSystemEditorId","traceOn_","highlightBlock","id","document","getElementById","innerHTML","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","breakpoints","map","reset_view","block_id","variables","update","new_vars","length","change","dispatchEvent","Event","getVariables","init","workspace_vars","getAllVariables","variable","variables_names","j","includes","nvar","push","watches","new_watches","getWatches","expr","cursorBreakpoint","Blockly","JavaScript","STATEMENT_PREFIX","code1","workspaceToCode","code2","code","MouseEvent","enable","console","log","wait_view","getBlockById","block","setCollapsed","parentBlock_","style","stroke","fill","disable","indexOf","generation","nest","currentSystemEditorId","valueToCode","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","item","ORDER_NONE","options","oneBasedIndex","ORDER_ADDITION","ORDER_FUNCTION_CALL","mode","where","listOrder","ORDER_COMMA","list","at","getAdjusted","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","ORDER_SUBTRACTION","xVar","input","delimiter","functionName","direction","funcName","getName","Procedures","branch","statementToCode","replace","prefixLines","INDENT","INFINITE_LOOP_TRAP","returnValue","args","arguments_","join","scrub_","definitions_","x","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","assert","outputConnection","isString","fail","addLoopTrap","warn","getMainWorkspace","blocks","getTopBlocks","systemEditorId","line","scrubNakedValue","finish","myBlockToCode","stmt_Prefix","myscrub_","a","b","targetConnection","getCommentText","utils","wrap","COMMENT_WRAP","getProcedureDef","e","inputList","INPUT_VALUE","connection","targetBlock","allNestedComments","functionNames_","reset","quote_","Breakpoint_Icon","Icon","createIcon","create","width_","height_","drawIcon_","group","createSvgElement","class","block_","cx","cy","setVisible","visible","isEnable","myDisable","index","splice","dom","removeNode","iconGroup_","createElementNS","SVG_NS","setAttribute","body","runtimeStyle","currentStyle","appendChild","BlockSvg","showContextMenu_","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","ContextMenu","blockDuplicateOption","isEditable","collapsed_","comments","blockCommentOption","NEXT_STATEMENT","inlineOption","enabled","isInline","getInputsInline","text","Msg","setInputsInline","collapse","expandOption","collapseOption","disableOption","getInheritedDisabled","setDisabled","blockDeleteOption","breakpointOption","icon","new_br","DisableBreakpointOption","runToCursorOption","watchOption","toString","new_watch","evalOption","block___","blockHelpOption","customContextMenu","show","RTL","currentBlock","addEventListener","red_style","inject","media","toolbox","Xml","domToWorkspace","onclick","Block","opt_maxLength","opt_emptyToken","emptyFieldPlaceholder","getInput","fieldRow","text_","field","FieldDropdown","getValue","getText","child","child_text","string","trim","truncate","argument0","textOrder","where1","where2","at1","at2","getIndex_","wherePascalCase","FIRST","LAST","FROM_START","FROM_END","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher = {};\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\");\t // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher[\"alert\"] = (msg) => {\r\n\t\t\t\t\twindow.alert(msg);\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"alert\",\"data\": \"\"});\r\n\t\t\t\t};\r\n\t\tdispatcher[\"prompt\"] = (msg) => {\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \t\t\t\t\t\r\n\t\t\t\t};\r\n\t\tdispatcher[\"highlightBlock\"] = (data) => {\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t}; \t\t\t\t\t\t\r\n\t\tdispatcher[\"execution_finished\"] = () => {\r\n\t\t\t\t\tinstance = undefined;\r\n\t\t\t\t\tdocument.getElementById(\"val_table\").innerHTML = '';\r\n\t\t\t\t};\t\t\r\n\t};\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    Debuggee_Worker.Stop();\r\n    document.getElementById(\"val_table\").innerHTML = '';\r\n    Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{Blockly_Debugger.actions[\"Breakpoint\"].reset_view(obj.block_id)}); \r\n    // remove hilighting \r\n    window.workspace[\"blockly1\"].traceOn_ = true;\r\n    window.workspace[\"blockly1\"].highlightBlock(\"\");\r\n    window.workspace[\"blockly2\"].traceOn_ = true;\r\n    window.workspace[\"blockly2\"].highlightBlock(\"\");\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = {};\r\nBlockly_Debugger.actions[\"Watch\"] = {};\r\nBlockly_Debugger.actions[\"Eval\"] = {};\r\n\r\n// Variables\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = (function(){\r\n    var variables = [];\r\n\r\n    function handler() {};     \r\n\r\n    function update(new_vars){\r\n        for(var i= 0; i < variables.length; ++i){\r\n            if(variables[i].value !== new_vars[i].value){\r\n                variables[i].value = new_vars[i].value;\r\n                variables[i].change = true;\r\n            }else{\r\n                variables[i].change = false;\r\n            }\r\n\r\n        }\r\n        //variables = new_vars;\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n    \r\n    function getVariables(){\r\n        return variables;\r\n    };\r\n\r\n    function init(){\r\n        var workspace_vars = [];\r\n        workspace_vars[0] = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n        workspace_vars[1] = window.workspace[\"blockly2\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n\r\n        for(var i = 0; i<workspace_vars.length; i++){\r\n            var variables_names =  variables.map((variable) => {\r\n                return variable.name;\r\n            });   \r\n            for(var j = 0; j<workspace_vars[i].length; ++j){\r\n                if(variables_names.includes(workspace_vars[i][j])) continue;\r\n                var nvar = {\r\n                    \"name\" : workspace_vars[i][j],\r\n                    \"value\" : undefined,\r\n                    \"change\": false\r\n                }\r\n                variables.push(nvar);\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        update : update,\r\n        getVariables : getVariables,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\n\r\n// Watches\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = (function(){\r\n    var watches = [];\r\n    \r\n    function handler(){\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n        if(!Debuggee_Worker.hasInstance()) return; \r\n        Debuggee_Worker.Instance().postMessage({\"type\":\"watch\", \"data\": watches});\r\n    }\r\n\r\n    function update(new_watches){\r\n        for(var i= 0; i < watches.length; ++i){\r\n            if(watches[i].value !== new_watches[i].value){\r\n                watches[i].value = new_watches[i].value;\r\n                watches[i].change = true;\r\n            }else{\r\n                watches[i].change = false;\r\n            }\r\n\r\n        }\r\n        //watches = new_watches;\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n    };\r\n    \r\n    function getWatches(){\r\n        return watches;\r\n    }\r\n\r\n    function init(){\r\n        for(var i=0; i<watches.length; ++i){\r\n            watches[i].value = undefined;\r\n        }\r\n    }\r\n\r\n    return {\r\n        handler : handler,\r\n        update : update,\r\n        getWatches : getWatches,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\n\r\n\r\n// Eval \r\n\r\nBlockly_Debugger.actions[\"Eval\"].handler = function (expr){\r\n    if(!Debuggee_Worker.hasInstance()) return;\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"eval\", \"data\": expr});\r\n}\r\n\r\n\r\nDebuggee_Worker.AddOnDispacher(\"watches\", Blockly_Debugger.actions[\"Watch\"].update);\r\nDebuggee_Worker.AddOnDispacher(\"variables\", Blockly_Debugger.actions[\"Variables\"].update);","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\nimport './watches.js';\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = (cursorBreakpoint) => {\r\n    if(Debuggee_Worker.hasInstance()) return;\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    \r\n    Blockly_Debugger.actions[\"Variables\"].init();\r\n    Blockly_Debugger.actions[\"Watch\"].init();\r\n\r\n    document.getElementById(\"val_table\").innerHTML = `  <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Variables  \r\n                                                            <!--i class=\"fa fa-bars\"></i-->\r\n                                                            </div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Value</th> \r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n\r\n                                                            </table>\r\n                                                            <table id=\"variables\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Watches</div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Code</th> \r\n                                                                <th>Value</th>\r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n                                                            </table>\r\n                                                            <table id=\"watches\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>`;\r\n\r\n    \r\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \"\";\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return { \"block_id\" : obj.block_id,\r\n                                                                                                                                                                      \"enable\" : obj.enable}}),\r\n                                                                               \"cursorBreakpoint\": cursorBreakpoint,\r\n                                                                               \"watches\": Blockly_Debugger.actions[\"Watch\"].getWatches(),\r\n                                                                               \"variables\": Blockly_Debugger.actions[\"Variables\"].getVariables()\r\n                                                                            }});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\nBlockly_Debugger.actions[\"RunToCursor\"] = {};\r\n\r\n\r\n// Breakpoints\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].wait_view = (block_id) => {\r\n    var CurrentSystemEditorId = window.workspace[\"blockly1\"].getBlockById(block_id) ? \"blockly1\" : \"blockly2\";\r\n    var block = window.workspace[CurrentSystemEditorId].getBlockById(block_id);\r\n    while(block!=null){\r\n        block.setCollapsed(false);\r\n        block = block.parentBlock_;\r\n    }\r\n    window.workspace[CurrentSystemEditorId].traceOn_ = true;                // hilighting (gt den kanei an einai collapsed)\r\n    window.workspace[CurrentSystemEditorId].highlightBlock(block_id);\r\n    \r\n    document.getElementById(block_id).style.stroke = 'red';\r\n    document.getElementById(block_id).style.fill = 'yellow';\r\n    document.getElementById(block_id).style['stroke-width'] = '5px';\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].reset_view = (block_id) =>{\r\n    document.getElementById(block_id).style.stroke = 'yellow';\r\n    document.getElementById(block_id).style.fill = 'red';\r\n    document.getElementById(block_id).style['stroke-width'] = '1px';\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].disable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.stroke = 'yellow';\r\n        document.getElementById(block_id).style.fill = '#FA8258';\r\n        document.getElementById(block_id).style['stroke-width'] = '1px';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = false;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].enable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.fill = 'red';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = true;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\n\r\n\r\n// Run to Cursor\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].handler = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) {\r\n        Blockly_Debugger.actions[\"Start\"].handler(block_id);\r\n        return;\r\n    }; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"runToCursor\", \"data\": block_id});\r\n}\r\n\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_wait_view\", Blockly_Debugger.actions[\"Breakpoint\"].wait_view);\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_reset_view\", Blockly_Debugger.actions[\"Breakpoint\"].reset_view);\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    // old blockly\r\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \r\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\r\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  var mode = block.getFieldValue('MODE') || 'GET';\r\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\r\n      Blockly.JavaScript.ORDER_MEMBER;\r\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  list = '(' + list + ')';\r\n  switch (where) {\r\n    case ('FIRST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case ('LAST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case ('FROM_START'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    case ('FROM_END'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    case ('RANDOM'):\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'listsGetRandomItem',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n           '  var x = Math.floor(Math.random() * list.length);',\r\n           '  if (remove) {',\r\n           '    return list.splice(x, 1)[0];',\r\n           '  } else {',\r\n           '    return list[x];',\r\n           '  }',\r\n           '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n  }\r\n  throw 'Unhandled combination (lists_getIndex).';\r\n};\r\n\r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n\r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmpList', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    switch (where) {\r\n      case ('FIRST'):\r\n        if (mode == 'SET') {\r\n          return list + '[0] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.unshift(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('LAST'):\r\n        if (mode == 'SET') {\r\n          var code = cacheList();\r\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.push(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_START'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        if (mode == 'SET') {\r\n          return list + '[' + at + '] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_END'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\r\n            Blockly.JavaScript.ORDER_SUBTRACTION);\r\n        var code = cacheList();\r\n        if (mode == 'SET') {\r\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n              ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n      case ('RANDOM'):\r\n        var code = cacheList();\r\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            'tmpX', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n            '.length);\\n';\r\n        if (mode == 'SET') {\r\n          code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!input) {\r\n        input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!input) {\r\n        input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_reverse'] = function(block) {\r\n    // Block for reversing a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var code = '(' + list + ')' + '.slice().reverse()';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['lists_sort'] = function(block) {\r\n    // Block for sorting a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n    var type = block.getFieldValue('TYPE');\r\n    var getCompareFunctionName = Blockly.JavaScript.provideFunction_(\r\n        'listsGetSortCompare',\r\n        ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n            '(type, direction) {',\r\n         '  var compareFuncs = {',\r\n         '    \"NUMERIC\": function(a, b) {',\r\n         '        return parseFloat(a) - parseFloat(b); },',\r\n         '    \"TEXT\": function(a, b) {',\r\n         '        return a.toString() > b.toString() ? 1 : -1; },',\r\n         '    \"IGNORE_CASE\": function(a, b) {',\r\n         '        return a.toString().toLowerCase() > ' +\r\n            'b.toString().toLowerCase() ? 1 : -1; },',\r\n         '  };',\r\n         '  var compare = compareFuncs[type];',\r\n         '  return function(a, b) { return compare(a, b) * direction; }',\r\n         '}']);\r\n    return ['(' + list + ')' + '.slice().sort(' +\r\n        getCompareFunctionName + '(\"' + type + '\", ' + direction + '))',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Blockly.JavaScript.prefixLines(\r\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \"0\" + ', \\'' + id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n\r\n    if(returnValue)\r\n        returnValue = '  return Blockly_Debuggee.function_return_decorator(' + returnValue + ', caller_nest);\\n';\r\n    else\r\n        returnValue = '  return Blockly_Debuggee.function_return_decorator( \\'\\', caller_nest);\\n';\r\n\r\n    var args = [];\r\n    for (var i = 0; i < block.arguments_.length; i++) {\r\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n                '  let caller_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n                branch +    \r\n                returnValue + '}';\r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    // Add % so as not to collide with helper functions in definitions list.\r\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\r\n    return null;\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return Blockly_Debuggee.function_return_decorator(' + value + ', caller_nest);\\n';\r\n  } else {\r\n    code += '  return Blockly_Debuggee.function_return_decorator(\\'\\', caller_nest);\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \r\n        'Expecting string from statement block \"%s\".', block.type);\r\n      if (this.STATEMENT_PREFIX) \r\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'), ' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! New blockly \r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\') ') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  id = id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};\r\n\r\n\r\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\r\n Blockly.Generator.prototype.myBlockToCode = function(block) {\r\n  if (!block || block.disabled) {\r\n    return '';\r\n  }\r\n  this.init(block.workspace);           //  added \r\n  var func = this[block.type];\r\n  var stmt_Prefix = this.STATEMENT_PREFIX;\r\n  this.STATEMENT_PREFIX = null;\r\n  goog.asserts.assertFunction(func,\r\n      'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n      this.name_, block.type);\r\n   var code = func.call(block, block);\r\n  if (goog.isArray(code)) {\r\n       goog.asserts.assert(block.outputConnection,\r\n        'Expecting string from statement block \"%s\".', block.type);\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\r\n  } else if (goog.isString(code)) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    //return code;\r\n    return this.myscrub_(block, code);\r\n  } else if (code === null) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return '';\r\n  } else {\r\n    goog.asserts.fail('Invalid code generated: %s', code);\r\n  }\r\n};\r\n\r\n\r\nBlockly.JavaScript.myscrub_=function(a,b){\r\n  var c=\"\";\r\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\r\n    var d=a.getCommentText();\r\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\"/**\\n\"+Blockly.JavaScript.prefixLines(d+\"\\n\",\" * \")+\" */\\n\"):c+Blockly.JavaScript.prefixLines(d+\"\\n\",\"// \"));\r\n    for(var e=0;e<a.inputList.length;e++)\r\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\"// \"))\r\n  }\r\n  return c+b;\r\n}\r\n\r\n\r\nBlockly.JavaScript.finish=function(a){\r\n  var b=[],c;\r\n  for(c in Blockly.JavaScript.definitions_){\r\n    if(c === \"variables\") continue;\r\n    b.push(Blockly.JavaScript.definitions_[c]);\r\n  }\r\n  delete Blockly.JavaScript.definitions_;\r\n  delete Blockly.JavaScript.functionNames_;\r\n  Blockly.JavaScript.variableDB_.reset();\r\n  return b.join(\"\\n\\n\")+\"\\n\\n\\n\"+a};\r\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\";\\n\"};\r\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\");\r\n  return\"'\"+a+\"'\"\r\n};\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\n\r\n\r\nexport var Breakpoint_Icon = function(block) {\r\n    Blockly.Icon.call(this, block);\r\n    this.createIcon();\r\n  };\r\n\r\n  Breakpoint_Icon.prototype = Object.create(Blockly.Icon.prototype);\r\n  Breakpoint_Icon.prototype.width_ = 160;\r\n  Breakpoint_Icon.prototype.height_ = 80;\r\n\r\n  Breakpoint_Icon.prototype.drawIcon_ = function(group) {\r\n    Blockly.utils.createSvgElement('circle',\r\n        {'class': 'breakpoint_enable', 'id' : this.block_.id, 'r': '6', 'cx': '8', 'cy': '8'},\r\n        group); \r\n        \r\n  }\r\n\r\n\r\n  Breakpoint_Icon.prototype.setVisible = function (visible){\r\n    var isEnable = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id==this.block_.id) return obj.enable;});\r\n    console.log(isEnable);\r\n    if(isEnable[0]){\r\n      Blockly_Debugger.actions[\"Breakpoint\"].disable(this.block_.id);\r\n    }else {\r\n      this.myDisable();\r\n      var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(this.block_.id);\r\n      if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n    }\r\n}\r\n  \r\nBreakpoint_Icon.prototype.myDisable = function (){\r\n  goog.dom.removeNode(this.iconGroup_);  \r\n  this.iconGroup_=null;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------     \r\n\r\nBlockly.utils.createSvgElement=function(a,b,c){\r\n  a=document.createElementNS(Blockly.SVG_NS,a);\r\n  for(var d in b)a.setAttribute(d,b[d]);\r\n  document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);\r\n  c&&c.appendChild(a);\r\n  return a;\r\n}\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\nimport {Breakpoint_Icon} from './breakpoint.js';\r\n\r\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\r\n\r\n\r\n      // Breakpoints\r\n      var breakpointOption = {\r\n        text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n        enabled: true,\r\n        callback: function() {\r\n            if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\r\n              var new_br = {\r\n                \"block_id\" : block.id,\r\n                \"enable\" : true,\r\n                \"icon\" : new Breakpoint_Icon(block),\r\n                \"change\": false\r\n              }\r\n              Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(new_br);\r\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\r\n            }\r\n            else{\r\n              var icon = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\r\n              icon[0].myDisable();\r\n              var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          }\r\n      };\r\n      menuOptions.push(breakpointOption);\r\n\r\n      var DisableBreakpointOption = {\r\n        text: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \"Disable Breakpoint\" : \"Enable Breakpoint\",\r\n        enabled: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? true : false,\r\n        callback: function() {\r\n          if(Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\r\n            Blockly_Debugger.actions[\"Breakpoint\"].disable(block.id);\r\n          else\r\n            Blockly_Debugger.actions[\"Breakpoint\"].enable(block.id);\r\n        }\r\n      }\r\n      menuOptions.push(DisableBreakpointOption);\r\n\r\n      // Run to cursor\r\n      var runToCursorOption = {\r\n        text: \"Run to cursor\",\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n        }\r\n      };\r\n      menuOptions.push(runToCursorOption);\r\n\r\n\r\n      if(Debuggee_Worker.hasInstance()){\r\n        var watchOption = {\r\n          text:(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \"Add Watch\" : \"Remove Watch\",\r\n          enabled: (block.outputConnection==null) ? false : true,\r\n          callback: function(){\r\n            var name = block.toString();\r\n\r\n            if(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\r\n              var code = Blockly.JavaScript.myBlockToCode(block);\r\n              var new_watch = {\r\n                \"name\": name,\r\n                \"code\": code, \r\n                \"value\": undefined\r\n              }\r\n              Blockly_Debugger.actions[\"Watch\"].getWatches().push(new_watch);\r\n            }else{\r\n              var index = Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Watch\"].getWatches().splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Watch\"].handler();  \r\n          }\r\n        }\r\n        menuOptions.push(watchOption);\r\n\r\n\r\n        // Evaluate\r\n        var evalOption = {\r\n          text: \"Evaluate\",\r\n          enabled: (block.type === \"variables_set\" || block.type===\"math_change\") ? true : false,\r\n          callback: function(){\r\n            Blockly_Debugger.actions[\"Eval\"].handler(Blockly.JavaScript.myBlockToCode(block));  \r\n          }\r\n        };\r\n        menuOptions.push(evalOption);   \r\n      }\r\n    }\r\n\r\n\r\n    var block___ = {\r\n      text: \"block___\",\r\n      enabled:true,\r\n      callback: function(){\r\n       console.log(block);\r\n      }\r\n    };\r\n    menuOptions.push(block___); \r\n\r\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\r\n\r\n\r\n  \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n  };\r\n\r\n\r\n","import '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\naddEventListener(\"updateTable\",function (){\r\n    let variables = Blockly_Debugger.actions[\"Variables\"].getVariables();\r\n    document.getElementById(\"variables\").innerHTML = '';\r\n    for(var i = 0; i<variables.length; ++i){\r\n        var red_style = ``;\r\n        if(variables[i].change === true) red_style = `style=\\\"color:red;\\\"`;\r\n        document.getElementById(\"variables\").innerHTML += `<tr>\r\n                                                            <td ` + red_style + `>` + variables[i].name + `</td>\r\n                                                            <td ` + red_style + `>` +  variables[i].value + `</td>\r\n                                                            <td ` + red_style + `>` + typeof variables[i].value + `</td>\r\n                                                          </tr>`;\r\n    }\r\n});\r\n\r\n\r\naddEventListener(\"updateWatchesTable\",function (){\r\n    let watches = Blockly_Debugger.actions[\"Watch\"].getWatches();\r\n    document.getElementById(\"watches\").innerHTML = '';\r\n    for(var i = 0; i<watches.length; ++i){\r\n        var red_style = ``;\r\n        if(watches[i].change === true) red_style = `style=\\\"color:red;\\\"`;\r\n        document.getElementById(\"watches\").innerHTML += `<tr>\r\n                                                            <td ` + red_style + `>` + watches[i].name + `</td>\r\n                                                            <td ` + red_style + `>` + watches[i].code + `</td>\r\n                                                            <td ` + red_style + `>` + watches[i].value + `</td>\r\n                                                            <td ` + red_style + `>` + typeof watches[i].value + `</td>\r\n                                                        </tr>`;\r\n    }\r\n});","import './events.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\nwindow.workspace = {};\r\n\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly1\"]);\r\n\r\n\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly2\"]);\r\n\r\n\t//Blockly_Debugger.actions[\"Variables\"].init();","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));\r\n\r\n\r\n// if (document.addEventListener) { // IE >= 9; other browsers\r\n//     document.getElementById(\"val_table\").addEventListener('contextmenu', function(e) {\r\n//         alert(\"You've tried to open context menu\"); //here you draw your own menu\r\n//         e.preventDefault();\r\n//     }, false);\r\n// } else { // IE < 9\r\n//     document.getElementById(\"val_table\").attachEvent('oncontextmenu', function() {\r\n//         alert(\"You've tried to open context menu\");\r\n//         window.event.returnValue = false;\r\n//     });\r\n// }\r\n\r\n// let menuVisible = false;\r\n\r\n// const toggleMenu = command => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.display = command === \"show\" ? \"block\" : \"none\";\r\n//     menuVisible = !menuVisible;\r\n//   };\r\n  \r\n//   const setPosition = (top, left) => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.left = left + 'px';//`${left}px`;\r\n//     menu.style.top = top + 'px';//`${top}px`;\r\n//     toggleMenu('show');\r\n//   };\r\n  \r\n//   window.addEventListener(\"click\", e => {\r\n//     if(menuVisible)toggleMenu(\"hide\");\r\n//   });\r\n  \r\n//   document.getElementById(\"val_table\").addEventListener(\"contextmenu\", e => {\r\n//     e.preventDefault();\r\n//     const origin = {\r\n//       left: e.pageX,\r\n//       top: e.pageY\r\n//     };\r\n//     setPosition( e.pageY, e.pageX);\r\n//     return false;\r\n//   });","\r\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\r\n    var text = [];\r\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\r\n    if (this.collapsed_) {\r\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\r\n    } else {\r\n      for (var i = 0, input; input = this.inputList[i]; i++) {\r\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\r\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\r\n            text.push(emptyFieldPlaceholder);\r\n          } else {\r\n            text.push(field.getText());\r\n          }\r\n        }\r\n        if (input.connection) {\r\n          var child = input.connection.targetBlock();\r\n          if (child) {\r\n              var child_text = child.toString(undefined, opt_emptyToken);\r\n              child_text = \"(\" + child_text + \")\";                    // add ()\r\n            text.push(child_text);\r\n          } else {\r\n            text.push(emptyFieldPlaceholder);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    text = goog.string.trim(text.join(' ')) || '???';\r\n    if (opt_maxLength) {\r\n      // TODO: Improve truncation so that text from this block is given priority.\r\n      // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\r\n      // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\r\n      text = goog.string.truncate(text, opt_maxLength);\r\n    }\r\n    return text;\r\n  };","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\r\n        Blockly.JavaScript.ORDER_MEMBER;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        textOrder) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        // Adjust index if using one-based indices.\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n        var code = text + '.slice(' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'textRandomLetter',\r\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n             '  var x = Math.floor(Math.random() * text.length);',\r\n             '  return text[x];',\r\n             '}']);\r\n        var code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else if (text.match(/^'?\\w+'?$/) ||\r\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\r\n        where2 != 'FROM_END' && where2 != 'LAST')) {\r\n      // If the text is a variable or literal or doesn't require a call for\r\n      // length, don't generate a helper function.\r\n      text = '(' + text + ')';\r\n      switch (where1) {\r\n        case 'FROM_START':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n          break;\r\n        case 'FROM_END':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at1 = text + '.length - ' + at1;\r\n          break;\r\n        case 'FIRST':\r\n          var at1 = '0';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      switch (where2) {\r\n        case 'FROM_START':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\r\n          break;\r\n        case 'FROM_END':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at2 = text + '.length - ' + at2;\r\n          break;\r\n        case 'LAST':\r\n          var at2 = text + '.length';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n    } else {\r\n      text = '(' + text + ')';\r\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\r\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\r\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\r\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n          '(sequence' +\r\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n          // we add it as a parameter.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\r\n          ') {',\r\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\r\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\r\n            '  return sequence.slice(start, end);',\r\n            '}']);\r\n      var code = functionName + '(' + text +\r\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n          // pass it.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\r\n          ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\r\n        Blockly.JavaScript.ORDER_NONE;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        textOrder) || '\\'\\'';\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var code = '(' + text + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'textToTitleCase',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(str) {',\r\n           '  return str.replace(/\\\\S+/g,',\r\n           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n              'txt.substring(1).toLowerCase();});',\r\n           '}']);\r\n      var code = functionName + '(' + '(' + text + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\r\n\r\n\r\n  Blockly.JavaScript['text_print'] = function(block) {\r\n    // Print statement.\r\n    var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    return 'await window.alert(' + msg + ');\\n';\r\n  };"],"sourceRoot":""}