{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/watches.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./events.js","webpack:///./init_blockly.js","webpack:///./index.js","webpack:///../generator/blockly/core/block.js","webpack:///../generator/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","msg","window","alert","postMessage","type","data","prompt","workspace","CurrentSystemEditorId","traceOn_","highlightBlock","id","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","watches","dispatchEvent","Event","update","new_watches","console","log","getWatches","init","length","variables","new_vars","getVariables","workspace_vars","getAllVariables","map","variable","variables_names","j","includes","nvar","push","expr","cursorBreakpoint","Blockly","JavaScript","STATEMENT_PREFIX","code1","workspaceToCode","code2","code","MouseEvent","breakpoints","block_id","generation","nest","currentSystemEditorId","block","valueToCode","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","item","ORDER_NONE","options","oneBasedIndex","ORDER_ADDITION","ORDER_FUNCTION_CALL","mode","where","listOrder","ORDER_COMMA","list","at","getAdjusted","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","ORDER_SUBTRACTION","xVar","input","delimiter","functionName","funcName","getName","Procedures","branch","statementToCode","replace","prefixLines","INDENT","INFINITE_LOOP_TRAP","returnValue","args","arguments_","join","scrub_","definitions_","x","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","assert","outputConnection","isString","fail","addLoopTrap","warn","getMainWorkspace","blocks","getTopBlocks","systemEditorId","line","scrubNakedValue","finish","myBlockToCode","stmt_Prefix","a","b","functionNames_","reset","quote_","BlockSvg","showContextMenu_","e","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","ContextMenu","blockDuplicateOption","isEditable","collapsed_","comments","blockCommentOption","inputList","NEXT_STATEMENT","inlineOption","enabled","isInline","getInputsInline","text","Msg","setInputsInline","collapse","expandOption","setCollapsed","collapseOption","disable","disableOption","getInheritedDisabled","setDisabled","blockDeleteOption","breakpointOption","index","indexOf","splice","runToCursorOption","watchOption","toString","new_watch","evalOption","blockHelpOption","customContextMenu","show","RTL","currentBlock","addEventListener","document","getElementById","innerHTML","inject","media","toolbox","Xml","domToWorkspace","onclick","Block","opt_maxLength","opt_emptyToken","emptyFieldPlaceholder","getInput","fieldRow","text_","field","FieldDropdown","getValue","getText","connection","child","targetBlock","child_text","string","trim","truncate","argument0","textOrder","where1","where2","at1","at2","getIndex_","wherePascalCase","FIRST","LAST","FROM_START","FROM_END","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher = {};\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\"); // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher[\"alert\"] = (msg) => {\r\n\t\t\t\t\twindow.alert(msg);\r\n\t\t\t\t};\r\n\t\tdispatcher[\"prompt\"] = (msg) => {\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \r\n\t\t\t\t};\r\n\t\tdispatcher[\"highlightBlock\"] = (data) => {\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t\t\t\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\t\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\r\n\t\t\t\t\t\t\t// block.setCollapsed(false);\r\n\t\t\t\t}; \t\t\t\t\t\t\r\n\t\tdispatcher[\"execution_finished\"] = () => {\r\n\t\t\t\t\tinstance = undefined;\r\n\t\t\t\t};\t\t\r\n\t};\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    Debuggee_Worker.Stop();\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = {};\r\nBlockly_Debugger.actions[\"Variables\"] = {};\r\nBlockly_Debugger.actions[\"Eval\"] = {};\r\n\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = (function(){\r\n    var watches = [];\r\n    \r\n    function handler(){\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n        if(!Debuggee_Worker.hasInstance()) return; \r\n        Debuggee_Worker.Instance().postMessage({\"type\":\"watch\", \"data\": watches});\r\n    }\r\n\r\n    function update(new_watches){\r\n        watches = new_watches;\r\n        console.log(\"Upadated watch Debugger:\");\r\n        console.log(watches);\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n    };\r\n    \r\n    function getWatches(){\r\n        return watches;\r\n    }\r\n\r\n    function init(){\r\n        for(var i=0; i<watches.length; ++i){\r\n            watches[i].value = undefined;\r\n        }\r\n    }\r\n\r\n    return {\r\n        handler : handler,\r\n        update : update,\r\n        getWatches : getWatches,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = (function(){\r\n    var variables = [];\r\n\r\n    function handler() {};     \r\n\r\n    function update(new_vars){\r\n        variables = new_vars;\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n    \r\n    function getVariables(){\r\n        return variables;\r\n    };\r\n\r\n    function init(){\r\n        // var variables1 = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n        // var variables2 = (window.workspace[\"blockly2\"].getAllVariables()).map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n\r\n\r\n        var workspace_vars = [];\r\n        workspace_vars[0] = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n        workspace_vars[1] = window.workspace[\"blockly2\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n\r\n        for(var i = 0; i<workspace_vars.length; i++){\r\n            var variables_names =  variables.map((variable) => {\r\n                return variable.name;\r\n            });   \r\n            for(var j = 0; j<workspace_vars[i].length; ++j){\r\n                if(variables_names.includes(workspace_vars[i][j])) continue;\r\n                var nvar = {\r\n                    \"name\" : workspace_vars[i][j],\r\n                    \"value\" : undefined\r\n                }\r\n                variables.push(nvar);\r\n            }\r\n        }\r\n\r\n\r\n        // var variables_names =  variables.map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n\r\n        // for(var i = 0; i<variables1.length; ++i){\r\n        //     if(variables_names.includes(variables1[i])) continue;\r\n        //     var nvar = {\r\n        //         \"name\" : variables1[i],\r\n        //         \"value\" : undefined\r\n        //     }\r\n        //     variables.push(nvar);\r\n        // }\r\n\r\n        // variables_names =  variables.map((variable) => {\r\n        //     return variable.name;\r\n        // });\r\n        \r\n        // for(var i = 0; i<variables2.length; ++i){\r\n        //     if(variables_names.includes(variables2[i])) continue;\r\n        //     var nvar = {\r\n        //         \"name\" : variables2[i],\r\n        //         \"value\" : undefined\r\n        //     }\r\n        //     variables.push(nvar);\r\n        // }\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n\r\n    return {\r\n        update : update,\r\n        getVariables : getVariables,\r\n        init : init       \r\n    }\r\n})();\r\n\r\n\r\nBlockly_Debugger.actions[\"Eval\"].handler = function (expr){\r\n    console.log(expr);\r\n    if(!Debuggee_Worker.hasInstance()) return;\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"eval\", \"data\": expr});\r\n}\r\n\r\n\r\nDebuggee_Worker.AddOnDispacher(\"watches\", Blockly_Debugger.actions[\"Watch\"].update);\r\nDebuggee_Worker.AddOnDispacher(\"variables\", Blockly_Debugger.actions[\"Variables\"].update);","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\nimport './watches.js';\r\n\r\n// function addCode(js){                                // gia na kanw debug to eval \r\n//     var e = document.createElement('script');\r\n//     e.type = 'text/javascript';\r\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\r\n//     document.head.appendChild(e);\r\n// }\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = (cursorBreakpoint) => {\r\n    if(Debuggee_Worker.hasInstance()) return;\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    \r\n    Blockly_Debugger.actions[\"Variables\"].init();\r\n    Blockly_Debugger.actions[\"Watch\"].init();\r\n\r\n    // var code = \"async function code(){\\n\" + code1 + code2 +\" };\\ncode();\";\r\n    // addCode(code);\r\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \"\";\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints,\r\n                                                                               \"cursorBreakpoint\": cursorBreakpoint,\r\n                                                                               \"watches\": Blockly_Debugger.actions[\"Watch\"].getWatches(),\r\n                                                                               \"variables\": Blockly_Debugger.actions[\"Variables\"].getVariables()\r\n                                                                            }});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\nBlockly_Debugger.actions[\"RunToCursor\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints});\r\n}\r\n\r\n\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].handler = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) {\r\n        Blockly_Debugger.actions[\"Start\"].handler(block_id);\r\n        return;\r\n    }; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"runToCursor\", \"data\": block_id});\r\n}","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    // old blockly\r\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \r\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\r\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\r\n//     // Get element at index.\r\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n//     var mode = block.getFieldValue('MODE') || 'GET';\r\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\r\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  \r\n//     list = '(' + list + ')';\r\n//     if (where == 'FIRST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.shift()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.shift();\\n';\r\n//       }\r\n//     } else if (where == 'LAST') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.pop()';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.pop();\\n';\r\n//       }\r\n//     } else if (where == 'FROM_START') {\r\n//       // Blockly uses one-based indicies.\r\n//       if (Blockly.isNumber(at)) {\r\n//         // If the index is a naked number, decrement it right now.\r\n//         at = parseFloat(at) - 1;\r\n//       } else {\r\n//         // If the index is dynamic, decrement it in code.\r\n//         at += ' - 1';\r\n//       }\r\n//       if (mode == 'GET') {\r\n//         var code = list + '[' + at + ']';\r\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n//       } else if (mode == 'GET_REMOVE') {\r\n//         var code = list + '.splice(' + at + ', 1)[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return list + '.splice(' + at + ', 1);\\n';\r\n//       }\r\n//     } else if (where == 'FROM_END') {\r\n//       if (mode == 'GET') {\r\n//         var code = list + '.slice(-' + at + ')[0]';\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\r\n//         var functionName = Blockly.JavaScript.provideFunction_(\r\n//             'lists_remove_from_end',\r\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//                 '(list, x) {',\r\n//               '  x = list.length - x;',\r\n//               '  return list.splice(x, 1)[0];',\r\n//               '}']);\r\n//         code = functionName + '(' + list + ', ' + at + ')';\r\n//         if (mode == 'GET_REMOVE') {\r\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//         } else if (mode == 'REMOVE') {\r\n//           return code + ';\\n';\r\n//         }\r\n//       }\r\n//     } else if (where == 'RANDOM') {\r\n//       var functionName = Blockly.JavaScript.provideFunction_(\r\n//           'lists_get_random_item',\r\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n//               '(list, remove) {',\r\n//             '  var x = Math.floor(Math.random() * list.length);',\r\n//             '  if (remove) {',\r\n//             '    return list.splice(x, 1)[0];',\r\n//             '  } else {',\r\n//             '    return list[x];',\r\n//             '  }',\r\n//             '}']);\r\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n//       } else if (mode == 'REMOVE') {\r\n//         return code + ';\\n';\r\n//       }\r\n//     }\r\n//     throw 'Unhandled combination (lists_getIndex).';\r\n//   };\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  var mode = block.getFieldValue('MODE') || 'GET';\r\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\r\n      Blockly.JavaScript.ORDER_MEMBER;\r\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  list = '(' + list + ')';\r\n  switch (where) {\r\n    case ('FIRST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case ('LAST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case ('FROM_START'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    case ('FROM_END'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    case ('RANDOM'):\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'listsGetRandomItem',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n           '  var x = Math.floor(Math.random() * list.length);',\r\n           '  if (remove) {',\r\n           '    return list.splice(x, 1)[0];',\r\n           '  } else {',\r\n           '    return list[x];',\r\n           '  }',\r\n           '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n  }\r\n  throw 'Unhandled combination (lists_getIndex).';\r\n};\r\n\r\n\r\n\r\n  \r\n\r\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n  //   // Set element at index.\r\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n  //   var mode = block.getFieldValue('MODE') || 'GET';\r\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\r\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  //   // Closure, which accesses and modifies 'list'.\r\n \r\n  //   list = '(' + list + ')';\r\n  //   function cacheList() {\r\n  //     if (list.match(/^\\w+$/)) {\r\n  //       return '';\r\n  //     }\r\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\r\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n  //     list = listVar;\r\n  //     return code;\r\n  //   }\r\n  //   if (where == 'FIRST') {\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[0] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.unshift(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'LAST') {\r\n  //     if (mode == 'SET') {\r\n  //       var code = cacheList();\r\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.push(' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_START') {\r\n  //     // Blockly uses one-based indicies.\r\n  //     if (Blockly.isNumber(at)) {\r\n  //       // If the index is a naked number, decrement it right now.\r\n  //       at = parseFloat(at) - 1;\r\n  //     } else {\r\n  //       // If the index is dynamic, decrement it in code.\r\n  //       at += ' - 1';\r\n  //     }\r\n  //     if (mode == 'SET') {\r\n  //       return list + '[' + at + '] = ' + value + ';\\n';\r\n  //     } else if (mode == 'INSERT') {\r\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n  //     }\r\n  //   } else if (where == 'FROM_END') {\r\n  //     var code = cacheList();\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n  //           ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   } else if (where == 'RANDOM') {\r\n  //     var code = cacheList();\r\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\r\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n  //         '.length);\\n';\r\n  //     if (mode == 'SET') {\r\n  //       code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n  //       return code;\r\n  //     } else if (mode == 'INSERT') {\r\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n  //       return code;\r\n  //     }\r\n  //   }\r\n  //   throw 'Unhandled combination (lists_setIndex).';\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n\r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmpList', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    switch (where) {\r\n      case ('FIRST'):\r\n        if (mode == 'SET') {\r\n          return list + '[0] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.unshift(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('LAST'):\r\n        if (mode == 'SET') {\r\n          var code = cacheList();\r\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.push(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_START'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        if (mode == 'SET') {\r\n          return list + '[' + at + '] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_END'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\r\n            Blockly.JavaScript.ORDER_SUBTRACTION);\r\n        var code = cacheList();\r\n        if (mode == 'SET') {\r\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n              ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n      case ('RANDOM'):\r\n        var code = cacheList();\r\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            'tmpX', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n            '.length);\\n';\r\n        if (mode == 'SET') {\r\n          code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n\r\n  // Blockly.JavaScript['lists_split'] = function(block) {\r\n  //   // Block for splitting text into a list, or joining a list into text.\r\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n  //       Blockly.JavaScript.ORDER_MEMBER);\r\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n  //       Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //   var mode = block.getFieldValue('MODE');\r\n  //   if (mode == 'SPLIT') {\r\n  //     if (!value_input) {\r\n  //       value_input = '\\'\\'';\r\n  //     }\r\n  //     var functionName = 'split';\r\n  //   } else if (mode == 'JOIN') {\r\n  //     if (!value_input) {\r\n  //       value_input = '[]';\r\n  //     }\r\n  //     var functionName = 'join';\r\n  //   } else {\r\n  //     throw 'Unknown mode: ' + mode;\r\n  //   }\r\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!input) {\r\n        input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!input) {\r\n        input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_reverse'] = function(block) {\r\n    // Block for reversing a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var code = '(' + list + ')' + '.slice().reverse()';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n//     // Define a procedure with a return value.\r\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\r\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n//       branch = Blockly.JavaScript.prefixLines(\r\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \"0\" + ', \\'' + block.id + '\\', \\'' + generation.currentSystemEditorId + '\\'), eval(update_values())'\r\n//         ), Blockly.JavaScript.INDENT) + branch ;\r\n//     }\r\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n//           '\\'' + block.id + '\\'') + branch;\r\n//     }\r\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n//         Blockly.JavaScript.ORDER_NONE) || '';\r\n//     if (returnValue) {\r\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n//     }else{\r\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n//     }\r\n//     var args = [];\r\n//     for (var x = 0; x < block.arguments_.length; x++) {\r\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\r\n//           Blockly.Variables.NAME_TYPE);\r\n//     }\r\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n//         branch +    \r\n//         returnValue + '}'; \r\n//     code = Blockly.JavaScript.scrub_(block, code);\r\n//     Blockly.JavaScript.definitions_[funcName] = code;\r\n//     return null;\r\n//   };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Blockly.JavaScript.prefixLines(\r\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \"0\" + ', \\'' + id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n\r\n     if (returnValue) {\r\n         returnValue = '  let $returnValue = ' + returnValue + ';\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return $returnValue;\\n';\r\n     }else{\r\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n' + '  return;\\n';\r\n     }\r\n\r\n\r\n    var args = [];\r\n    for (var i = 0; i < block.arguments_.length; i++) {\r\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n                branch +    \r\n                returnValue + '}';\r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    // Add % so as not to collide with helper functions in definitions list.\r\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\r\n    return null;\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return ' + value + ';\\n';\r\n  } else {\r\n    code += '  return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \r\n        'Expecting string from statement block \"%s\".', block.type);\r\n      if (this.STATEMENT_PREFIX) \r\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'), ' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! New blockly \r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\') ') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  id = id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};\r\n\r\n\r\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\r\n Blockly.Generator.prototype.myBlockToCode = function(block) {\r\n  if (!block || block.disabled) {\r\n    return '';\r\n  }\r\n  this.init(block.workspace);           //  added \r\n  var func = this[block.type];\r\n  var stmt_Prefix = this.STATEMENT_PREFIX;\r\n  this.STATEMENT_PREFIX = null;\r\n  goog.asserts.assertFunction(func,\r\n      'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n      this.name_, block.type);\r\n   var code = func.call(block, block);\r\n  if (goog.isArray(code)) {\r\n       goog.asserts.assert(block.outputConnection,\r\n        'Expecting string from statement block \"%s\".', block.type);\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return this.scrub_(block, code[0]);     // gia na ta kanei ola return san text\r\n  } else if (goog.isString(code)) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    //return code;\r\n    return this.scrub_(block, code);\r\n  } else if (code === null) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return '';\r\n  } else {\r\n    goog.asserts.fail('Invalid code generated: %s', code);\r\n  }\r\n};\r\n\r\n\r\nBlockly.JavaScript.finish=function(a){\r\n  var b=[],c;\r\n  for(c in Blockly.JavaScript.definitions_){\r\n    if(c === \"variables\") continue;\r\n    b.push(Blockly.JavaScript.definitions_[c]);\r\n  }\r\n  delete Blockly.JavaScript.definitions_;\r\n  delete Blockly.JavaScript.functionNames_;\r\n  Blockly.JavaScript.variableDB_.reset();\r\n  return b.join(\"\\n\\n\")+\"\\n\\n\\n\"+a};\r\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\";\\n\"};\r\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\");\r\n  return\"'\"+a+\"'\"\r\n};","import {Blockly_Debugger} from '../../../debugger/debugger.js';\r\n\r\n  Blockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\r\n\r\n\r\n      // Breakpoints\r\n      var breakpointOption = {\r\n        text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n        enabled: true,\r\n        callback: function() {\r\n            if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.includes(block.id)) {\r\n              Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(block.id);\r\n              block.setCollapsed(false);                                  // expand the block if it is collapted \r\n            } else {\r\n              var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.indexOf(block.id);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          }\r\n      };\r\n      menuOptions.push(breakpointOption);\r\n\r\n      // Run to cursor\r\n      var runToCursorOption = {\r\n        text: \"Run to cursor\",\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n        }\r\n      };\r\n      menuOptions.push(runToCursorOption);\r\n\r\n      var watchOption = {\r\n        text:(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \"Add Watch\" : \"Remove Watch\",\r\n        enabled: (block.outputConnection==null) ? false : true,\r\n        callback: function(){\r\n          var code = Blockly.JavaScript.myBlockToCode(block);\r\n          var name = block.toString();\r\n\r\n          var new_watch = {\r\n            \"name\": name,\r\n            \"code\": code, \r\n            \"value\": undefined\r\n          }\r\n          if(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\r\n            Blockly_Debugger.actions[\"Watch\"].getWatches().push(new_watch);\r\n          }else{\r\n            var index = Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\r\n            if (index !== -1) Blockly_Debugger.actions[\"Watch\"].getWatches().splice(index, 1);\r\n          }\r\n          Blockly_Debugger.actions[\"Watch\"].handler();  \r\n        }\r\n      }\r\n      menuOptions.push(watchOption);\r\n\r\n\r\n      // Evaluate\r\n      var evalOption = {\r\n        text: \"Evaluate\",\r\n        enabled: (block.type === \"variables_set\" || block.type===\"math_change\") ? true : false,\r\n        //enabled: true,\r\n        callback: function(){\r\n          //console.log(block);\r\n          Blockly_Debugger.actions[\"Eval\"].handler(Blockly.JavaScript.myBlockToCode(block));  \r\n        }\r\n      };\r\n      menuOptions.push(evalOption);   \r\n    }\r\n\r\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\r\n\r\n\r\n  \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\r\n    Blockly.ContextMenu.currentBlock = this;\r\n  };\r\n\r\n\r\n\r\n\r\n","import '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\naddEventListener(\"updateTable\",function (){\r\n    let variables = Blockly_Debugger.actions[\"Variables\"].getVariables();\r\n    document.getElementById(\"variables\").innerHTML = '';\r\n    for(var i = 0; i<variables.length; ++i){\r\n        document.getElementById(\"variables\").innerHTML += `<tr>\r\n                                                            <td>` + variables[i].name + `</td>\r\n                                                            <td>` +  variables[i].value + `</td>\r\n                                                            <td>` + typeof variables[i].value + `</td>\r\n                                                          </tr>`;\r\n    }\r\n});\r\n\r\n\r\naddEventListener(\"updateWatchesTable\",function (){\r\n    let watches = Blockly_Debugger.actions[\"Watch\"].getWatches();\r\n    document.getElementById(\"watches\").innerHTML = '';\r\n    for(var i = 0; i<watches.length; ++i){\r\n        document.getElementById(\"watches\").innerHTML += `<tr>\r\n                                                            <td>` + watches[i].name + `</td>\r\n                                                            <td>` + watches[i].code + `</td>\r\n                                                            <td>` + watches[i].value + `</td>\r\n                                                            <td>` + typeof watches[i].value + `</td>\r\n                                                        </tr>`;\r\n    }\r\n});","import './events.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\nwindow.workspace = {};\r\n\r\nwindow.workspace[\"blockly1\"] = Blockly.inject('blocklyDiv',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly1\"]);\r\n\r\n\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject('blocklyDiv2',\r\n\t{media: '../../media/',\r\n\t toolbox: document.getElementById('toolbox')});\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';\t \r\n\r\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \r\n\twindow.workspace[\"blockly2\"]);\r\n\r\n\t//Blockly_Debugger.actions[\"Variables\"].init();","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));","\r\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\r\n    var text = [];\r\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\r\n    if (this.collapsed_) {\r\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\r\n    } else {\r\n      for (var i = 0, input; input = this.inputList[i]; i++) {\r\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\r\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\r\n            text.push(emptyFieldPlaceholder);\r\n          } else {\r\n            text.push(field.getText());\r\n          }\r\n        }\r\n        if (input.connection) {\r\n          var child = input.connection.targetBlock();\r\n          if (child) {\r\n              var child_text = child.toString(undefined, opt_emptyToken);\r\n              child_text = \"(\" + child_text + \")\";\r\n            text.push(child_text);\r\n          } else {\r\n            text.push(emptyFieldPlaceholder);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    text = goog.string.trim(text.join(' ')) || '???';\r\n    if (opt_maxLength) {\r\n      // TODO: Improve truncation so that text from this block is given priority.\r\n      // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\r\n      // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\r\n      text = goog.string.truncate(text, opt_maxLength);\r\n    }\r\n    return text;\r\n  };","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\r\n        Blockly.JavaScript.ORDER_MEMBER;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        textOrder) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        // Adjust index if using one-based indices.\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n        var code = text + '.slice(' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'textRandomLetter',\r\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n             '  var x = Math.floor(Math.random() * text.length);',\r\n             '  return text[x];',\r\n             '}']);\r\n        var code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else if (text.match(/^'?\\w+'?$/) ||\r\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\r\n        where2 != 'FROM_END' && where2 != 'LAST')) {\r\n      // If the text is a variable or literal or doesn't require a call for\r\n      // length, don't generate a helper function.\r\n      text = '(' + text + ')';\r\n      switch (where1) {\r\n        case 'FROM_START':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n          break;\r\n        case 'FROM_END':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at1 = text + '.length - ' + at1;\r\n          break;\r\n        case 'FIRST':\r\n          var at1 = '0';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      switch (where2) {\r\n        case 'FROM_START':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\r\n          break;\r\n        case 'FROM_END':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at2 = text + '.length - ' + at2;\r\n          break;\r\n        case 'LAST':\r\n          var at2 = text + '.length';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n    } else {\r\n      text = '(' + text + ')';\r\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\r\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\r\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\r\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n          '(sequence' +\r\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n          // we add it as a parameter.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\r\n          ') {',\r\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\r\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\r\n            '  return sequence.slice(start, end);',\r\n            '}']);\r\n      var code = functionName + '(' + text +\r\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n          // pass it.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\r\n          ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n\r\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\r\n  //   // Change capitalization.\r\n  //   var OPERATORS = {\r\n  //     'UPPERCASE': '.toUpperCase()',\r\n  //     'LOWERCASE': '.toLowerCase()',\r\n  //     'TITLECASE': null\r\n  //   };\r\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\r\n  //   var code;\r\n  //   if (operator) {\r\n  //     // Upper and lower case are functions built into JavaScript.\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n  //     code = '(' + argument0 + ')' + operator;\r\n  //   } else {\r\n  //     // Title case is not a native JavaScript function.  Define one.\r\n  //     var functionName = Blockly.JavaScript.provideFunction_(\r\n  //         'text_toTitleCase',\r\n  //         [ 'function ' +\r\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\r\n  //           '  return str.replace(/\\\\S+/g,',\r\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n  //               'txt.substring(1).toLowerCase();});',\r\n  //           '}']);\r\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n  //         Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\r\n  //   }\r\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  // };\r\n\r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\r\n        Blockly.JavaScript.ORDER_NONE;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        textOrder) || '\\'\\'';\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var code = '(' + text + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'textToTitleCase',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(str) {',\r\n           '  return str.replace(/\\\\S+/g,',\r\n           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n              'txt.substring(1).toLowerCase();});',\r\n           '}']);\r\n      var code = functionName + '(' + '(' + text + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\r\n\r\n\r\n"],"sourceRoot":""}