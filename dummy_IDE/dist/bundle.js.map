{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../debugger/init.js","webpack:///../debugger/actions/continue.js","webpack:///../debugger/actions/step.js","webpack:///../debugger/actions/stop.js","webpack:///../debugger/actions/watches.js","webpack:///../debugger/actions/start.js","webpack:///../debugger/actions/breakpoints.js","webpack:///../generator/blockly/blockly_init.js","webpack:///../generator/blockly/generator/lists.js","webpack:///../generator/blockly/generator/procedures.js","webpack:///../generator/blockly/core/generator.js","webpack:///../generator/blockly/core/breakpoint.js","webpack:///../generator/blockly/core/block_svg.js","webpack:///./events.js","webpack:///./init_blockly.js","webpack:///./index.js","webpack:///../generator/blockly/core/block.js","webpack:///../generator/blockly/generator/text.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Debuggee_Worker","instance","dispatcher","hasInstance","undefined","Instance","Worker","msg","window","alert","postMessage","type","data","prompt","workspace","CurrentSystemEditorId","traceOn_","highlightBlock","id","document","getElementById","innerHTML","onmessage","obj","Stop","terminate","AddOnDispacher","event","callback","Blockly_Debugger","actions","handler","breakpoints","map","reset_view","block_id","variables","update","new_vars","length","change","dispatchEvent","Event","getVariables","init","workspace_vars","getAllVariables","variable","variables_names","j","includes","nvar","push","watches","new_watches","getWatches","menuOption","block","text","toString","enabled","outputConnection","index","indexOf","splice","new_watch","code","Blockly","JavaScript","myBlockToCode","expr","cursorBreakpoint","STATEMENT_PREFIX","code1","workspaceToCode","code2","MouseEvent","enable","console","log","wait_view","getBlockById","setCollapsed","parentBlock_","style","stroke","fill","disable","icon","myDisable","new_br","Breakpoint_Icon","disableMenuOption","generation","nest","currentSystemEditorId","valueToCode","ORDER_MEMBER","ORDER_LOGICAL_NOT","operator","getFieldValue","item","ORDER_NONE","options","oneBasedIndex","ORDER_ADDITION","ORDER_FUNCTION_CALL","mode","where","listOrder","ORDER_COMMA","list","at","getAdjusted","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","Variables","NAME_TYPE","ORDER_SUBTRACTION","xVar","input","delimiter","functionName","direction","funcName","getName","Procedures","branch","statementToCode","replace","prefixLines","INDENT","INFINITE_LOOP_TRAP","returnValue","args","arguments_","join","scrub_","definitions_","x","hasReturnValue_","Generator","blockToCode","disabled","this","getNextBlock","func","goog","asserts","assertFunction","name_","my_nest","isArray","assert","isString","fail","addLoopTrap","warn","getMainWorkspace","blocks","getTopBlocks","systemEditorId","line","scrubNakedValue","finish","stmt_Prefix","myscrub_","a","b","targetConnection","getCommentText","utils","wrap","COMMENT_WRAP","getProcedureDef","e","inputList","INPUT_VALUE","connection","targetBlock","allNestedComments","functionNames_","reset","quote_","breakpoint_Breakpoint_Icon","Icon","createIcon","create","width_","height_","drawIcon_","group","createSvgElement","class","block_","cx","cy","setVisible","visible","isEnable","dom","removeNode","iconGroup_","createElementNS","SVG_NS","setAttribute","body","runtimeStyle","currentStyle","appendChild","BlockSvg","showContextMenu_","readOnly","contextMenu","menuOptions","isDeletable","isMovable","isInFlyout","ContextMenu","blockDuplicateOption","isEditable","collapsed_","comments","blockCommentOption","NEXT_STATEMENT","inlineOption","isInline","getInputsInline","Msg","setInputsInline","collapse","expandOption","collapseOption","disableOption","getInheritedDisabled","setDisabled","blockDeleteOption","breakpointOption","block___","blockHelpOption","customContextMenu","show","RTL","currentBlock","addEventListener","red_style","key","toUpperCase","preventDefault","output","Xml","workspaceToDom","childNodes","forEach","localName","outerHTML","inject","media","toolbox","domToText","domToWorkspace","onclick","Block","opt_maxLength","opt_emptyToken","emptyFieldPlaceholder","getInput","fieldRow","text_","field","FieldDropdown","getValue","getText","child","child_text","string","trim","truncate","argument0","textOrder","where1","where2","at1","at2","getIndex_","wherePascalCase","FIRST","LAST","FROM_START","FROM_END","UPPERCASE","LOWERCASE","TITLECASE","LEFT","RIGHT","BOTH","getField"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export var Debuggee_Worker = (function (){\r\n\tvar instance;\r\n\tvar dispatcher = {};\r\n\t  \r\n\tfunction getInstance(){\r\n\t\tif(instance === undefined){\r\n\t\t\tinstance = new Worker(\"./dist/debuggee.js\");\t // to path apo to localhost kai oxi apo edw\r\n\t\t\tinitDispacher();\r\n\t\t\tinstance.onmessage = function(msg) {\r\n                let obj = msg.data;\r\n                let data = obj.data;\r\n                dispatcher[obj.type](data);\r\n            };\r\n\t\t}\t\t\r\n\treturn instance;\t\r\n\t}\r\n\r\n\tfunction Stop(){\r\n\t\tif(!hasInstance()) return;\r\n\t\tinstance.terminate();\r\n\t\tinstance = undefined;\r\n\t}\r\n\r\n\tfunction AddOnDispacher(event, callback){\r\n\t\tdispatcher[event] = callback;\r\n\t}\r\n\r\n\r\n\tfunction hasInstance(){\r\n\t \tif(instance === undefined) return false;\r\n\t \telse return true;\r\n\t}\r\n\r\n\tfunction initDispacher(){\r\n\t\tdispatcher[\"alert\"] = (msg) => {\r\n\t\t\t\t\twindow.alert(msg);\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"alert\",\"data\": \"\"});\r\n\t\t\t\t};\r\n\t\tdispatcher[\"prompt\"] = (msg) => {\r\n\t\t\t\t\tDebuggee_Worker.Instance().postMessage({\"type\":\"prompt\",\"data\": window.prompt(msg)}); \t\t\t\t\t\r\n\t\t\t\t};\r\n\t\tdispatcher[\"highlightBlock\"] = (data) => {\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\r\n\t\t\t\t\t\t\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\r\n\t\t\t\t}; \t\t\t\t\t\t\r\n\t\tdispatcher[\"execution_finished\"] = () => {\r\n\t\t\t\t\tinstance = undefined;\r\n\t\t\t\t\tdocument.getElementById(\"val_table\").innerHTML = '';\r\n\t\t\t\t};\t\t\r\n\t};\r\n\r\n\treturn {\r\n\t\tInstance : getInstance,\r\n\t\tStop: Stop,\r\n\t\tAddOnDispacher: AddOnDispacher,\r\n\t\thasInstance: hasInstance\r\n\t};\r\n\r\n})();\r\n\r\nexport var Blockly_Debugger = {};\r\nBlockly_Debugger.actions = {};\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Continue\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Continue\"].handler = () => {\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"continue\"});\r\n}","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"StepIn\"] = {}; \r\nBlockly_Debugger.actions[\"StepOver\"] = {};\r\nBlockly_Debugger.actions[\"StepParent\"] = {};\r\nBlockly_Debugger.actions[\"StepOut\"] = {}; \r\n\r\nBlockly_Debugger.actions[\"StepIn\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepIn\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOver\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOver\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepParent\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepParent\"});\r\n}\r\n\r\nBlockly_Debugger.actions[\"StepOut\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"stepOut\"});\r\n}","import { Debuggee_Worker, Blockly_Debugger} from \"../init.js\";\r\n\r\nBlockly_Debugger.actions[\"Stop\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Stop\"].handler = () => {\r\n    Debuggee_Worker.Stop();\r\n    document.getElementById(\"val_table\").innerHTML = '';\r\n    Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{Blockly_Debugger.actions[\"Breakpoint\"].reset_view(obj.block_id)}); \r\n    // remove hilighting \r\n    window.workspace[\"blockly1\"].traceOn_ = true;\r\n    window.workspace[\"blockly1\"].highlightBlock(\"\");\r\n    window.workspace[\"blockly2\"].traceOn_ = true;\r\n    window.workspace[\"blockly2\"].highlightBlock(\"\");\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = {};\r\nBlockly_Debugger.actions[\"Watch\"] = {};\r\nBlockly_Debugger.actions[\"Eval\"] = {};\r\n\r\n// Variables\r\n\r\nBlockly_Debugger.actions[\"Variables\"] = (function(){\r\n    var variables = [];\r\n\r\n    function handler() {};     \r\n\r\n    function update(new_vars){\r\n        for(var i= 0; i < variables.length; ++i){\r\n            if(variables[i].value !== new_vars[i].value){\r\n                variables[i].value = new_vars[i].value;\r\n                variables[i].change = true;\r\n            }else{\r\n                variables[i].change = false;\r\n            }\r\n\r\n        }\r\n        //variables = new_vars;\r\n        dispatchEvent(new Event(\"updateTable\"));\r\n    };\r\n    \r\n    function getVariables(){\r\n        return variables;\r\n    };\r\n\r\n    function init(){\r\n        var workspace_vars = [];\r\n        workspace_vars[0] = window.workspace[\"blockly1\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n        workspace_vars[1] = window.workspace[\"blockly2\"].getAllVariables().map((variable) => {\r\n            return variable.name;\r\n        });\r\n\r\n        for(var i = 0; i<workspace_vars.length; i++){\r\n            var variables_names =  variables.map((variable) => {\r\n                return variable.name;\r\n            });   \r\n            for(var j = 0; j<workspace_vars[i].length; ++j){\r\n                if(variables_names.includes(workspace_vars[i][j])) continue;\r\n                var nvar = {\r\n                    \"name\" : workspace_vars[i][j],\r\n                    \"value\" : undefined,\r\n                    \"change\": false\r\n                }\r\n                variables.push(nvar);\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        update : update,\r\n        getVariables : getVariables,\r\n        init : init   \r\n    }\r\n})();\r\n\r\n\r\n\r\n// Watches\r\n\r\nBlockly_Debugger.actions[\"Watch\"] = (function(){\r\n    var watches = [];\r\n    \r\n    function handler(){\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n        if(!Debuggee_Worker.hasInstance()) return; \r\n        Debuggee_Worker.Instance().postMessage({\"type\":\"watch\", \"data\": watches});\r\n    }\r\n\r\n    function update(new_watches){\r\n        for(var i= 0; i < watches.length; ++i){\r\n            if(watches[i].value !== new_watches[i].value){\r\n                watches[i].value = new_watches[i].value;\r\n                watches[i].change = true;\r\n            }else{\r\n                watches[i].change = false;\r\n            }\r\n\r\n        }\r\n        //watches = new_watches;\r\n        dispatchEvent(new Event(\"updateWatchesTable\"));\r\n    };\r\n    \r\n    function getWatches(){\r\n        return watches;\r\n    }\r\n\r\n    function init(){\r\n        for(var i=0; i<watches.length; ++i){\r\n            watches[i].value = undefined;\r\n        }\r\n    }\r\n\r\n    function menuOption(block){\r\n        var watchOption = {\r\n            text:(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \"Add Watch\" : \"Remove Watch\",\r\n            enabled: (block.outputConnection==null) ? false : true,\r\n            callback: function(){\r\n              var name = block.toString();\r\n  \r\n              if(!Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\r\n                var code = Blockly.JavaScript.myBlockToCode(block);\r\n                var new_watch = {\r\n                  \"name\": name,\r\n                  \"code\": code, \r\n                  \"value\": undefined\r\n                }\r\n                Blockly_Debugger.actions[\"Watch\"].getWatches().push(new_watch);\r\n              }else{\r\n                var index = Blockly_Debugger.actions[\"Watch\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\r\n                if (index !== -1) Blockly_Debugger.actions[\"Watch\"].getWatches().splice(index, 1);\r\n              }\r\n              Blockly_Debugger.actions[\"Watch\"].handler();  \r\n            }\r\n          };\r\n          return watchOption;\r\n    }\r\n\r\n\r\n    return {\r\n        handler : handler,\r\n        update : update,\r\n        getWatches : getWatches,\r\n        init : init ,  \r\n        menuOption : menuOption        \r\n    }\r\n})();\r\n\r\n\r\n\r\n\r\n// Eval \r\n\r\nBlockly_Debugger.actions[\"Eval\"].handler = function (expr){\r\n    if(!Debuggee_Worker.hasInstance()) return;\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"eval\", \"data\": expr});\r\n}\r\n\r\nBlockly_Debugger.actions[\"Eval\"].menuOption = function (block){\r\n    var evalOption = {\r\n        text: \"Evaluate\",\r\n        enabled: (block.type === \"variables_set\" || block.type===\"math_change\") ? true : false,\r\n        callback: function(){\r\n          Blockly_Debugger.actions[\"Eval\"].handler(Blockly.JavaScript.myBlockToCode(block));  \r\n        }\r\n    };\r\n    return evalOption;\r\n}\r\n\r\n\r\n\r\nDebuggee_Worker.AddOnDispacher(\"watches\", Blockly_Debugger.actions[\"Watch\"].update);\r\nDebuggee_Worker.AddOnDispacher(\"variables\", Blockly_Debugger.actions[\"Variables\"].update);","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\nimport './watches.js';\r\n\r\nBlockly_Debugger.actions[\"Start\"] = {};\r\n\r\nBlockly_Debugger.actions[\"Start\"].handler = (cursorBreakpoint) => {\r\n    if(Debuggee_Worker.hasInstance()) return;\r\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\n';\r\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly1\"]);\r\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\"blockly2\"]); \r\n    var code = code1 + code2;\r\n    \r\n    Blockly_Debugger.actions[\"Variables\"].init();\r\n    Blockly_Debugger.actions[\"Watch\"].init();\r\n\r\n    document.getElementById(\"val_table\").innerHTML = `  <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Variables  \r\n                                                            <!--i class=\"fa fa-bars\"></i-->\r\n                                                            </div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Value</th> \r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n\r\n                                                            </table>\r\n                                                            <table id=\"variables\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"watch\">\r\n                                                            <div class=\"title\">&nbsp;Watches</div>\r\n                                                            <div class=\"watch-content\">\r\n                                                            <table style=\"width:100%\">\r\n                                                            <tr>\r\n                                                                <th>Name</th>\r\n                                                                <th>Code</th> \r\n                                                                <th>Value</th>\r\n                                                                <th>Type</th>\r\n                                                            </tr>     \r\n                                                            </table>\r\n                                                            <table id=\"watches\" style=\"width:100%\"></table>\r\n                                                        </div>\r\n                                                        </div>`;\r\n\r\n    \r\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \"\";\r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"start_debugging\", \"data\": {\"code\": code, \r\n                                                                               \"breakpoints\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return { \"block_id\" : obj.block_id,\r\n                                                                                                                                                                      \"enable\" : obj.enable}}),\r\n                                                                               \"cursorBreakpoint\": cursorBreakpoint,\r\n                                                                               \"watches\": Blockly_Debugger.actions[\"Watch\"].getWatches(),\r\n                                                                               \"variables\": Blockly_Debugger.actions[\"Variables\"].getVariables()\r\n                                                                            }});\r\n    console.log(code1 + code2);\r\n}\r\n","import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"] = {};\r\nBlockly_Debugger.actions[\"RunToCursor\"] = {};\r\n\r\n\r\n// Breakpoints\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].breakpoints = [];\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].handler = () => {\r\n    if(!Debuggee_Worker.hasInstance()) return; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].wait_view = (block_id) => {\r\n    var CurrentSystemEditorId = window.workspace[\"blockly1\"].getBlockById(block_id) ? \"blockly1\" : \"blockly2\";\r\n    var block = window.workspace[CurrentSystemEditorId].getBlockById(block_id);\r\n    while(block!=null){\r\n        block.setCollapsed(false);\r\n        block = block.parentBlock_;\r\n    }\r\n    window.workspace[CurrentSystemEditorId].traceOn_ = true;                // hilighting (gt den kanei an einai collapsed)\r\n    window.workspace[CurrentSystemEditorId].highlightBlock(block_id);\r\n    \r\n    document.getElementById(block_id).style.stroke = 'red';\r\n    document.getElementById(block_id).style.fill = 'yellow';\r\n    document.getElementById(block_id).style['stroke-width'] = '5px';\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].reset_view = (block_id) =>{\r\n    document.getElementById(block_id).style.stroke = 'yellow';\r\n    document.getElementById(block_id).style.fill = 'red';\r\n    document.getElementById(block_id).style['stroke-width'] = '1px';\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].disable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.stroke = 'yellow';\r\n        document.getElementById(block_id).style.fill = '#FA8258';\r\n        document.getElementById(block_id).style['stroke-width'] = '1px';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = false;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].enable = (block_id) =>{\r\n    var i = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\r\n    if(i!=-1){\r\n        document.getElementById(block_id).style.fill = 'red';\r\n        Blockly_Debugger.actions[\"Breakpoint\"].breakpoints[i].enable = true;\r\n        if(Debuggee_Worker.hasInstance()) \r\n            Debuggee_Worker.Instance().postMessage({\"type\":\"breakpoint\", \"data\": Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return {\"block_id\" : obj.block_id,\r\n                                                                                                                                                \"enable\" : obj.enable}}),});\r\n    }\r\n}\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].menuOption = (block) => {\r\n    var breakpointOption = {\r\n        text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n        enabled: true,\r\n        callback: function() {\r\n            if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\r\n              var new_br = {\r\n                \"block_id\" : block.id,\r\n                \"enable\" : true,\r\n                \"icon\" : new Breakpoint_Icon(block),\r\n                \"change\": false\r\n              }\r\n              Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(new_br);\r\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\r\n            }\r\n            else{\r\n              var icon = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\r\n              icon[0].myDisable();\r\n              var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          }\r\n      };\r\n      return breakpointOption;\r\n}\r\n\r\n\r\nBlockly_Debugger.actions[\"Breakpoint\"].disableMenuOption = (block) => {\r\n    var DisableBreakpointOption = {\r\n        text: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \"Disable Breakpoint\" : \"Enable Breakpoint\",\r\n        enabled: (Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? true : false,\r\n        callback: function() {\r\n          if(Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\r\n            Blockly_Debugger.actions[\"Breakpoint\"].disable(block.id);\r\n          else\r\n            Blockly_Debugger.actions[\"Breakpoint\"].enable(block.id);\r\n        }\r\n      };\r\n      return DisableBreakpointOption;\r\n}\r\n\r\n\r\n\r\n\r\n// Run to Cursor\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].handler = (block_id) => {\r\n    if(!Debuggee_Worker.hasInstance()) {\r\n        Blockly_Debugger.actions[\"Start\"].handler(block_id);\r\n        return;\r\n    }; \r\n    Debuggee_Worker.Instance().postMessage({\"type\":\"runToCursor\", \"data\": block_id});\r\n}\r\n\r\nBlockly_Debugger.actions[\"RunToCursor\"].menuOption = (block) =>{\r\n    var runToCursorOption = {\r\n        text: \"Run to cursor\",\r\n        enabled: true,\r\n        callback: function() {\r\n          Blockly_Debugger.actions[\"RunToCursor\"].handler(block.id);\r\n        }\r\n    };\r\n    return runToCursorOption;\r\n}\r\n\r\n\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_wait_view\", Blockly_Debugger.actions[\"Breakpoint\"].wait_view);\r\nDebuggee_Worker.AddOnDispacher(\"breakpoint_reset_view\", Blockly_Debugger.actions[\"Breakpoint\"].reset_view);\r\n","export var generation = {\r\n    nest : -1,\r\n    currentSystemEditorId: null\r\n}","'use strict';\r\nimport {generation} from '../blockly_init.js'\r\n\r\nBlockly.JavaScript['lists_length'] = function(block) {\r\n    // String or array length.\r\n    // old blockly\r\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \r\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n\r\n\r\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\r\n    // Find an item in the list.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\r\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\nBlockly.JavaScript['lists_getIndex'] = function(block) {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  var mode = block.getFieldValue('MODE') || 'GET';\r\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\r\n      Blockly.JavaScript.ORDER_MEMBER;\r\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  list = '(' + list + ')';\r\n  switch (where) {\r\n    case ('FIRST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.shift()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case ('LAST'):\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(-1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.pop()';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case ('FROM_START'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n      if (mode == 'GET') {\r\n        var code = list + '[' + at + ']';\r\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    case ('FROM_END'):\r\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n      if (mode == 'GET') {\r\n        var code = list + '.slice(' + at + ')[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'GET_REMOVE') {\r\n        var code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    case ('RANDOM'):\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'listsGetRandomItem',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(list, remove) {',\r\n           '  var x = Math.floor(Math.random() * list.length);',\r\n           '  if (remove) {',\r\n           '    return list.splice(x, 1)[0];',\r\n           '  } else {',\r\n           '    return list[x];',\r\n           '  }',\r\n           '}']);\r\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\r\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      } else if (mode == 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n  }\r\n  throw 'Unhandled combination (lists_getIndex).';\r\n};\r\n\r\n\r\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\r\n    // Set element at index.\r\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\r\n    var mode = block.getFieldValue('MODE') || 'GET';\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\r\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    // Closure, which accesses and modifies 'list'.\r\n\r\n    list = '(' + list + ')';\r\n    function cacheList() {\r\n      if (list.match(/^\\w+$/)) {\r\n        return '';\r\n      }\r\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n          'tmpList', Blockly.Variables.NAME_TYPE);\r\n      var code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n      list = listVar;\r\n      return code;\r\n    }\r\n    switch (where) {\r\n      case ('FIRST'):\r\n        if (mode == 'SET') {\r\n          return list + '[0] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.unshift(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('LAST'):\r\n        if (mode == 'SET') {\r\n          var code = cacheList();\r\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.push(' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_START'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        if (mode == 'SET') {\r\n          return list + '[' + at + '] = ' + value + ';\\n';\r\n        } else if (mode == 'INSERT') {\r\n          return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n        }\r\n        break;\r\n      case ('FROM_END'):\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\r\n            Blockly.JavaScript.ORDER_SUBTRACTION);\r\n        var code = cacheList();\r\n        if (mode == 'SET') {\r\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\r\n              ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n      case ('RANDOM'):\r\n        var code = cacheList();\r\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\r\n            'tmpX', Blockly.Variables.NAME_TYPE);\r\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\r\n            '.length);\\n';\r\n        if (mode == 'SET') {\r\n          code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n          return code;\r\n        } else if (mode == 'INSERT') {\r\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n          return code;\r\n        }\r\n        break;\r\n    }\r\n    throw 'Unhandled combination (lists_setIndex).';\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['lists_split'] = function(block) {\r\n    // Block for splitting text into a list, or joining a list into text.\r\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\r\n        Blockly.JavaScript.ORDER_MEMBER);\r\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var mode = block.getFieldValue('MODE');\r\n    if (mode == 'SPLIT') {\r\n      if (!input) {\r\n        input = '\\'\\'';\r\n      }\r\n      var functionName = 'split';\r\n    } else if (mode == 'JOIN') {\r\n      if (!input) {\r\n        input = '[]';\r\n      }\r\n      var functionName = 'join';\r\n    } else {\r\n      throw 'Unknown mode: ' + mode;\r\n    }\r\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['lists_reverse'] = function(block) {\r\n    // Block for reversing a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var code = '(' + list + ')' + '.slice().reverse()';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['lists_sort'] = function(block) {\r\n    // Block for sorting a list.\r\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\r\n    var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n    var type = block.getFieldValue('TYPE');\r\n    var getCompareFunctionName = Blockly.JavaScript.provideFunction_(\r\n        'listsGetSortCompare',\r\n        ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n            '(type, direction) {',\r\n         '  var compareFuncs = {',\r\n         '    \"NUMERIC\": function(a, b) {',\r\n         '        return parseFloat(a) - parseFloat(b); },',\r\n         '    \"TEXT\": function(a, b) {',\r\n         '        return a.toString() > b.toString() ? 1 : -1; },',\r\n         '    \"IGNORE_CASE\": function(a, b) {',\r\n         '        return a.toString().toLowerCase() > ' +\r\n            'b.toString().toLowerCase() ? 1 : -1; },',\r\n         '  };',\r\n         '  var compare = compareFuncs[type];',\r\n         '  return function(a, b) { return compare(a, b) * direction; }',\r\n         '}']);\r\n    return ['(' + list + ')' + '.slice().sort(' +\r\n        getCompareFunctionName + '(\"' + type + '\", ' + direction + '))',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };","import {generation} from '../blockly_init.js'\r\n\r\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\r\n    // Define a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\r\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Blockly.JavaScript.prefixLines(\r\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \"0\" + ', \\'' + id + '\\', \\'' + generation.currentSystemEditorId + '\\')'\r\n        ), Blockly.JavaScript.INDENT) + branch ;\r\n    }\r\n\r\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\r\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n          '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\r\n        Blockly.JavaScript.ORDER_NONE) || '';\r\n\r\n    if(returnValue)\r\n        returnValue = '  return Blockly_Debuggee.function_return_decorator(' + returnValue + ', caller_nest);\\n';\r\n    else\r\n        returnValue = '  return Blockly_Debuggee.function_return_decorator( \\'\\', caller_nest);\\n';\r\n\r\n    var args = [];\r\n    for (var i = 0; i < block.arguments_.length; i++) {\r\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\r\n          Blockly.Variables.NAME_TYPE);\r\n    }\r\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\n' +  \r\n                '  let caller_nest = Blockly_Debuggee.state.currNest;\\n' + \r\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n' +\r\n                branch +    \r\n                returnValue + '}';\r\n    code = Blockly.JavaScript.scrub_(block, code);\r\n    // Add % so as not to collide with helper functions in definitions list.\r\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\r\n    return null;\r\n  };\r\n\r\n\r\n  Blockly.JavaScript['procedures_defnoreturn'] =\r\n  Blockly.JavaScript['procedures_defreturn'];\r\n\r\n\r\n// function call \r\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\r\n    // Call a procedure with a return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ')';\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\r\n    // Call a procedure with no return value.\r\n    var funcName = Blockly.JavaScript.variableDB_.getName(\r\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\r\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\r\n    }\r\n    var code = \"await \" + funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n  };\r\n\r\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\r\n  // Conditionally return value from a procedure.\r\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\r\n      Blockly.JavaScript.ORDER_NONE) || 'false';\r\n  var code = 'if (' + condition + ') {\\n';\r\n  if (block.hasReturnValue_) {\r\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_NONE) || 'null';\r\n    code += '  return Blockly_Debuggee.function_return_decorator(' + value + ', caller_nest);\\n';\r\n  } else {\r\n    code += '  return Blockly_Debuggee.function_return_decorator(\\'\\', caller_nest);\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n};\r\n","import {generation} from '../blockly_init.js'\r\n\r\nBlockly.Generator.prototype.blockToCode = function(block) {\r\n    if (!block) {\r\n      return '';\r\n    }\r\n    if (block.disabled) {\r\n      // Skip past this block if it is disabled.\r\n      return this.blockToCode(block.getNextBlock());\r\n    }\r\n  \r\n    var func = this[block.type];\r\n    goog.asserts.assertFunction(func,\r\n        'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n        this.name_, block.type);\r\n    // First argument to func.call is the value of 'this' in the generator.\r\n    // Prior to 24 September 2013 'this' was the only way to access the block.\r\n    // The current prefered method of accessing the block is through the second\r\n    // argument to func.call, which becomes the first parameter to the generator.\r\n    var my_nest = ++generation.nest;\r\n    var code = func.call(block, block);\r\n    generation.nest--;\r\n    if (goog.isArray(code)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \r\n        'Expecting string from statement block \"%s\".', block.type);\r\n      if (this.STATEMENT_PREFIX) \r\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\'), ' + code[0] + ')';\r\n      return [this.scrub_(block, code[0]), code[1]];\r\n    } else if (goog.isString(code)) {\r\n      var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! New blockly \r\n      if (this.STATEMENT_PREFIX) {\r\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\'' + block.id + '\\', \\''+ generation.currentSystemEditorId + '\\') ') +\r\n            code;\r\n      }\r\n      return this.scrub_(block, code);\r\n    } else if (code === null) {\r\n      // Block has handled code generation itself.\r\n      return '';\r\n    } else {\r\n      goog.asserts.fail('Invalid code generated: %s', code);\r\n    }\r\n  };\r\n\r\n\r\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\r\n  id = id.replace(/\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \r\n  if (this.INFINITE_LOOP_TRAP) {\r\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'' + id + '\\'') + branch;\r\n  }\r\n  if (this.STATEMENT_PREFIX) {\r\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\'' + id + '\\', \\''+ generation.currentSystemEditorId + '\\')'), this.INDENT);\r\n  }\r\n  return branch;\r\n};\r\n\r\n\r\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\r\n  if (!workspace) {\r\n    // Backwards compatability from before there could be multiple workspaces.\r\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\r\n    workspace = Blockly.getMainWorkspace();\r\n  }\r\n  var code = [];\r\n  this.init(workspace);\r\n  var blocks = workspace.getTopBlocks(true);\r\n  generation.currentSystemEditorId = workspace.systemEditorId;\r\n  var line = \"\\n// start source code of another editor\\n\";\r\n  // var line = \"\\n// start source code of another editor\\nCurrentSystemEditorId = '\" + workspace.systemEditorId + \"';\\n\";\r\n  code.push(line);\r\n  for (var x = 0, block; block = blocks[x]; x++) {\r\n    line = this.blockToCode(block);\r\n    if (goog.isArray(line)) {\r\n      // Value blocks return tuples of code and operator order.\r\n      // Top-level blocks don't care about operator order.\r\n      line = line[0];\r\n    }\r\n    if (line) {\r\n      if (block.outputConnection && this.scrubNakedValue) {\r\n        // This block is a naked value.  Ask the language's code generator if\r\n        // it wants to append a semicolon, or something.\r\n        line = this.scrubNakedValue(line);\r\n      }\r\n      code.push(line);\r\n    }\r\n  }\r\n  code = code.join('\\n');  // Blank line between each section.\r\n  code = this.finish(code);\r\n  // Final scrubbing of whitespace.\r\n  code = code.replace(/^\\s+\\n/, '');\r\n  code = code.replace(/\\n\\s+$/, '\\n');\r\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\r\n  return code;\r\n};\r\n\r\n\r\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\r\n Blockly.Generator.prototype.myBlockToCode = function(block) {\r\n  if (!block || block.disabled) {\r\n    return '';\r\n  }\r\n  this.init(block.workspace);           //  added \r\n  var func = this[block.type];\r\n  var stmt_Prefix = this.STATEMENT_PREFIX;\r\n  this.STATEMENT_PREFIX = null;\r\n  goog.asserts.assertFunction(func,\r\n      'Language \"%s\" does not know how to generate code for block type \"%s\".',\r\n      this.name_, block.type);\r\n   var code = func.call(block, block);\r\n  if (goog.isArray(code)) {\r\n       goog.asserts.assert(block.outputConnection,\r\n        'Expecting string from statement block \"%s\".', block.type);\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\r\n  } else if (goog.isString(code)) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    //return code;\r\n    return this.myscrub_(block, code);\r\n  } else if (code === null) {\r\n    this.STATEMENT_PREFIX = stmt_Prefix;\r\n    return '';\r\n  } else {\r\n    goog.asserts.fail('Invalid code generated: %s', code);\r\n  }\r\n};\r\n\r\n\r\nBlockly.JavaScript.myscrub_=function(a,b){\r\n  var c=\"\";\r\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\r\n    var d=a.getCommentText();\r\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\"/**\\n\"+Blockly.JavaScript.prefixLines(d+\"\\n\",\" * \")+\" */\\n\"):c+Blockly.JavaScript.prefixLines(d+\"\\n\",\"// \"));\r\n    for(var e=0;e<a.inputList.length;e++)\r\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\"// \"))\r\n  }\r\n  return c+b;\r\n}\r\n\r\n\r\nBlockly.JavaScript.finish=function(a){\r\n  var b=[],c;\r\n  for(c in Blockly.JavaScript.definitions_){\r\n    if(c === \"variables\") continue;\r\n    b.push(Blockly.JavaScript.definitions_[c]);\r\n  }\r\n  delete Blockly.JavaScript.definitions_;\r\n  delete Blockly.JavaScript.functionNames_;\r\n  Blockly.JavaScript.variableDB_.reset();\r\n  return b.join(\"\\n\\n\")+\"\\n\\n\\n\"+a};\r\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\";\\n\"};\r\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\");\r\n  return\"'\"+a+\"'\"\r\n};\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\n\r\n\r\nexport var Breakpoint_Icon = function(block) {\r\n    Blockly.Icon.call(this, block);\r\n    this.createIcon();\r\n  };\r\n\r\n  Breakpoint_Icon.prototype = Object.create(Blockly.Icon.prototype);\r\n  Breakpoint_Icon.prototype.width_ = 160;\r\n  Breakpoint_Icon.prototype.height_ = 80;\r\n\r\n  Breakpoint_Icon.prototype.drawIcon_ = function(group) {\r\n    Blockly.utils.createSvgElement('circle',\r\n        {'class': 'breakpoint_enable', 'id' : this.block_.id, 'r': '6', 'cx': '8', 'cy': '8'},\r\n        group); \r\n        \r\n  }\r\n\r\n\r\n  Breakpoint_Icon.prototype.setVisible = function (visible){\r\n    var isEnable = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id==this.block_.id) return obj.enable;});\r\n    console.log(isEnable);\r\n    if(isEnable[0]){\r\n      Blockly_Debugger.actions[\"Breakpoint\"].disable(this.block_.id);\r\n    }else {\r\n      this.myDisable();\r\n      var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(this.block_.id);\r\n      if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n    }\r\n}\r\n  \r\nBreakpoint_Icon.prototype.myDisable = function (){\r\n  goog.dom.removeNode(this.iconGroup_);  \r\n  this.iconGroup_=null;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------     \r\n\r\nBlockly.utils.createSvgElement=function(a,b,c){\r\n  a=document.createElementNS(Blockly.SVG_NS,a);\r\n  for(var d in b)a.setAttribute(d,b[d]);\r\n  document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);\r\n  c&&c.appendChild(a);\r\n  return a;\r\n}\r\n","import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\r\nimport {Breakpoint_Icon} from './breakpoint.js';\r\n\r\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\r\n    if (this.workspace.options.readOnly || !this.contextMenu) {\r\n      return;\r\n    }\r\n    // Save the current block in a variable for use in closures.\r\n    var block = this;\r\n    var menuOptions = [];\r\n  \r\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\r\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\r\n      if (this.isEditable() && !this.collapsed_ &&\r\n          this.workspace.options.comments) {\r\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\r\n      }\r\n  \r\n      // Option to make block inline.\r\n      if (!this.collapsed_) {\r\n        for (var i = 1; i < this.inputList.length; i++) {\r\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\r\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\r\n            // Only display this option if there are two value or dummy inputs\r\n            // next to each other.\r\n            var inlineOption = {enabled: true};\r\n            var isInline = this.getInputsInline();\r\n            inlineOption.text = isInline ?\r\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\r\n            inlineOption.callback = function() {\r\n              block.setInputsInline(!isInline);\r\n            };\r\n            menuOptions.push(inlineOption);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.collapse) {\r\n        // Option to collapse/expand block.\r\n        if (this.collapsed_) {\r\n          var expandOption = {enabled: true};\r\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\r\n          expandOption.callback = function() {\r\n            block.setCollapsed(false);\r\n          };\r\n          menuOptions.push(expandOption);\r\n        } else {\r\n          var collapseOption = {enabled: true};\r\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\r\n          collapseOption.callback = function() {\r\n            block.setCollapsed(true);\r\n          };\r\n          menuOptions.push(collapseOption);\r\n        }\r\n      }\r\n  \r\n      if (this.workspace.options.disable) {\r\n        // Option to disable/enable block.\r\n        var disableOption = {\r\n          text: this.disabled ?\r\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\r\n          enabled: !this.getInheritedDisabled(),\r\n          callback: function() {\r\n            block.setDisabled(!block.disabled);\r\n          }\r\n        };\r\n        menuOptions.push(disableOption);\r\n      }\r\n  \r\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\r\n\r\n      //\r\n      var breakpointOption = {\r\n        text: (!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \"Add Breakpoint\" : \"Remove Breakpoint\",\r\n        enabled: true,\r\n        callback: function() {\r\n            if(!Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\r\n              var new_br = {\r\n                \"block_id\" : block.id,\r\n                \"enable\" : true,\r\n                \"icon\" : new Breakpoint_Icon(block),\r\n                \"change\": false\r\n              }\r\n              Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.push(new_br);\r\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\r\n            }\r\n            else{\r\n              var icon = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\r\n              icon[0].myDisable();\r\n              var index = Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\r\n              if (index !== -1) Blockly_Debugger.actions[\"Breakpoint\"].breakpoints.splice(index, 1);\r\n            }\r\n            Blockly_Debugger.actions[\"Breakpoint\"].handler();\r\n          }\r\n      };\r\n      menuOptions.push(breakpointOption);\r\n      // menuOptions.push(Blockly_Debugger.actions[\"Breakpoint\"].menuOption(block));\r\n      menuOptions.push(Blockly_Debugger.actions[\"Breakpoint\"].disableMenuOption(block));\r\n      menuOptions.push(Blockly_Debugger.actions[\"RunToCursor\"].menuOption(block));\r\n      if(Debuggee_Worker.hasInstance()){\r\n        menuOptions.push(Blockly_Debugger.actions[\"Watch\"].menuOption(block)); \r\n        menuOptions.push(Blockly_Debugger.actions[\"Eval\"].menuOption(block));\r\n      }\r\n    }\r\n    //\r\n\r\n    var block___ = {\r\n      text: \"block___\",\r\n      enabled:true,\r\n      callback: function(){\r\n       console.log(block);\r\n      }\r\n    };\r\n    menuOptions.push(block___); \r\n\r\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\r\n\r\n\r\n  \r\n    // Allow the block to add or modify menuOptions.\r\n    if (this.customContextMenu) {\r\n      this.customContextMenu(menuOptions);\r\n    }\r\n  \r\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);    \r\n    Blockly.ContextMenu.currentBlock = this;\r\n  };\r\n\r\n\r\n","import '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\n\r\naddEventListener(\"updateTable\",function (){\r\n    let variables = Blockly_Debugger.actions[\"Variables\"].getVariables();\r\n    document.getElementById(\"variables\").innerHTML = '';\r\n    for(var i = 0; i<variables.length; ++i){\r\n        var red_style = ``;\r\n        if(variables[i].change === true) red_style = `style=\\\"color:red;\\\"`;\r\n        document.getElementById(\"variables\").innerHTML += `<tr>\r\n                                                            <td ` + red_style + `>` + variables[i].name + `</td>\r\n                                                            <td ` + red_style + `>` +  variables[i].value + `</td>\r\n                                                            <td ` + red_style + `>` + typeof variables[i].value + `</td>\r\n                                                          </tr>`;\r\n    }\r\n});\r\n\r\n\r\naddEventListener(\"updateWatchesTable\",function (){\r\n    let watches = Blockly_Debugger.actions[\"Watch\"].getWatches();\r\n    document.getElementById(\"watches\").innerHTML = '';\r\n    for(var i = 0; i<watches.length; ++i){\r\n        var red_style = ``;\r\n        if(watches[i].change === true) red_style = `style=\\\"color:red;\\\"`;\r\n        document.getElementById(\"watches\").innerHTML += `<tr>\r\n                                                            <td ` + red_style + `>` + watches[i].name + `</td>\r\n                                                            <td ` + red_style + `>` + watches[i].code + `</td>\r\n                                                            <td ` + red_style + `>` + watches[i].value + `</td>\r\n                                                            <td ` + red_style + `>` + typeof watches[i].value + `</td>\r\n                                                        </tr>`;\r\n    }\r\n});\r\n\r\naddEventListener('keydown', (event) => { \r\n    switch (event.key.toUpperCase()) {\r\n    case 'S':\r\n        event.preventDefault();\r\n        var blocks = Blockly.Xml.workspaceToDom(window.workspace[\"blockly1\"],true).childNodes;\r\n        var output = \"\";\r\n        blocks.forEach(e => {\r\n            if(e.localName == \"block\"){\r\n                output += \"\\n\";\r\n                output += e.outerHTML;\r\n            }\r\n        });\r\n        console.log(output);\r\n        break;\r\n    }\r\n});\r\n\r\n\r\n\r\n// const data = new Uint8Array(Buffer.from('Hello Node.js'));\r\n// fs.writeFile('message.txt', data, (err) => {\r\n//   if (err) throw err;\r\n//   console.log('The file has been saved!');\r\n// });\r\n\r\n// const fs = require('fs');\r\n// fs.writeFile('test.txt', 'Hello content!', function (err) {\r\n//     if (err) throw err;\r\n//     console.log('Saved!');\r\n//   });\r\n\r\n\r\n// fs.writeFile('message.txt', 'Hello Node.js', 'utf8', callback);\r\n\r\n","import './events.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \r\n\r\nwindow.workspace = {};  \r\n     \r\nwindow.workspace[\"blockly1\"] = Blockly.inject(\r\n    'blocklyDiv',\r\n    {\r\n            media: '../../media/',\r\n             toolbox: document.getElementById('toolbox')\r\n    }\r\n);\r\nwindow.workspace[\"blockly1\"].systemEditorId = 'blockly1';\r\n\r\nwindow.workspace[\"blockly2\"] = Blockly.inject(\r\n    'blocklyDiv2',\r\n    {\r\n            media   : '../../media/',\r\n            toolbox    : document.getElementById('toolbox')\r\n    }\r\n);\r\n\r\nwindow.workspace[\"blockly2\"].systemEditorId = 'blockly2';    \r\n\r\naddEventListener(\"loadStartingBlocks\",function (){\r\n    Blockly.Xml.domToText(document.getElementById('startBlocks'));\r\n    Blockly.Xml.domToWorkspace(\r\n        document.getElementById('startBlocks'), \r\n        window.workspace[\"blockly1\"]\r\n    );\r\n    \r\n    Blockly.Xml.domToWorkspace(\r\n        document.getElementById('startBlocks'), \r\n        window.workspace[\"blockly2\"]\r\n    );\r\n});\r\n\r\n\r\n//Blockly_Debugger.actions[\"Variables\"].init();","import './init_blockly.js';\r\nimport '../debugger/debugger.js';\r\nimport '../generator/blockly/blockly.js';\r\nimport {Blockly_Debugger} from '../debugger/debugger.js';\r\n\r\ndocument.getElementById(\"ContinueButton\").onclick = Blockly_Debugger.actions[\"Continue\"].handler;\r\ndocument.getElementById(\"StepInButton\").onclick = Blockly_Debugger.actions[\"StepIn\"].handler;\r\ndocument.getElementById(\"StepOverButton\").onclick = Blockly_Debugger.actions[\"StepOver\"].handler;\r\ndocument.getElementById(\"StepParentButton\").onclick = Blockly_Debugger.actions[\"StepParent\"].handler;\r\ndocument.getElementById(\"StepOutButton\").onclick = Blockly_Debugger.actions[\"StepOut\"].handler;\r\ndocument.getElementById(\"StopButton\").onclick = Blockly_Debugger.actions[\"Stop\"].handler;\r\ndocument.getElementById(\"StartButton\").onclick = Blockly_Debugger.actions[\"Start\"].handler;\r\n\r\n//$(\"#RunButton\").onclick((ev)=> Run(ev));\r\n\r\n\r\n// if (document.addEventListener) { // IE >= 9; other browsers\r\n//     document.getElementById(\"val_table\").addEventListener('contextmenu', function(e) {\r\n//         alert(\"You've tried to open context menu\"); //here you draw your own menu\r\n//         e.preventDefault();\r\n//     }, false);\r\n// } else { // IE < 9\r\n//     document.getElementById(\"val_table\").attachEvent('oncontextmenu', function() {\r\n//         alert(\"You've tried to open context menu\");\r\n//         window.event.returnValue = false;\r\n//     });\r\n// }\r\n\r\n// let menuVisible = false;\r\n\r\n// const toggleMenu = command => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.display = command === \"show\" ? \"block\" : \"none\";\r\n//     menuVisible = !menuVisible;\r\n//   };\r\n  \r\n//   const setPosition = (top, left) => {\r\n//     var menu = document.getElementById(\"menu\");\r\n//     menu.style.left = left + 'px';//`${left}px`;\r\n//     menu.style.top = top + 'px';//`${top}px`;\r\n//     toggleMenu('show');\r\n//   };\r\n  \r\n//   window.addEventListener(\"click\", e => {\r\n//     if(menuVisible)toggleMenu(\"hide\");\r\n//   });\r\n  \r\n//   document.getElementById(\"val_table\").addEventListener(\"contextmenu\", e => {\r\n//     e.preventDefault();\r\n//     const origin = {\r\n//       left: e.pageX,\r\n//       top: e.pageY\r\n//     };\r\n//     setPosition( e.pageY, e.pageX);\r\n//     return false;\r\n//   });","\r\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\r\n    var text = [];\r\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\r\n    if (this.collapsed_) {\r\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\r\n    } else {\r\n      for (var i = 0, input; input = this.inputList[i]; i++) {\r\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\r\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\r\n            text.push(emptyFieldPlaceholder);\r\n          } else {\r\n            text.push(field.getText());\r\n          }\r\n        }\r\n        if (input.connection) {\r\n          var child = input.connection.targetBlock();\r\n          if (child) {\r\n              var child_text = child.toString(undefined, opt_emptyToken);\r\n              child_text = \"(\" + child_text + \")\";                    // add ()\r\n            text.push(child_text);\r\n          } else {\r\n            text.push(emptyFieldPlaceholder);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    text = goog.string.trim(text.join(' ')) || '???';\r\n    if (opt_maxLength) {\r\n      // TODO: Improve truncation so that text from this block is given priority.\r\n      // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\r\n      // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\r\n      text = goog.string.truncate(text, opt_maxLength);\r\n    }\r\n    return text;\r\n  };","Blockly.JavaScript['text_length'] = function(block) {\r\n    // String or array length.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\r\n    // Is the string null or array empty?\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\r\n  };\r\n\r\n  Blockly.JavaScript['text_indexOf'] = function(block) {\r\n    // Search the text for a substring.\r\n    var operator = block.getFieldValue('END') == 'FIRST' ?\r\n        'indexOf' : 'lastIndexOf';\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n  Blockly.JavaScript['text_charAt'] = function(block) {\r\n    // Get letter at index.\r\n    // Note: Until January 2013 this block did not have the WHERE input.\r\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\r\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\r\n        Blockly.JavaScript.ORDER_MEMBER;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\r\n        textOrder) || '\\'\\'';\r\n        text = '(' + text + ')';\r\n    switch (where) {\r\n      case 'FIRST':\r\n        var code = text + '.charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'LAST':\r\n        var code = text + '.slice(-1)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_START':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\r\n        // Adjust index if using one-based indices.\r\n        var code = text + '.charAt(' + at + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'FROM_END':\r\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\r\n        var code = text + '.slice(' + at + ').charAt(0)';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n      case 'RANDOM':\r\n        var functionName = Blockly.JavaScript.provideFunction_(\r\n            'textRandomLetter',\r\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n                '(text) {',\r\n             '  var x = Math.floor(Math.random() * text.length);',\r\n             '  return text[x];',\r\n             '}']);\r\n        var code = functionName + '(' + text + ')';\r\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n    }\r\n    throw 'Unhandled option (text_charAt).';\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\r\n    // Get substring.\r\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\r\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n    var where1 = block.getFieldValue('WHERE1');\r\n    var where2 = block.getFieldValue('WHERE2');\r\n    if (where1 == 'FIRST' && where2 == 'LAST') {\r\n      var code = text;\r\n    } else if (text.match(/^'?\\w+'?$/) ||\r\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\r\n        where2 != 'FROM_END' && where2 != 'LAST')) {\r\n      // If the text is a variable or literal or doesn't require a call for\r\n      // length, don't generate a helper function.\r\n      text = '(' + text + ')';\r\n      switch (where1) {\r\n        case 'FROM_START':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n          break;\r\n        case 'FROM_END':\r\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at1 = text + '.length - ' + at1;\r\n          break;\r\n        case 'FIRST':\r\n          var at1 = '0';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      switch (where2) {\r\n        case 'FROM_START':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\r\n          break;\r\n        case 'FROM_END':\r\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\r\n              Blockly.JavaScript.ORDER_SUBTRACTION);\r\n          at2 = text + '.length - ' + at2;\r\n          break;\r\n        case 'LAST':\r\n          var at2 = text + '.length';\r\n          break;\r\n        default:\r\n          throw 'Unhandled option (text_getSubstring).';\r\n      }\r\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n    } else {\r\n      text = '(' + text + ')';\r\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\r\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\r\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\r\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\r\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n          '(sequence' +\r\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n          // we add it as a parameter.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\r\n          ') {',\r\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\r\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\r\n            '  return sequence.slice(start, end);',\r\n            '}']);\r\n      var code = functionName + '(' + text +\r\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n          // pass it.\r\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\r\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\r\n          ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n\r\n  Blockly.JavaScript['text_changeCase'] = function(block) {\r\n    // Change capitalization.\r\n    var OPERATORS = {\r\n      'UPPERCASE': '.toUpperCase()',\r\n      'LOWERCASE': '.toLowerCase()',\r\n      'TITLECASE': null\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('CASE')];\r\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\r\n        Blockly.JavaScript.ORDER_NONE;\r\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        textOrder) || '\\'\\'';\r\n    if (operator) {\r\n      // Upper and lower case are functions built into JavaScript.\r\n      var code = '(' + text + ')' + operator;\r\n    } else {\r\n      // Title case is not a native JavaScript function.  Define one.\r\n      var functionName = Blockly.JavaScript.provideFunction_(\r\n          'textToTitleCase',\r\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(str) {',\r\n           '  return str.replace(/\\\\S+/g,',\r\n           '      function(txt) {return txt[0].toUpperCase() + ' +\r\n              'txt.substring(1).toLowerCase();});',\r\n           '}']);\r\n      var code = functionName + '(' + '(' + text + ')' + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n\r\n\r\n  ////\r\n\r\n  Blockly.JavaScript['text_trim'] = function(block) {\r\n    // Trim spaces.\r\n    var OPERATORS = {\r\n      'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n      'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n      'BOTH': '.trim()'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('MODE')];\r\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\r\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  \r\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\r\n    // Prompt function.\r\n    if (block.getField('TEXT')) {\r\n      // Internal message.\r\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\r\n    } else {\r\n      // External message.\r\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n          Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    }\r\n    var code = '(await window.prompt(' + msg + '))';\r\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\r\n    if (toNumber) {\r\n      code = 'parseFloat(' + code + ')';\r\n    }\r\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\r\n  };\r\n  \r\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\r\n\r\n\r\n  Blockly.JavaScript['text_print'] = function(block) {\r\n    // Print statement.\r\n    var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\r\n        Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\r\n    return 'await window.alert(' + msg + ');\\n';\r\n  };"],"sourceRoot":""}