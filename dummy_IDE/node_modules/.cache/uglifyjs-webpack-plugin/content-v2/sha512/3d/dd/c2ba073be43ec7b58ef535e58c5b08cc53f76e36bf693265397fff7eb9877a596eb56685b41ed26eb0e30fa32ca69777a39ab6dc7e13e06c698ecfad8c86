{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debuggee\\\\init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block_svg.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"window\",\"alert\",\"msg\",\"postMessage\",\"type\",\"data\",\"prompt\",\"async\",\"undefined\",\"flags\",\"promptMsg\",\"next_message\",\"tmp\",\"Blockly_debuggee\",\"actions\",\"state\",\"currNest\",\"currId\",\"stepWait\",\"currState\",\"stepIn\",\"stepOver\",\"stepParent\",\"stepOut\",\"continue\",\"isState\",\"this\",\"setState\",\"new_state\",\"wait\",\"ms\",\"Promise\",\"resolve\",\"setTimeout\",\"nest\",\"block_id\",\"CurrentSystemEditorId\",\"id\",\"highlightBlock\",\"breakpoint\",\"includes\",\"dispatcher\",\"Debuggee_Worker\",\"instance\",\"hasInstance\",\"Instance\",\"Worker\",\"workspace\",\"traceOn_\",\"execution_finished\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blocly_Debugger\",\"Blockly_debugger\",\"handler\",\"Blockly\",\"JavaScript\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"code\",\"breakpoints\",\"console\",\"log\",\"generation\",\"currentSystemEditorId\",\"block\",\"valueToCode\",\"ORDER_FUNCTION_CALL\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"argument0\",\"ORDER_NONE\",\"mode\",\"where\",\"at\",\"ORDER_UNARY_NEGATION\",\"list\",\"isNumber\",\"parseFloat\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"xVar\",\"value_input\",\"value_delim\",\"functionName\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"prefixLines\",\"replace\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"x\",\"arguments_\",\"length\",\"join\",\"scrub_\",\"definitions_\",\"ORDER_COMMA\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"init\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"push\",\"outputConnection\",\"scrubNakedValue\",\"finish\",\"BlockSvg\",\"showContextMenu_\",\"e\",\"options\",\"readOnly\",\"contextMenu\",\"menuOptions\",\"isDeletable\",\"isMovable\",\"isInFlyout\",\"duplicateOption\",\"text\",\"Msg\",\"DUPLICATE_BLOCK\",\"enabled\",\"duplicate_\",\"getDescendants\",\"remainingCapacity\",\"isEditable\",\"collapsed_\",\"comments\",\"commentOption\",\"userAgent\",\"IE\",\"comment\",\"REMOVE_COMMENT\",\"setCommentText\",\"ADD_COMMENT\",\"inputList\",\"NEXT_STATEMENT\",\"inlineOption\",\"isInline\",\"getInputsInline\",\"EXTERNAL_INPUTS\",\"INLINE_INPUTS\",\"setInputsInline\",\"collapse\",\"expandOption\",\"EXPAND_BLOCK\",\"setCollapsed\",\"collapseOption\",\"COLLAPSE_BLOCK\",\"disable\",\"disableOption\",\"ENABLE_BLOCK\",\"DISABLE_BLOCK\",\"getInheritedDisabled\",\"setDisabled\",\"descendantCount\",\"nextBlock\",\"deleteOption\",\"DELETE_BLOCK\",\"DELETE_X_BLOCKS\",\"String\",\"dispose\",\"breakpointOption\",\"index\",\"indexOf\",\"splice\",\"helpOption\",\"isFunction\",\"helpUrl\",\"HELP\",\"showHelp_\",\"customContextMenu\",\"ContextMenu\",\"show\",\"RTL\",\"currentBlock\",\"document\",\"getElementById\",\"onclick\",\"where1\",\"where2\",\"at1\",\"at2\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\",\"quote_\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 2);\\n\",\"export var window = {\\r\\n    alert : function(msg) {\\r\\n      postMessage({\\\"type\\\": \\\"alert\\\", \\\"data\\\" : msg});\\r\\n    },\\r\\n    prompt : async function (msg){\\r\\n      postMessage({\\\"type\\\": \\\"prompt\\\", \\\"data\\\" : msg});\\r\\n      while(flags.promptMsg == undefined){\\r\\n        await next_message();\\r\\n      }\\r\\n      var tmp = flags.promptMsg;\\r\\n      flags.promptMsg = undefined;\\r\\n      return tmp;\\r\\n    }\\r\\n} ;  \\r\\n\\r\\nexport var Blockly_debuggee = {};\\r\\nBlockly_debuggee.actions = {};\\r\\n\\r\\nBlockly_debuggee.state = {\\r\\n  currNest : 0,\\r\\n  currId : '',\\r\\n  promptMsg : undefined,\\r\\n  stepWait : false,\\r\\n  currState: {\\r\\n    stepIn : false,\\r\\n    stepOver : false,\\r\\n    stepParent : false,\\r\\n    stepOut : false,\\r\\n    continue : true\\r\\n  },\\r\\n  isState: function(state){\\r\\n    return this.currState[state];\\r\\n  },\\r\\n  setState: function(new_state) {\\r\\n    this.currState[\\\"stepIn\\\"] = false;\\r\\n    this.currState[\\\"stepOver\\\"] = false;\\r\\n    this.currState[\\\"stepParent\\\"] = false;\\r\\n    this.currState[\\\"stepOut\\\"] = false;\\r\\n    this.currState[\\\"continue\\\"] = false;\\r\\n    this.currState[new_state] = true;\\r\\n  }\\r\\n};\\r\\n\\r\\n\\r\\nBlockly_debuggee.wait = (function(){\\r\\n  function highlightBlock(id, CurrentSystemEditorId){\\r\\n    postMessage({\\\"type\\\": \\\"highlightBlock\\\", \\\"data\\\" : {\\\"id\\\" : id, \\\"CurrentSystemEditorId\\\" : CurrentSystemEditorId}});\\r\\n  }\\r\\n\\r\\n  function sleep(ms) {\\r\\n    return new Promise(resolve => setTimeout(resolve, ms));\\r\\n  }\\r\\n  \\r\\n  function next_message() { \\r\\n    return sleep(0); \\r\\n  }\\r\\n\\r\\n  async function wait(nest, block_id, CurrentSystemEditorId){\\r\\n    highlightBlock(block_id, CurrentSystemEditorId);\\r\\n    if(Blockly_debuggee.state.isState(\\\"continue\\\") && !Blockly_debuggee.actions.breakpoint.includes(block_id)){    \\r\\n      return;\\r\\n    }\\r\\n    if(Blockly_debuggee.state.currNest == -1) return;    // stepOver + stepOut for functions                   \\r\\n      if(Blockly_debuggee.state.isState(\\\"stepIn\\\") || Blockly_debuggee.state.isState(\\\"continue\\\") || nest <= Blockly_debuggee.state.currNest){\\r\\n        if(Blockly_debuggee.state.currId  === block_id && !Blockly_debuggee.state.isState(\\\"continue\\\")) return;\\r\\n        if(Blockly_debuggee.state.isState(\\\"stepParent\\\") && nest == Blockly_debuggee.state.currNest) return;\\r\\n        while(!Blockly_debuggee.state.stepWait){\\r\\n            await next_message();\\r\\n        }\\r\\n        Blockly_debuggee.state.stepWait = false;\\r\\n        Blockly_debuggee.state.currId = block_id;\\r\\n        if(Blockly_debuggee.state.isState(\\\"stepOut\\\")){\\r\\n            Blockly_debuggee.state.currNest = -1;\\r\\n            Blockly_debuggee.state.currState.stepOut = false;                                  \\r\\n        }else{\\r\\n            Blockly_debuggee.state.currNest = nest;\\r\\n        }       \\r\\n    }\\r\\n  };\\r\\n\\r\\n  return wait;  \\r\\n})();\\r\\n\\r\\nexport var dispatcher = {\\r\\n  prompt : (promptMsg) => {\\r\\n    flags.promptMsg = promptMsg;\\r\\n  }\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n\",\"import { Blockly_debuggee } from \\\"../debuggee/init\\\";\\r\\n\\r\\nexport var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher;\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\"); // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher = {                              \\r\\n\\t\\t\\t\\\"alert\\\" : (msg) => {\\r\\n\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"prompt\\\" : (msg) => {\\r\\n\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"highlightBlock\\\" : (data) => {\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\\t\\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\\r\\n\\t\\t\\t\\t// block.setCollapsed(false);\\r\\n\\t\\t\\t}, \\r\\n\\t\\t\\t\\\"execution_finished\\\" : () => {\\r\\n\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blocly_Debugger = {};\\r\\nBlockly_debugger.actions = {};\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlocly_Debugger[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"StepIn\\\"] = {}; \\r\\nBlocly_Debugger[\\\"StepOver\\\"] = {};\\r\\nBlocly_Debugger[\\\"StepParent\\\"] = {};\\r\\nBlocly_Debugger[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlocly_Debugger[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blocly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlocly_Debugger[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlocly_Debugger[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\n// function addCode(js){                                // gia na kanw debug to eval \\r\\n//     var e = document.createElement('script');\\r\\n//     e.type = 'text/javascript';\\r\\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\\r\\n//     document.head.appendChild(e);\\r\\n// }\\r\\n\\r\\nBlocly_Debugger[\\\"Start\\\"] = {};\\r\\n\\r\\nBlocly_Debugger[\\\"Start\\\"].handler = () => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;  \\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    // var code = \\\"async function code(){\\\\n\\\" + code1 + code2 +\\\" };\\\\ncode();\\\";\\r\\n    // addCode(code);\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints}});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Breakpoint\\\"] = {};\\r\\n\\r\\nBlocly_Debugger[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints});\\r\\n}\\r\\n\\r\\n\\r\\nBlocly_Debugger[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\\r\\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n    // Get element at index.\\r\\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n    list = '(' + list + ')';\\r\\n    if (where == 'FIRST') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n    } else if (where == 'LAST') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_START') {\\r\\n      // Blockly uses one-based indicies.\\r\\n      if (Blockly.isNumber(at)) {\\r\\n        // If the index is a naked number, decrement it right now.\\r\\n        at = parseFloat(at) - 1;\\r\\n      } else {\\r\\n        // If the index is dynamic, decrement it in code.\\r\\n        at += ' - 1';\\r\\n      }\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_END') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'lists_remove_from_end',\\r\\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(list, x) {',\\r\\n              '  x = list.length - x;',\\r\\n              '  return list.splice(x, 1)[0];',\\r\\n              '}']);\\r\\n        code = functionName + '(' + list + ', ' + at + ')';\\r\\n        if (mode == 'GET_REMOVE') {\\r\\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n        } else if (mode == 'REMOVE') {\\r\\n          return code + ';\\\\n';\\r\\n        }\\r\\n      }\\r\\n    } else if (where == 'RANDOM') {\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'lists_get_random_item',\\r\\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n            '  var x = Math.floor(Math.random() * list.length);',\\r\\n            '  if (remove) {',\\r\\n            '    return list.splice(x, 1)[0];',\\r\\n            '  } else {',\\r\\n            '    return list[x];',\\r\\n            '  }',\\r\\n            '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_getIndex).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    if (where == 'FIRST') {\\r\\n      if (mode == 'SET') {\\r\\n        return list + '[0] = ' + value + ';\\\\n';\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.unshift(' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'LAST') {\\r\\n      if (mode == 'SET') {\\r\\n        var code = cacheList();\\r\\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.push(' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_START') {\\r\\n      // Blockly uses one-based indicies.\\r\\n      if (Blockly.isNumber(at)) {\\r\\n        // If the index is a naked number, decrement it right now.\\r\\n        at = parseFloat(at) - 1;\\r\\n      } else {\\r\\n        // If the index is dynamic, decrement it in code.\\r\\n        at += ' - 1';\\r\\n      }\\r\\n      if (mode == 'SET') {\\r\\n        return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_END') {\\r\\n      var code = cacheList();\\r\\n      if (mode == 'SET') {\\r\\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n            ');\\\\n';\\r\\n        return code;\\r\\n      }\\r\\n    } else if (where == 'RANDOM') {\\r\\n      var code = cacheList();\\r\\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n          '.length);\\\\n';\\r\\n      if (mode == 'SET') {\\r\\n        code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n        return code;\\r\\n      }\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!value_input) {\\r\\n        value_input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!value_input) {\\r\\n        value_input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      branch = Blockly.JavaScript.prefixLines(\\r\\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n    if (returnValue) {\\r\\n      returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\\\n  Blockly_debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n    }else{\\r\\n        returnValue = '  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\\\n  Blockly_debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n    }\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n        '  let global_nest = Blockly_debuggee.state.currNest;\\\\n' + \\r\\n        '  if(isStepOver() || isStepParent()) Blockly_debuggee.state.currNest = -1;\\\\n' +\\r\\n        branch +    \\r\\n        returnValue + '}'; \\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    Blockly.JavaScript.definitions_[funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  Blockly_debuggee.state.currNest = global_nest;\\\\n  Blockly_debuggee.state.currState.parent = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'),' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\",\"import {Blocly_Debugger} from '../../../debugger/debugger.js';\\r\\n\\r\\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n    if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n      return;\\r\\n    }\\r\\n    // Save the current block in a variable for use in closures.\\r\\n    var block = this;\\r\\n    var menuOptions = [];\\r\\n  \\r\\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n      // Option to duplicate this block.\\r\\n      var duplicateOption = {\\r\\n        text: Blockly.Msg.DUPLICATE_BLOCK,\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          Blockly.duplicate_(block);\\r\\n        }\\r\\n      };\\r\\n      if (this.getDescendants().length > this.workspace.remainingCapacity()) {\\r\\n        duplicateOption.enabled = false;\\r\\n      }\\r\\n      menuOptions.push(duplicateOption);\\r\\n  \\r\\n      if (this.isEditable() && !this.collapsed_ &&\\r\\n          this.workspace.options.comments) {\\r\\n        // Option to add/remove a comment.\\r\\n        var commentOption = {enabled: !goog.userAgent.IE};\\r\\n        if (this.comment) {\\r\\n          commentOption.text = Blockly.Msg.REMOVE_COMMENT;\\r\\n          commentOption.callback = function() {\\r\\n            block.setCommentText(null);\\r\\n          };\\r\\n        } else {\\r\\n          commentOption.text = Blockly.Msg.ADD_COMMENT;\\r\\n          commentOption.callback = function() {\\r\\n            block.setCommentText('');\\r\\n          };\\r\\n        }\\r\\n        menuOptions.push(commentOption);\\r\\n      }\\r\\n  \\r\\n      // Option to make block inline.\\r\\n      if (!this.collapsed_) {\\r\\n        for (var i = 1; i < this.inputList.length; i++) {\\r\\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n            // Only display this option if there are two value or dummy inputs\\r\\n            // next to each other.\\r\\n            var inlineOption = {enabled: true};\\r\\n            var isInline = this.getInputsInline();\\r\\n            inlineOption.text = isInline ?\\r\\n                Blockly.Msg.EXTERNAL_INPUTS : Blockly.Msg.INLINE_INPUTS;\\r\\n            inlineOption.callback = function() {\\r\\n              block.setInputsInline(!isInline);\\r\\n            };\\r\\n            menuOptions.push(inlineOption);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.collapse) {\\r\\n        // Option to collapse/expand block.\\r\\n        if (this.collapsed_) {\\r\\n          var expandOption = {enabled: true};\\r\\n          expandOption.text = Blockly.Msg.EXPAND_BLOCK;\\r\\n          expandOption.callback = function() {\\r\\n            block.setCollapsed(false);\\r\\n          };\\r\\n          menuOptions.push(expandOption);\\r\\n        } else {\\r\\n          var collapseOption = {enabled: true};\\r\\n          collapseOption.text = Blockly.Msg.COLLAPSE_BLOCK;\\r\\n          collapseOption.callback = function() {\\r\\n            block.setCollapsed(true);\\r\\n          };\\r\\n          menuOptions.push(collapseOption);\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.disable) {\\r\\n        // Option to disable/enable block.\\r\\n        var disableOption = {\\r\\n          text: this.disabled ?\\r\\n              Blockly.Msg.ENABLE_BLOCK : Blockly.Msg.DISABLE_BLOCK,\\r\\n          enabled: !this.getInheritedDisabled(),\\r\\n          callback: function() {\\r\\n            block.setDisabled(!block.disabled);\\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(disableOption);\\r\\n      }\\r\\n  \\r\\n      // Option to delete this block.\\r\\n      // Count the number of blocks that are nested in this block.\\r\\n      var descendantCount = this.getDescendants().length;\\r\\n      var nextBlock = this.getNextBlock();\\r\\n      if (nextBlock) {\\r\\n        // Blocks in the current stack would survive this block's deletion.\\r\\n        descendantCount -= nextBlock.getDescendants().length;\\r\\n      }\\r\\n      var deleteOption = {\\r\\n        text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :\\r\\n            Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          block.dispose(true, true);\\r\\n        }\\r\\n      };\\r\\n      menuOptions.push(deleteOption);\\r\\n    }\\r\\n  \\r\\n\\r\\n    // Breakpoints\\r\\n    var breakpointOption = {\\r\\n      text: (!Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n      enabled: true,\\r\\n      callback: function() {\\r\\n          if(!Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) {\\r\\n            Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints.push(block.id);\\r\\n            block.setCollapsed(false);                                  // expand the block if it is collapted \\r\\n          } else {\\r\\n            var index = Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints.indexOf(block.id);\\r\\n            if (index !== -1) Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints.splice(index, 1)\\r\\n          }\\r\\n          Blocly_Debugger[\\\"Breakpoint\\\"].handler();\\r\\n          alert(\\\"Selected: \\\" + block.id + \\\"\\\\n breakpoints: \\\" + Blocly_Debugger[\\\"Breakpoint\\\"].breakpoints);\\r\\n        }\\r\\n    };\\r\\n    menuOptions.push(breakpointOption);\\r\\n\\r\\n\\r\\n    // Option to get help.\\r\\n    var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;\\r\\n    var helpOption = {enabled: !!url};\\r\\n    helpOption.text = Blockly.Msg.HELP;\\r\\n    helpOption.callback = function() {\\r\\n      block.showHelp_();\\r\\n    };\\r\\n    menuOptions.push(helpOption);\\r\\n    \\r\\n    // Allow the block to add or modify menuOptions.\\r\\n    if (this.customContextMenu && !block.isInFlyout) {\\r\\n      this.customContextMenu(menuOptions);\\r\\n    }\\r\\n  \\r\\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\\r\\n    Blockly.ContextMenu.currentBlock = this;\\r\\n\\r\\n\\r\\n  };\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blocly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blocly_Debugger[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blocly_Debugger[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blocly_Debugger[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blocly_Debugger[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blocly_Debugger[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blocly_Debugger[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blocly_Debugger[\\\"Start\\\"].handler;\\r\\n\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\\r\\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        // Blockly uses one-based indicies.\\r\\n        if (Blockly.isNumber(at)) {\\r\\n          // If the index is a naked number, decrement it right now.\\r\\n          at = parseFloat(at) - 1;\\r\\n        } else {\\r\\n          // If the index is dynamic, decrement it in code.\\r\\n          at += ' - 1';\\r\\n        }\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var code = text + '.slice(-' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'text_random_letter',\\r\\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n              '  var x = Math.floor(Math.random() * text.length);',\\r\\n              '  return text[x];',\\r\\n              '}']);\\r\\n        code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else {\\r\\n        text = '(' + text + ')';\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'text_get_substring',\\r\\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(text, where1, at1, where2, at2) {',\\r\\n            '  function getAt(where, at) {',\\r\\n            '    if (where == \\\\'FROM_START\\\\') {',\\r\\n            '      at--;',\\r\\n            '    } else if (where == \\\\'FROM_END\\\\') {',\\r\\n            '      at = text.length - at;',\\r\\n            '    } else if (where == \\\\'FIRST\\\\') {',\\r\\n            '      at = 0;',\\r\\n            '    } else if (where == \\\\'LAST\\\\') {',\\r\\n            '      at = text.length - 1;',\\r\\n            '    } else {',\\r\\n            '      throw \\\\'Unhandled option (text_getSubstring).\\\\';',\\r\\n            '    }',\\r\\n            '    return at;',\\r\\n            '  }',\\r\\n            '  at1 = getAt(where1, at1);',\\r\\n            '  at2 = getAt(where2, at2) + 1;',\\r\\n            '  return text.slice(at1, at2);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text + ', \\\\'' +\\r\\n          where1 + '\\\\', ' + at1 + ', \\\\'' + where2 + '\\\\', ' + at2 + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var code;\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n      code = '(' + argument0 + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'text_toTitleCase',\\r\\n          [ 'function ' +\\r\\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n            '  return str.replace(/\\\\\\\\S+/g,',\\r\\n            '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n                'txt.substring(1).toLowerCase();});',\\r\\n            '}']);\\r\\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    alert(\\\"text_trim\\\");\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\",\"window.workspace = {};\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\r\\n\\r\\nBlockly.Xml.domToWorkspace(window.workspace[\\\"blockly1\\\"],\\r\\n\\tdocument.getElementById('startBlocks'));\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(window.workspace[\\\"blockly2\\\"],\\r\\n \\tdocument.getElementById('startBlocks'));\"]}","code":"!function(t){var e={};function a(l){if(e[l])return e[l].exports;var r=e[l]={i:l,l:!1,exports:{}};return t[l].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=t,a.c=e,a.d=function(t,e,l){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:l})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=2)}([function(t,e,a){\"use strict\";a.r(e),a.d(e,\"window\",function(){return l}),a.d(e,\"Blockly_debuggee\",function(){return r}),a.d(e,\"dispatcher\",function(){return o});var l={alert:function(t){postMessage({type:\"alert\",data:t})},prompt:async function(t){for(postMessage({type:\"prompt\",data:t});void 0==flags.promptMsg;)await next_message();var e=flags.promptMsg;return flags.promptMsg=void 0,e}},r={actions:{},state:{currNest:0,currId:\"\",promptMsg:void 0,stepWait:!1,currState:{stepIn:!1,stepOver:!1,stepParent:!1,stepOut:!1,continue:!0},isState:function(t){return this.currState[t]},setState:function(t){this.currState.stepIn=!1,this.currState.stepOver=!1,this.currState.stepParent=!1,this.currState.stepOut=!1,this.currState.continue=!1,this.currState[t]=!0}}};r.wait=function(){function t(){return t=0,new Promise(e=>setTimeout(e,t));var t}return async function(e,a,l){if(function(t,e){postMessage({type:\"highlightBlock\",data:{id:t,CurrentSystemEditorId:e}})}(a,l),(!r.state.isState(\"continue\")||r.actions.breakpoint.includes(a))&&-1!=r.state.currNest&&(r.state.isState(\"stepIn\")||r.state.isState(\"continue\")||e<=r.state.currNest)){if(r.state.currId===a&&!r.state.isState(\"continue\"))return;if(r.state.isState(\"stepParent\")&&e==r.state.currNest)return;for(;!r.state.stepWait;)await t();r.state.stepWait=!1,r.state.currId=a,r.state.isState(\"stepOut\")?(r.state.currNest=-1,r.state.currState.stepOut=!1):r.state.currNest=e}}}();var o={prompt:t=>{flags.promptMsg=t}}},,function(t,e,a){\"use strict\";a.r(e);a(5),a(0);var l=function(){var t,e;function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e={alert:t=>{window.alert(t)},prompt:t=>{l.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})},highlightBlock:t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)},execution_finished:()=>{t=void 0}},t.onmessage=function(t){let a=t.data,l=a.data;e[a.type](l)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),r={};Blockly_debugger.actions={},r.Continue={},r.Continue.handler=(()=>{l.Instance().postMessage({type:\"continue\"})}),r.StepIn={},r.StepOver={},r.StepParent={},r.StepOut={},r.StepIn.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepIn\"})}),r.StepOver.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOver\"})}),r.StepParent.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepParent\"})}),r.StepOut.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOut\"})}),r.Stop={},r.Stop.handler=(()=>{l.Stop()}),r.Start={},r.Start.handler=(()=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var t=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),a=t+e;l.Instance().postMessage({type:\"start_debugging\",data:{code:a,breakpoints:r.Breakpoint.breakpoints}}),console.log(t+e)}}),r.Breakpoint={},r.Breakpoint.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"breakpoint\",data:r.Breakpoint.breakpoints})}),r.Breakpoint.breakpoints=[];var o={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\";return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\") + 1\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",l=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_UNARY_NEGATION)||\"1\",r=Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\";if(r=\"(\"+r+\")\",\"FIRST\"==a){if(\"GET\"==e)return[o=r+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return r+\".shift();\\n\"}else if(\"LAST\"==a){if(\"GET\"==e)return[o=r+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return r+\".pop();\\n\"}else if(\"FROM_START\"==a){if(Blockly.isNumber(l)?l=parseFloat(l)-1:l+=\" - 1\",\"GET\"==e)return[o=r+\"[\"+l+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return r+\".splice(\"+l+\", 1);\\n\"}else if(\"FROM_END\"==a){var o;if(\"GET\"==e)return[o=r+\".slice(-\"+l+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e||\"REMOVE\"==e){if(o=Blockly.JavaScript.provideFunction_(\"lists_remove_from_end\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, x) {\",\"  x = list.length - x;\",\"  return list.splice(x, 1)[0];\",\"}\"])+\"(\"+r+\", \"+l+\")\",\"GET_REMOVE\"==e)return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\";\\n\"}}else if(\"RANDOM\"==a){if(o=Blockly.JavaScript.provideFunction_(\"lists_get_random_item\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+r+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",l=t.getFieldValue(\"WHERE\")||\"FROM_START\",r=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_NONE)||\"1\",o=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function n(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmp_list\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}if(e=\"(\"+e+\")\",\"FIRST\"==l){if(\"SET\"==a)return e+\"[0] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+o+\");\\n\"}else if(\"LAST\"==l){if(\"SET\"==a){var c=n();return c+=e+\"[\"+e+\".length - 1] = \"+o+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+o+\");\\n\"}else if(\"FROM_START\"==l){if(Blockly.isNumber(r)?r=parseFloat(r)-1:r+=\" - 1\",\"SET\"==a)return e+\"[\"+r+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+r+\", 0, \"+o+\");\\n\"}else if(\"FROM_END\"==l){c=n();if(\"SET\"==a)return c+=e+\"[\"+e+\".length - \"+r+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return c+=e+\".splice(\"+e+\".length - \"+r+\", 0, \"+o+\");\\n\"}else if(\"RANDOM\"==l){c=n();var i=Blockly.JavaScript.variableDB_.getDistinctName(\"tmp_x\",Blockly.Variables.NAME_TYPE);if(c+=\"var \"+i+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return c+=e+\"[\"+i+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return c+=e+\".splice(\"+i+\", 0, \"+o+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",l=t.getFieldValue(\"MODE\");if(\"SPLIT\"==l){e||(e=\"''\");var r=\"split\"}else{if(\"JOIN\"!=l)throw\"Unknown mode: \"+l;e||(e=\"[]\");r=\"join\"}return[\"(\"+e+\").\"+r+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");Blockly.JavaScript.STATEMENT_PREFIX&&(a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"await wait(0, '\"+t.id+\"', '\"+o.currentSystemEditorId+\"')\"),Blockly.JavaScript.INDENT)+a),Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var l=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";l=l?\"  let $returnValue = \"+l+\";\\n  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\n  Blockly_debuggee.state.currNest = global_nest;\\n  return $returnValue;\\n\":\"  if(Blockly_debuggee.state.currNest != -1) Blockly_debuggee.state.currState.parent = false;\\n  Blockly_debuggee.state.currNest = global_nest;\\n  return;\\n\";for(var r=[],n=0;n<t.arguments_.length;n++)r[n]=Blockly.JavaScript.variableDB_.getName(t.arguments_[n],Blockly.Variables.NAME_TYPE);var c=\"async function \"+e+\"(\"+r.join(\", \")+\") {\\n  let global_nest = Blockly_debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_debuggee.state.currNest = -1;\\n\"+a+l+\"}\";return c=Blockly.JavaScript.scrub_(t,c),Blockly.JavaScript.definitions_[e]=c,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  Blockly_debuggee.state.currNest = global_nest;\\n  Blockly_debuggee.state.currState.parent = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"};a(4);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++o.nest,l=e.call(t,t);return o.nest--,goog.isArray(l)?(l[0]=\"await $id(await wait(\"+a+\", '\"+t.id+\"', '\"+o.currentSystemEditorId+\"'),\"+l[0]+\")\",[this.scrub_(t,l[0]),l[1]]):goog.isString(l)?(this.STATEMENT_PREFIX&&(l=this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+a+\", '\"+t.id+\"', '\"+o.currentSystemEditorId+\"')\")+l),this.scrub_(t,l)):null===l?\"\":void goog.asserts.fail(\"Invalid code generated: %s\",l)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+o.nest+\", '\"+e+\"', '\"+o.currentSystemEditorId+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);o.currentSystemEditorId=t.systemEditorId;var l=\"\\n// start source code of another editor\\n\";e.push(l);for(var r,n=0;r=a[n];n++)l=this.blockToCode(r),goog.isArray(l)&&(l=l[0]),l&&(r.outputConnection&&this.scrubNakedValue&&(l=this.scrubNakedValue(l)),e.push(l));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},Blockly.BlockSvg.prototype.showContextMenu_=function(t){if(!this.workspace.options.readOnly&&this.contextMenu){var e=this,a=[];if(this.isDeletable()&&this.isMovable()&&!e.isInFlyout){var l={text:Blockly.Msg.DUPLICATE_BLOCK,enabled:!0,callback:function(){Blockly.duplicate_(e)}};if(this.getDescendants().length>this.workspace.remainingCapacity()&&(l.enabled=!1),a.push(l),this.isEditable()&&!this.collapsed_&&this.workspace.options.comments){var o={enabled:!goog.userAgent.IE};this.comment?(o.text=Blockly.Msg.REMOVE_COMMENT,o.callback=function(){e.setCommentText(null)}):(o.text=Blockly.Msg.ADD_COMMENT,o.callback=function(){e.setCommentText(\"\")}),a.push(o)}if(!this.collapsed_)for(var n=1;n<this.inputList.length;n++)if(this.inputList[n-1].type!=Blockly.NEXT_STATEMENT&&this.inputList[n].type!=Blockly.NEXT_STATEMENT){var c={enabled:!0},i=this.getInputsInline();c.text=i?Blockly.Msg.EXTERNAL_INPUTS:Blockly.Msg.INLINE_INPUTS,c.callback=function(){e.setInputsInline(!i)},a.push(c);break}if(this.workspace.options.collapse)if(this.collapsed_){var s={enabled:!0};s.text=Blockly.Msg.EXPAND_BLOCK,s.callback=function(){e.setCollapsed(!1)},a.push(s)}else{var p={enabled:!0};p.text=Blockly.Msg.COLLAPSE_BLOCK,p.callback=function(){e.setCollapsed(!0)},a.push(p)}if(this.workspace.options.disable){var u={text:this.disabled?Blockly.Msg.ENABLE_BLOCK:Blockly.Msg.DISABLE_BLOCK,enabled:!this.getInheritedDisabled(),callback:function(){e.setDisabled(!e.disabled)}};a.push(u)}var E=this.getDescendants().length,d=this.getNextBlock();d&&(E-=d.getDescendants().length);var k={text:1==E?Blockly.Msg.DELETE_BLOCK:Blockly.Msg.DELETE_X_BLOCKS.replace(\"%1\",String(E)),enabled:!0,callback:function(){e.dispose(!0,!0)}};a.push(k)}var B={text:r.Breakpoint.breakpoints.includes(e.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(r.Breakpoint.breakpoints.includes(e.id)){var t=r.Breakpoint.breakpoints.indexOf(e.id);-1!==t&&r.Breakpoint.breakpoints.splice(t,1)}else r.Breakpoint.breakpoints.push(e.id),e.setCollapsed(!1);r.Breakpoint.handler(),alert(\"Selected: \"+e.id+\"\\n breakpoints: \"+r.Breakpoint.breakpoints)}};a.push(B);var v={enabled:!!(goog.isFunction(this.helpUrl)?this.helpUrl():this.helpUrl)};v.text=Blockly.Msg.HELP,v.callback=function(){e.showHelp_()},a.push(v),this.customContextMenu&&!e.isInFlyout&&this.customContextMenu(a),Blockly.ContextMenu.show(t,a,this.RTL),Blockly.ContextMenu.currentBlock=this}},document.getElementById(\"ContinueButton\").onclick=r.Continue.handler,document.getElementById(\"StepInButton\").onclick=r.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=r.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=r.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=r.StepOut.handler,document.getElementById(\"StopButton\").onclick=r.Stop.handler,document.getElementById(\"StartButton\").onclick=r.Start.handler},,function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\";return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\") + 1\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_UNARY_NEGATION)||\"1\",l=Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\";switch(l=\"(\"+l+\")\",e){case\"FIRST\":return[l+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[l+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return Blockly.isNumber(a)?a=parseFloat(a)-1:a+=\" - 1\",[l+\".charAt(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[l+\".slice(-\"+a+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"text_random_letter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+l+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_MEMBER)||\"''\",a=t.getFieldValue(\"WHERE1\"),l=t.getFieldValue(\"WHERE2\"),r=Blockly.JavaScript.valueToCode(t,\"AT1\",Blockly.JavaScript.ORDER_NONE)||\"1\",o=Blockly.JavaScript.valueToCode(t,\"AT2\",Blockly.JavaScript.ORDER_NONE)||\"1\";if(\"FIRST\"==a&&\"LAST\"==l)var n=e;else{e=\"(\"+e+\")\";n=Blockly.JavaScript.provideFunction_(\"text_get_substring\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text, where1, at1, where2, at2) {\",\"  function getAt(where, at) {\",\"    if (where == 'FROM_START') {\",\"      at--;\",\"    } else if (where == 'FROM_END') {\",\"      at = text.length - at;\",\"    } else if (where == 'FIRST') {\",\"      at = 0;\",\"    } else if (where == 'LAST') {\",\"      at = text.length - 1;\",\"    } else {\",\"      throw 'Unhandled option (text_getSubstring).';\",\"    }\",\"    return at;\",\"  }\",\"  at1 = getAt(where1, at1);\",\"  at2 = getAt(where2, at2) + 1;\",\"  return text.slice(at1, at2);\",\"}\"])+\"(\"+e+\", '\"+a+\"', \"+r+\", '\"+l+\"', \"+o+\")\"}return[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e,a={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")];a?e=\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+a:e=Blockly.JavaScript.provideFunction_(\"text_toTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\")+\"))\";return[e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){alert(\"text_trim\");var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext},function(t,e){window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(window.workspace.blockly1,document.getElementById(\"startBlocks\")),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(window.workspace.blockly2,document.getElementById(\"startBlocks\"))}]);","extractedComments":[]}