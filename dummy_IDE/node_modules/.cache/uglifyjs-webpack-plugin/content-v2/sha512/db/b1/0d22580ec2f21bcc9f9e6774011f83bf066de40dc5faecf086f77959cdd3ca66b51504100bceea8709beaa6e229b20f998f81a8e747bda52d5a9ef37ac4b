{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\actions\\\\run.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\actions\\\\step.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\actions\\\\start.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\index.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly\\\\debugger\\\\src\\\\blockly\\\\generator\\\\procedures.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"window\",\"workspace\",\"Blockly\",\"inject\",\"media\",\"toolbox\",\"document\",\"getElementById\",\"systemEditorId\",\"Xml\",\"domToWorkspace\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"alert\",\"msg\",\"prompt\",\"postMessage\",\"type\",\"data\",\"highlightBlock\",\"CurrentSystemEditorId\",\"traceOn_\",\"id\",\"execution_finished\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blocly_Debugger\",\"generation\",\"tmp\",\"tmp_count\",\"nest\",\"JavaScript\",\"block\",\"valueToCode\",\"ORDER_FUNCTION_CALL\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"argument0\",\"ORDER_NONE\",\"mode\",\"where\",\"at\",\"ORDER_UNARY_NEGATION\",\"list\",\"code\",\"isNumber\",\"parseFloat\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"xVar\",\"value_input\",\"value_delim\",\"functionName\",\"Generator\",\"blockToCode\",\"disabled\",\"this\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"scrub_\",\"isString\",\"STATEMENT_PREFIX\",\"replace\",\"fail\",\"addLoopTrap\",\"branch\",\"INFINITE_LOOP_TRAP\",\"prefixLines\",\"INDENT\",\"workspaceToCode\",\"console\",\"warn\",\"getMainWorkspace\",\"init\",\"blocks\",\"getTopBlocks\",\"line\",\"push\",\"x\",\"outputConnection\",\"scrubNakedValue\",\"join\",\"finish\",\"code1\",\"code2\",\"log\",\"onclick\",\"text\",\"where1\",\"where2\",\"at1\",\"at2\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\",\"quote_\",\"funcName\",\"getName\",\"Procedures\",\"statementToCode\",\"returnValue\",\"args\",\"arguments_\",\"length\",\"definitions_\",\"ORDER_COMMA\",\"hasReturnValue_\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\",\"window.workspace = {};\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\r\\n\\r\\nBlockly.Xml.domToWorkspace(window.workspace[\\\"blockly1\\\"],\\r\\n\\tdocument.getElementById('startBlocks'));\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\nBlockly.Xml.domToWorkspace(window.workspace[\\\"blockly2\\\"],\\r\\n\\tdocument.getElementById('startBlocks'));\\r\\n\\r\\n\\r\\nexport var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher;\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"../../debuggee/bundle.js\\\");\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher = {                              \\r\\n\\t\\t\\t\\\"alert\\\" : (msg) => {\\r\\n\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"prompt\\\" : (msg) => {\\r\\n\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"highlightBlock\\\" : (data) => {\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t}, \\r\\n\\t\\t\\t\\\"execution_finished\\\" : () => {\\r\\n\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blocly_Debugger = {};\",\"export var generation = {\\r\\n    tmp : '$id',\\r\\n    tmp_count : 0,\\r\\n    nest : -1\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + my_list + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n    return [ '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var code = '(' + argument1  + ')' + '.' + operator + '(' + argument0 + ') + 1';\\r\\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n    // Get element at index.\\r\\n    // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n    list = '(' + list + ')';\\r\\n    if (where == 'FIRST') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n    } else if (where == 'LAST') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_START') {\\r\\n      // Blockly uses one-based indicies.\\r\\n      if (Blockly.isNumber(at)) {\\r\\n        // If the index is a naked number, decrement it right now.\\r\\n        at = parseFloat(at) - 1;\\r\\n      } else {\\r\\n        // If the index is dynamic, decrement it in code.\\r\\n        at += ' - 1';\\r\\n      }\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_END') {\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'lists_remove_from_end',\\r\\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(list, x) {',\\r\\n              '  x = list.length - x;',\\r\\n              '  return list.splice(x, 1)[0];',\\r\\n              '}']);\\r\\n        code = functionName + '(' + list + ', ' + at + ')';\\r\\n        if (mode == 'GET_REMOVE') {\\r\\n          return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n        } else if (mode == 'REMOVE') {\\r\\n          return code + ';\\\\n';\\r\\n        }\\r\\n      }\\r\\n    } else if (where == 'RANDOM') {\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'lists_get_random_item',\\r\\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n            '  var x = Math.floor(Math.random() * list.length);',\\r\\n            '  if (remove) {',\\r\\n            '    return list.splice(x, 1)[0];',\\r\\n            '  } else {',\\r\\n            '    return list[x];',\\r\\n            '  }',\\r\\n            '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_getIndex).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    if (where == 'FIRST') {\\r\\n      if (mode == 'SET') {\\r\\n        return list + '[0] = ' + value + ';\\\\n';\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.unshift(' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'LAST') {\\r\\n      if (mode == 'SET') {\\r\\n        var code = cacheList();\\r\\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.push(' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_START') {\\r\\n      // Blockly uses one-based indicies.\\r\\n      if (Blockly.isNumber(at)) {\\r\\n        // If the index is a naked number, decrement it right now.\\r\\n        at = parseFloat(at) - 1;\\r\\n      } else {\\r\\n        // If the index is dynamic, decrement it in code.\\r\\n        at += ' - 1';\\r\\n      }\\r\\n      if (mode == 'SET') {\\r\\n        return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n      } else if (mode == 'INSERT') {\\r\\n        return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n      }\\r\\n    } else if (where == 'FROM_END') {\\r\\n      var code = cacheList();\\r\\n      if (mode == 'SET') {\\r\\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n            ');\\\\n';\\r\\n        return code;\\r\\n      }\\r\\n    } else if (where == 'RANDOM') {\\r\\n      var code = cacheList();\\r\\n      var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n          '.length);\\\\n';\\r\\n      if (mode == 'SET') {\\r\\n        code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n        return code;\\r\\n      } else if (mode == 'INSERT') {\\r\\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n        return code;\\r\\n      }\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!value_input) {\\r\\n        value_input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!value_input) {\\r\\n        value_input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init'\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\'),' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\\\'' + block.id + '\\\\')') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\\\'' + id + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Run\\\"] = () => {\\r\\n\\r\\n    if(Debuggee_Worker.hasInstance()) return; \\r\\n\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\\r\\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"run\\\", \\\"data\\\": code});\\r\\n}\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"StepIn\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOver\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepUp\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepUp\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOut\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blocly_Debugger} from \\\"../init\\\";\\r\\n\\r\\nBlocly_Debugger[\\\"Stop\\\"] = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Start\\\"] = () => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;  \\r\\n\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": code1 + code2});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import './init.js';\\r\\nimport {Blocly_Debugger} from './init.js';\\r\\nimport './blockly/blockly.js';\\r\\nimport './actions/run.js';\\r\\nimport './actions/step.js';\\r\\nimport './actions/stop.js';\\r\\nimport './actions/start.js';\\r\\n\\r\\ndocument.getElementById(\\\"RunButton\\\").onclick = Blocly_Debugger[\\\"Run\\\"];\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blocly_Debugger[\\\"StepIn\\\"];\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blocly_Debugger[\\\"StepOver\\\"];\\r\\ndocument.getElementById(\\\"StepUpButton\\\").onclick = Blocly_Debugger[\\\"StepUp\\\"];\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blocly_Debugger[\\\"StepOut\\\"];\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blocly_Debugger[\\\"Stop\\\"];\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blocly_Debugger[\\\"Start\\\"];\\r\\n\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ') + 1';\\r\\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        // Blockly uses one-based indicies.\\r\\n        if (Blockly.isNumber(at)) {\\r\\n          // If the index is a naked number, decrement it right now.\\r\\n          at = parseFloat(at) - 1;\\r\\n        } else {\\r\\n          // If the index is dynamic, decrement it in code.\\r\\n          at += ' - 1';\\r\\n        }\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var code = text + '.slice(-' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'text_random_letter',\\r\\n            [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n              '  var x = Math.floor(Math.random() * text.length);',\\r\\n              '  return text[x];',\\r\\n              '}']);\\r\\n        code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    var at1 = Blockly.JavaScript.valueToCode(block, 'AT1',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    var at2 = Blockly.JavaScript.valueToCode(block, 'AT2',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else {\\r\\n        text = '(' + text + ')';\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'text_get_substring',\\r\\n          [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(text, where1, at1, where2, at2) {',\\r\\n            '  function getAt(where, at) {',\\r\\n            '    if (where == \\\\'FROM_START\\\\') {',\\r\\n            '      at--;',\\r\\n            '    } else if (where == \\\\'FROM_END\\\\') {',\\r\\n            '      at = text.length - at;',\\r\\n            '    } else if (where == \\\\'FIRST\\\\') {',\\r\\n            '      at = 0;',\\r\\n            '    } else if (where == \\\\'LAST\\\\') {',\\r\\n            '      at = text.length - 1;',\\r\\n            '    } else {',\\r\\n            '      throw \\\\'Unhandled option (text_getSubstring).\\\\';',\\r\\n            '    }',\\r\\n            '    return at;',\\r\\n            '  }',\\r\\n            '  at1 = getAt(where1, at1);',\\r\\n            '  at2 = getAt(where2, at2) + 1;',\\r\\n            '  return text.slice(at1, at2);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text + ', \\\\'' +\\r\\n          where1 + '\\\\', ' + at1 + ', \\\\'' + where2 + '\\\\', ' + at2 + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var code;\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n      code = '(' + argument0 + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'text_toTitleCase',\\r\\n          [ 'function ' +\\r\\n              Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n            '  return str.replace(/\\\\\\\\S+/g,',\\r\\n            '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n                'txt.substring(1).toLowerCase();});',\\r\\n            '}']);\\r\\n      var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n      code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    alert(\\\"text_trim\\\");\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\",\"Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      branch = Blockly.JavaScript.prefixLines(\\r\\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n    if (returnValue) {\\r\\n      returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  flags.currNest = global_nest;\\\\n  flags.up = false;\\\\n' + '  return $returnValue;\\\\n';\\r\\n    }else{\\r\\n        returnValue = '  flags.currNest = global_nest;\\\\n  flags.up = false;\\\\n' + '  return;\\\\n';\\r\\n    }\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n        '  let global_nest = flags.currNest;\\\\n' + \\r\\n        '  if(isStepOver()) flags.currNest = -1;\\\\n' +\\r\\n        branch +    \\r\\n        returnValue + '}'; \\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    Blockly.JavaScript.definitions_[funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  flags.currNest = global_nest;\\\\n  flags.up = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\"]}","code":"!function(t){var e={};function a(l){if(e[l])return e[l].exports;var r=e[l]={i:l,l:!1,exports:{}};return t[l].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=t,a.c=e,a.d=function(t,e,l){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:l})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=0)}([function(t,e,a){\"use strict\";a.r(e),window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(window.workspace.blockly1,document.getElementById(\"startBlocks\")),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(window.workspace.blockly2,document.getElementById(\"startBlocks\"));var l=function(){var t,e;function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"../../debuggee/bundle.js\"),e={alert:t=>{window.alert(t)},prompt:t=>{l.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})},highlightBlock:t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)},execution_finished:()=>{t=void 0}},t.onmessage=function(t){let a=t.data,l=a.data;e[a.type](l)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),r={},o={tmp:\"$id\",tmp_count:0,nest:-1};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\";return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\") + 1\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",l=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_UNARY_NEGATION)||\"1\",r=Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\";if(r=\"(\"+r+\")\",\"FIRST\"==a){if(\"GET\"==e)return[o=r+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return r+\".shift();\\n\"}else if(\"LAST\"==a){if(\"GET\"==e)return[o=r+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return r+\".pop();\\n\"}else if(\"FROM_START\"==a){if(Blockly.isNumber(l)?l=parseFloat(l)-1:l+=\" - 1\",\"GET\"==e)return[o=r+\"[\"+l+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[o=r+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return r+\".splice(\"+l+\", 1);\\n\"}else if(\"FROM_END\"==a){var o;if(\"GET\"==e)return[o=r+\".slice(-\"+l+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e||\"REMOVE\"==e){if(o=Blockly.JavaScript.provideFunction_(\"lists_remove_from_end\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, x) {\",\"  x = list.length - x;\",\"  return list.splice(x, 1)[0];\",\"}\"])+\"(\"+r+\", \"+l+\")\",\"GET_REMOVE\"==e)return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\";\\n\"}}else if(\"RANDOM\"==a){if(o=Blockly.JavaScript.provideFunction_(\"lists_get_random_item\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+r+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",l=t.getFieldValue(\"WHERE\")||\"FROM_START\",r=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_NONE)||\"1\",o=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function c(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmp_list\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}if(e=\"(\"+e+\")\",\"FIRST\"==l){if(\"SET\"==a)return e+\"[0] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+o+\");\\n\"}else if(\"LAST\"==l){if(\"SET\"==a){var i=c();return i+=e+\"[\"+e+\".length - 1] = \"+o+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+o+\");\\n\"}else if(\"FROM_START\"==l){if(Blockly.isNumber(r)?r=parseFloat(r)-1:r+=\" - 1\",\"SET\"==a)return e+\"[\"+r+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+r+\", 0, \"+o+\");\\n\"}else if(\"FROM_END\"==l){i=c();if(\"SET\"==a)return i+=e+\"[\"+e+\".length - \"+r+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return i+=e+\".splice(\"+e+\".length - \"+r+\", 0, \"+o+\");\\n\"}else if(\"RANDOM\"==l){i=c();var n=Blockly.JavaScript.variableDB_.getDistinctName(\"tmp_x\",Blockly.Variables.NAME_TYPE);if(i+=\"var \"+n+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return i+=e+\"[\"+n+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return i+=e+\".splice(\"+n+\", 0, \"+o+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",l=t.getFieldValue(\"MODE\");if(\"SPLIT\"==l){e||(e=\"''\");var r=\"split\"}else{if(\"JOIN\"!=l)throw\"Unknown mode: \"+l;e||(e=\"[]\");r=\"join\"}return[\"(\"+e+\").\"+r+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]};a(2),a(1);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++o.nest,l=e.call(t,t);return o.nest--,goog.isArray(l)?(l[0]=\"await $id(await wait(\"+a+\", '\"+t.id+\"'),\"+l[0]+\")\",[this.scrub_(t,l[0]),l[1]]):goog.isString(l)?(this.STATEMENT_PREFIX&&(l=this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+a+\", '\"+t.id+\"')\")+l),this.scrub_(t,l)):null===l?\"\":void goog.asserts.fail(\"Invalid code generated: %s\",l)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+o.nest+\", '\"+e+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0),l=\"\\n// start source code of another editor\\nCurrentSystemEditorId = '\"+t.systemEditorId+\"';\\n\";e.push(l);for(var r,o=0;r=a[o];o++)l=this.blockToCode(r),goog.isArray(l)&&(l=l[0]),l&&(r.outputConnection&&this.scrubNakedValue&&(l=this.scrubNakedValue(l)),e.push(l));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},r.Run=(()=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"\";var t=Blockly.JavaScript.workspaceToCode(window.workspace);l.Instance().postMessage({type:\"run\",data:t})}}),r.StepIn=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepIn\"})}),r.StepOver=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOver\"})}),r.StepUp=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepUp\"})}),r.StepOut=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOut\"})}),r.Stop=(()=>{l.Stop()}),r.Start=(()=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var t=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2);l.Instance().postMessage({type:\"start_debugging\",data:t+e}),console.log(t+e)}}),document.getElementById(\"RunButton\").onclick=r.Run,document.getElementById(\"StepInButton\").onclick=r.StepIn,document.getElementById(\"StepOverButton\").onclick=r.StepOver,document.getElementById(\"StepUpButton\").onclick=r.StepUp,document.getElementById(\"StepOutButton\").onclick=r.StepOut,document.getElementById(\"StopButton\").onclick=r.Stop,document.getElementById(\"StartButton\").onclick=r.Start},function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\";return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\") + 1\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=Blockly.JavaScript.valueToCode(t,\"AT\",Blockly.JavaScript.ORDER_UNARY_NEGATION)||\"1\",l=Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\";switch(l=\"(\"+l+\")\",e){case\"FIRST\":return[l+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[l+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return Blockly.isNumber(a)?a=parseFloat(a)-1:a+=\" - 1\",[l+\".charAt(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[l+\".slice(-\"+a+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"text_random_letter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+l+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_MEMBER)||\"''\",a=t.getFieldValue(\"WHERE1\"),l=t.getFieldValue(\"WHERE2\"),r=Blockly.JavaScript.valueToCode(t,\"AT1\",Blockly.JavaScript.ORDER_NONE)||\"1\",o=Blockly.JavaScript.valueToCode(t,\"AT2\",Blockly.JavaScript.ORDER_NONE)||\"1\";if(\"FIRST\"==a&&\"LAST\"==l)var c=e;else{e=\"(\"+e+\")\";c=Blockly.JavaScript.provideFunction_(\"text_get_substring\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text, where1, at1, where2, at2) {\",\"  function getAt(where, at) {\",\"    if (where == 'FROM_START') {\",\"      at--;\",\"    } else if (where == 'FROM_END') {\",\"      at = text.length - at;\",\"    } else if (where == 'FIRST') {\",\"      at = 0;\",\"    } else if (where == 'LAST') {\",\"      at = text.length - 1;\",\"    } else {\",\"      throw 'Unhandled option (text_getSubstring).';\",\"    }\",\"    return at;\",\"  }\",\"  at1 = getAt(where1, at1);\",\"  at2 = getAt(where2, at2) + 1;\",\"  return text.slice(at1, at2);\",\"}\"])+\"(\"+e+\", '\"+a+\"', \"+r+\", '\"+l+\"', \"+o+\")\"}return[c,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e,a={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")];a?e=\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+a:e=Blockly.JavaScript.provideFunction_(\"text_toTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\")+\"))\";return[e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){alert(\"text_trim\");var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext},function(t,e){Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");Blockly.JavaScript.STATEMENT_PREFIX&&(a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"await wait(0, '\"+t.id+\"')\"),Blockly.JavaScript.INDENT)+a),Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var l=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";l=l?\"  let $returnValue = \"+l+\";\\n  flags.currNest = global_nest;\\n  flags.up = false;\\n  return $returnValue;\\n\":\"  flags.currNest = global_nest;\\n  flags.up = false;\\n  return;\\n\";for(var r=[],o=0;o<t.arguments_.length;o++)r[o]=Blockly.JavaScript.variableDB_.getName(t.arguments_[o],Blockly.Variables.NAME_TYPE);var c=\"async function \"+e+\"(\"+r.join(\", \")+\") {\\n  let global_nest = flags.currNest;\\n  if(isStepOver()) flags.currNest = -1;\\n\"+a+l+\"}\";return c=Blockly.JavaScript.scrub_(t,c),Blockly.JavaScript.definitions_[e]=c,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  flags.currNest = global_nest;\\n  flags.up = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"}}]);","extractedComments":[]}