{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\watches.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\breakpoint.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block_svg.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\events.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"msg\",\"window\",\"alert\",\"postMessage\",\"type\",\"data\",\"prompt\",\"workspace\",\"CurrentSystemEditorId\",\"traceOn_\",\"highlightBlock\",\"id\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blockly_Debugger\",\"actions\",\"handler\",\"watches\",\"dispatchEvent\",\"Event\",\"update\",\"new_watches\",\"getWatches\",\"init\",\"length\",\"variables\",\"new_vars\",\"getVariables\",\"workspace_vars\",\"getAllVariables\",\"map\",\"variable\",\"variables_names\",\"j\",\"includes\",\"nvar\",\"push\",\"expr\",\"cursorBreakpoint\",\"Blockly\",\"JavaScript\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"code\",\"MouseEvent\",\"breakpoints\",\"block_id\",\"enable\",\"console\",\"log\",\"wait_view\",\"document\",\"getElementById\",\"style\",\"stroke\",\"fill\",\"reset_view\",\"disable\",\"indexOf\",\"generation\",\"nest\",\"currentSystemEditorId\",\"block\",\"valueToCode\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"item\",\"ORDER_NONE\",\"options\",\"oneBasedIndex\",\"ORDER_ADDITION\",\"ORDER_FUNCTION_CALL\",\"mode\",\"where\",\"listOrder\",\"ORDER_COMMA\",\"list\",\"at\",\"getAdjusted\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"ORDER_SUBTRACTION\",\"xVar\",\"input\",\"delimiter\",\"functionName\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"replace\",\"prefixLines\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"arguments_\",\"join\",\"scrub_\",\"definitions_\",\"x\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"this\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"assert\",\"outputConnection\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"scrubNakedValue\",\"finish\",\"myBlockToCode\",\"stmt_Prefix\",\"myscrub_\",\"a\",\"b\",\"targetConnection\",\"getCommentText\",\"utils\",\"wrap\",\"COMMENT_WRAP\",\"getProcedureDef\",\"e\",\"inputList\",\"INPUT_VALUE\",\"connection\",\"targetBlock\",\"allNestedComments\",\"functionNames_\",\"reset\",\"quote_\",\"Breakpoint_Icon\",\"Icon\",\"createIcon\",\"create\",\"width_\",\"height_\",\"drawIcon_\",\"group\",\"createSvgElement\",\"class\",\"block_\",\"cx\",\"cy\",\"setVisible\",\"visible\",\"isEnable\",\"myDisable\",\"index\",\"splice\",\"dom\",\"removeNode\",\"iconGroup_\",\"createElementNS\",\"SVG_NS\",\"setAttribute\",\"body\",\"runtimeStyle\",\"currentStyle\",\"appendChild\",\"BlockSvg\",\"showContextMenu_\",\"readOnly\",\"contextMenu\",\"menuOptions\",\"isDeletable\",\"isMovable\",\"isInFlyout\",\"ContextMenu\",\"blockDuplicateOption\",\"isEditable\",\"collapsed_\",\"comments\",\"blockCommentOption\",\"NEXT_STATEMENT\",\"inlineOption\",\"enabled\",\"isInline\",\"getInputsInline\",\"text\",\"Msg\",\"setInputsInline\",\"collapse\",\"expandOption\",\"setCollapsed\",\"collapseOption\",\"disableOption\",\"getInheritedDisabled\",\"setDisabled\",\"blockDeleteOption\",\"breakpointOption\",\"icon\",\"new_br\",\"DisableBreakpointOption\",\"runToCursorOption\",\"watchOption\",\"toString\",\"new_watch\",\"evalOption\",\"blockHelpOption\",\"customContextMenu\",\"show\",\"RTL\",\"currentBlock\",\"addEventListener\",\"innerHTML\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\",\"onclick\",\"Block\",\"opt_maxLength\",\"opt_emptyToken\",\"emptyFieldPlaceholder\",\"getInput\",\"fieldRow\",\"text_\",\"field\",\"FieldDropdown\",\"getValue\",\"getText\",\"child\",\"child_text\",\"string\",\"trim\",\"truncate\",\"argument0\",\"textOrder\",\"where1\",\"where2\",\"at1\",\"at2\",\"getIndex_\",\"wherePascalCase\",\"FIRST\",\"LAST\",\"FROM_START\",\"FROM_END\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 3);\\n\",\"export var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher = {};\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\"); // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher[\\\"alert\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"prompt\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"highlightBlock\\\"] = (data) => {\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t\\t\\t\\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\\t\\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\\r\\n\\t\\t\\t\\t\\t\\t\\t// block.setCollapsed(false);\\r\\n\\t\\t\\t\\t}; \\t\\t\\t\\t\\t\\t\\r\\n\\t\\tdispatcher[\\\"execution_finished\\\"] = () => {\\r\\n\\t\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t\\t};\\t\\t\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blockly_Debugger = {};\\r\\nBlockly_Debugger.actions = {};\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"] = {}; \\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blockly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"] = {};\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = (function(){\\r\\n    var watches = [];\\r\\n    \\r\\n    function handler(){\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n        if(!Debuggee_Worker.hasInstance()) return; \\r\\n        Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"watch\\\", \\\"data\\\": watches});\\r\\n    }\\r\\n\\r\\n    function update(new_watches){\\r\\n        watches = new_watches;\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getWatches(){\\r\\n        return watches;\\r\\n    }\\r\\n\\r\\n    function init(){\\r\\n        for(var i=0; i<watches.length; ++i){\\r\\n            watches[i].value = undefined;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        handler : handler,\\r\\n        update : update,\\r\\n        getWatches : getWatches,\\r\\n        init : init       \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = (function(){\\r\\n    var variables = [];\\r\\n\\r\\n    function handler() {};     \\r\\n\\r\\n    function update(new_vars){\\r\\n        variables = new_vars;\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getVariables(){\\r\\n        return variables;\\r\\n    };\\r\\n\\r\\n    function init(){\\r\\n        // var variables1 = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n        // var variables2 = (window.workspace[\\\"blockly2\\\"].getAllVariables()).map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n\\r\\n\\r\\n        var workspace_vars = [];\\r\\n        workspace_vars[0] = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n        workspace_vars[1] = window.workspace[\\\"blockly2\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n\\r\\n        for(var i = 0; i<workspace_vars.length; i++){\\r\\n            var variables_names =  variables.map((variable) => {\\r\\n                return variable.name;\\r\\n            });   \\r\\n            for(var j = 0; j<workspace_vars[i].length; ++j){\\r\\n                if(variables_names.includes(workspace_vars[i][j])) continue;\\r\\n                var nvar = {\\r\\n                    \\\"name\\\" : workspace_vars[i][j],\\r\\n                    \\\"value\\\" : undefined\\r\\n                }\\r\\n                variables.push(nvar);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        // var variables_names =  variables.map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n\\r\\n        // for(var i = 0; i<variables1.length; ++i){\\r\\n        //     if(variables_names.includes(variables1[i])) continue;\\r\\n        //     var nvar = {\\r\\n        //         \\\"name\\\" : variables1[i],\\r\\n        //         \\\"value\\\" : undefined\\r\\n        //     }\\r\\n        //     variables.push(nvar);\\r\\n        // }\\r\\n\\r\\n        // variables_names =  variables.map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n        \\r\\n        // for(var i = 0; i<variables2.length; ++i){\\r\\n        //     if(variables_names.includes(variables2[i])) continue;\\r\\n        //     var nvar = {\\r\\n        //         \\\"name\\\" : variables2[i],\\r\\n        //         \\\"value\\\" : undefined\\r\\n        //     }\\r\\n        //     variables.push(nvar);\\r\\n        // }\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n\\r\\n    return {\\r\\n        update : update,\\r\\n        getVariables : getVariables,\\r\\n        init : init       \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"].handler = function (expr){\\r\\n    if(!Debuggee_Worker.hasInstance()) return;\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"eval\\\", \\\"data\\\": expr});\\r\\n}\\r\\n\\r\\n\\r\\nDebuggee_Worker.AddOnDispacher(\\\"watches\\\", Blockly_Debugger.actions[\\\"Watch\\\"].update);\\r\\nDebuggee_Worker.AddOnDispacher(\\\"variables\\\", Blockly_Debugger.actions[\\\"Variables\\\"].update);\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\nimport './watches.js';\\r\\n\\r\\n// function addCode(js){                                // gia na kanw debug to eval \\r\\n//     var e = document.createElement('script');\\r\\n//     e.type = 'text/javascript';\\r\\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\\r\\n//     document.head.appendChild(e);\\r\\n// }\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"].handler = (cursorBreakpoint) => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    \\r\\n    Blockly_Debugger.actions[\\\"Variables\\\"].init();\\r\\n    Blockly_Debugger.actions[\\\"Watch\\\"].init();\\r\\n\\r\\n    // var code = \\\"async function code(){\\\\n\\\" + code1 + code2 +\\\" };\\\\ncode();\\\";\\r\\n    // addCode(code);\\r\\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \\\"\\\";\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return { \\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                                      \\\"enable\\\" : obj.enable}}),\\r\\n                                                                               \\\"cursorBreakpoint\\\": cursorBreakpoint,\\r\\n                                                                               \\\"watches\\\": Blockly_Debugger.actions[\\\"Watch\\\"].getWatches(),\\r\\n                                                                               \\\"variables\\\": Blockly_Debugger.actions[\\\"Variables\\\"].getVariables()\\r\\n                                                                            }});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].wait_view = (block_id) => {\\r\\n    document.getElementById(block_id).style.stroke = 'red';\\r\\n    document.getElementById(block_id).style.fill = 'yellow';\\r\\n    document.getElementById(block_id).style['stroke-width'] = '5px';\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].reset_view = (block_id) =>{\\r\\n    document.getElementById(block_id).style.stroke = 'yellow';\\r\\n    document.getElementById(block_id).style.fill = 'red';\\r\\n    document.getElementById(block_id).style['stroke-width'] = '1px';\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].disable = (block_id) =>{\\r\\n    var i = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\\r\\n    if(i!=-1){\\r\\n        document.getElementById(block_id).style.fill = '#FA8258';\\r\\n        Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints[i].enable = false;\\r\\n        if(Debuggee_Worker.hasInstance()) \\r\\n            Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n    }\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].enable = (block_id) =>{\\r\\n    var i = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\\r\\n    if(i!=-1){\\r\\n        document.getElementById(block_id).style.fill = 'red';\\r\\n        Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints[i].enable = true;\\r\\n        if(Debuggee_Worker.hasInstance()) \\r\\n            Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].handler = (block_id) => {\\r\\n    if(!Debuggee_Worker.hasInstance()) {\\r\\n        Blockly_Debugger.actions[\\\"Start\\\"].handler(block_id);\\r\\n        return;\\r\\n    }; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"runToCursor\\\", \\\"data\\\": block_id});\\r\\n}\\r\\n\\r\\nDebuggee_Worker.AddOnDispacher(\\\"breakpoint_wait_view\\\", Blockly_Debugger.actions[\\\"Breakpoint\\\"].wait_view);\\r\\nDebuggee_Worker.AddOnDispacher(\\\"breakpoint_reset_view\\\", Blockly_Debugger.actions[\\\"Breakpoint\\\"].reset_view);\\r\\n\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    // old blockly\\r\\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \\r\\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\\r\\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n//     // Get element at index.\\r\\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n//     var mode = block.getFieldValue('MODE') || 'GET';\\r\\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n//     list = '(' + list + ')';\\r\\n//     if (where == 'FIRST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.shift()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.shift();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'LAST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.pop()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.pop();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_START') {\\r\\n//       // Blockly uses one-based indicies.\\r\\n//       if (Blockly.isNumber(at)) {\\r\\n//         // If the index is a naked number, decrement it right now.\\r\\n//         at = parseFloat(at) - 1;\\r\\n//       } else {\\r\\n//         // If the index is dynamic, decrement it in code.\\r\\n//         at += ' - 1';\\r\\n//       }\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[' + at + ']';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.splice(' + at + ', 1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.splice(' + at + ', 1);\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_END') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-' + at + ')[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n//         var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//             'lists_remove_from_end',\\r\\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//                 '(list, x) {',\\r\\n//               '  x = list.length - x;',\\r\\n//               '  return list.splice(x, 1)[0];',\\r\\n//               '}']);\\r\\n//         code = functionName + '(' + list + ', ' + at + ')';\\r\\n//         if (mode == 'GET_REMOVE') {\\r\\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//         } else if (mode == 'REMOVE') {\\r\\n//           return code + ';\\\\n';\\r\\n//         }\\r\\n//       }\\r\\n//     } else if (where == 'RANDOM') {\\r\\n//       var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//           'lists_get_random_item',\\r\\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//               '(list, remove) {',\\r\\n//             '  var x = Math.floor(Math.random() * list.length);',\\r\\n//             '  if (remove) {',\\r\\n//             '    return list.splice(x, 1)[0];',\\r\\n//             '  } else {',\\r\\n//             '    return list[x];',\\r\\n//             '  }',\\r\\n//             '}']);\\r\\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return code + ';\\\\n';\\r\\n//       }\\r\\n//     }\\r\\n//     throw 'Unhandled combination (lists_getIndex).';\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n  // Get element at index.\\r\\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n  var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\\r\\n      Blockly.JavaScript.ORDER_MEMBER;\\r\\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\\r\\n  list = '(' + list + ')';\\r\\n  switch (where) {\\r\\n    case ('FIRST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('LAST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_START'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_END'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);';\\r\\n      }\\r\\n      break;\\r\\n    case ('RANDOM'):\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'listsGetRandomItem',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n           '  var x = Math.floor(Math.random() * list.length);',\\r\\n           '  if (remove) {',\\r\\n           '    return list.splice(x, 1)[0];',\\r\\n           '  } else {',\\r\\n           '    return list[x];',\\r\\n           '  }',\\r\\n           '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n  throw 'Unhandled combination (lists_getIndex).';\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n\\r\\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n  //   // Set element at index.\\r\\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  //   var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n  //   // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n  //   list = '(' + list + ')';\\r\\n  //   function cacheList() {\\r\\n  //     if (list.match(/^\\\\w+$/)) {\\r\\n  //       return '';\\r\\n  //     }\\r\\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n  //     list = listVar;\\r\\n  //     return code;\\r\\n  //   }\\r\\n  //   if (where == 'FIRST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[0] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.unshift(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'LAST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       var code = cacheList();\\r\\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.push(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_START') {\\r\\n  //     // Blockly uses one-based indicies.\\r\\n  //     if (Blockly.isNumber(at)) {\\r\\n  //       // If the index is a naked number, decrement it right now.\\r\\n  //       at = parseFloat(at) - 1;\\r\\n  //     } else {\\r\\n  //       // If the index is dynamic, decrement it in code.\\r\\n  //       at += ' - 1';\\r\\n  //     }\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_END') {\\r\\n  //     var code = cacheList();\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n  //           ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   } else if (where == 'RANDOM') {\\r\\n  //     var code = cacheList();\\r\\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n  //         '.length);\\\\n';\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   }\\r\\n  //   throw 'Unhandled combination (lists_setIndex).';\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n\\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmpList', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    switch (where) {\\r\\n      case ('FIRST'):\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[0] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.unshift(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('LAST'):\\r\\n        if (mode == 'SET') {\\r\\n          var code = cacheList();\\r\\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.push(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_START'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_END'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\\r\\n            Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n        var code = cacheList();\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n              ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n      case ('RANDOM'):\\r\\n        var code = cacheList();\\r\\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            'tmpX', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n            '.length);\\\\n';\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['lists_split'] = function(block) {\\r\\n  //   // Block for splitting text into a list, or joining a list into text.\\r\\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER);\\r\\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //   var mode = block.getFieldValue('MODE');\\r\\n  //   if (mode == 'SPLIT') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '\\\\'\\\\'';\\r\\n  //     }\\r\\n  //     var functionName = 'split';\\r\\n  //   } else if (mode == 'JOIN') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '[]';\\r\\n  //     }\\r\\n  //     var functionName = 'join';\\r\\n  //   } else {\\r\\n  //     throw 'Unknown mode: ' + mode;\\r\\n  //   }\\r\\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!input) {\\r\\n        input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!input) {\\r\\n        input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_reverse'] = function(block) {\\r\\n    // Block for reversing a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var code = '(' + list + ')' + '.slice().reverse()';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n//     // Define a procedure with a return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n//       branch = Blockly.JavaScript.prefixLines(\\r\\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\'), eval(update_values())'\\r\\n//         ), Blockly.JavaScript.INDENT) + branch ;\\r\\n//     }\\r\\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\'') + branch;\\r\\n//     }\\r\\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n//         Blockly.JavaScript.ORDER_NONE) || '';\\r\\n//     if (returnValue) {\\r\\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n//     }else{\\r\\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n//     }\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n//           Blockly.Variables.NAME_TYPE);\\r\\n//     }\\r\\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n//         branch +    \\r\\n//         returnValue + '}'; \\r\\n//     code = Blockly.JavaScript.scrub_(block, code);\\r\\n//     Blockly.JavaScript.definitions_[funcName] = code;\\r\\n//     return null;\\r\\n//   };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.\\r\\n        branch = Blockly.JavaScript.prefixLines(\\r\\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \\\"0\\\" + ', \\\\'' + id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n\\r\\n     if (returnValue) {\\r\\n         returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n     }else{\\r\\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n     }\\r\\n\\r\\n\\r\\n    var args = [];\\r\\n    for (var i = 0; i < block.arguments_.length; i++) {\\r\\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n                branch +    \\r\\n                returnValue + '}';\\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    // Add % so as not to collide with helper functions in definitions list.\\r\\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\\\n  Blockly_Debuggee.state.currState.parent = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n      if (this.STATEMENT_PREFIX) \\r\\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), ' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! New blockly \\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\') ') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  id = id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\\r\\n\\r\\n\\r\\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\\r\\n Blockly.Generator.prototype.myBlockToCode = function(block) {\\r\\n   console.log(\\\"myBlockToCode\\\");\\r\\n  if (!block || block.disabled) {\\r\\n    return '';\\r\\n  }\\r\\n  this.init(block.workspace);           //  added \\r\\n  var func = this[block.type];\\r\\n  var stmt_Prefix = this.STATEMENT_PREFIX;\\r\\n  this.STATEMENT_PREFIX = null;\\r\\n  goog.asserts.assertFunction(func,\\r\\n      'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n      this.name_, block.type);\\r\\n   var code = func.call(block, block);\\r\\n  if (goog.isArray(code)) {\\r\\n       goog.asserts.assert(block.outputConnection,\\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\\r\\n  } else if (goog.isString(code)) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    //return code;\\r\\n    return this.myscrub_(block, code);\\r\\n  } else if (code === null) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return '';\\r\\n  } else {\\r\\n    goog.asserts.fail('Invalid code generated: %s', code);\\r\\n  }\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.JavaScript.myscrub_=function(a,b){\\r\\n  var c=\\\"\\\";\\r\\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\\r\\n    var d=a.getCommentText();\\r\\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\\\"/**\\\\n\\\"+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\" * \\\")+\\\" */\\\\n\\\"):c+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\"// \\\"));\\r\\n    for(var e=0;e<a.inputList.length;e++)\\r\\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\\\"// \\\"))\\r\\n  }\\r\\n  return c+b;\\r\\n}\\r\\n\\r\\n\\r\\nBlockly.JavaScript.finish=function(a){\\r\\n  var b=[],c;\\r\\n  for(c in Blockly.JavaScript.definitions_){\\r\\n    if(c === \\\"variables\\\") continue;\\r\\n    b.push(Blockly.JavaScript.definitions_[c]);\\r\\n  }\\r\\n  delete Blockly.JavaScript.definitions_;\\r\\n  delete Blockly.JavaScript.functionNames_;\\r\\n  Blockly.JavaScript.variableDB_.reset();\\r\\n  return b.join(\\\"\\\\n\\\\n\\\")+\\\"\\\\n\\\\n\\\\n\\\"+a};\\r\\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\\\";\\\\n\\\"};\\r\\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\\\\\/g,\\\"\\\\\\\\\\\\\\\\\\\").replace(/\\\\n/g,\\\"\\\\\\\\\\\\n\\\").replace(/'/g,\\\"\\\\\\\\'\\\");\\r\\n  return\\\"'\\\"+a+\\\"'\\\"\\r\\n};\\r\\n\",\"import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\\r\\n\\r\\n\\r\\nexport var Breakpoint_Icon = function(block) {\\r\\n    Blockly.Icon.call(this, block);\\r\\n    this.createIcon();\\r\\n  };\\r\\n\\r\\n  Breakpoint_Icon.prototype = Object.create(Blockly.Icon.prototype);\\r\\n  Breakpoint_Icon.prototype.width_ = 160;\\r\\n  Breakpoint_Icon.prototype.height_ = 80;\\r\\n\\r\\n  Breakpoint_Icon.prototype.drawIcon_ = function(group) {\\r\\n    Blockly.utils.createSvgElement('circle',\\r\\n        {'class': 'breakpoint_enable', 'id' : this.block_.id, 'r': '6', 'cx': '8', 'cy': '8'},\\r\\n        group); \\r\\n        \\r\\n  }\\r\\n\\r\\n\\r\\n  // prepei na brw allo func name\\r\\n  Breakpoint_Icon.prototype.setVisible = function (visible){\\r\\n    var isEnable = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.block_id==this.block_.id) return obj.enable;});\\r\\n    console.log(isEnable);\\r\\n    if(isEnable[0]){\\r\\n      Blockly_Debugger.actions[\\\"Breakpoint\\\"].disable(this.block_.id);\\r\\n    }else {\\r\\n      this.myDisable();\\r\\n      var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(this.block_.id);\\r\\n      if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n    }\\r\\n}\\r\\n  \\r\\nBreakpoint_Icon.prototype.myDisable = function (){\\r\\n  goog.dom.removeNode(this.iconGroup_);  \\r\\n  this.iconGroup_=null;\\r\\n}\\r\\n\\r\\n\\r\\n// ---------------------------------------------------------------------     \\r\\nBlockly.utils.createSvgElement=function(a,b,c){\\r\\n  a=document.createElementNS(Blockly.SVG_NS,a);\\r\\n  for(var d in b)a.setAttribute(d,b[d]);\\r\\n  document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);\\r\\n  c&&c.appendChild(a);\\r\\n  return a;\\r\\n}\\r\\n\",\"import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\\r\\nimport {Breakpoint_Icon} from './breakpoint.js';\\r\\n\\r\\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n    if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n      return;\\r\\n    }\\r\\n    // Save the current block in a variable for use in closures.\\r\\n    var block = this;\\r\\n    var menuOptions = [];\\r\\n  \\r\\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\\r\\n      if (this.isEditable() && !this.collapsed_ &&\\r\\n          this.workspace.options.comments) {\\r\\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\\r\\n      }\\r\\n  \\r\\n      // Option to make block inline.\\r\\n      if (!this.collapsed_) {\\r\\n        for (var i = 1; i < this.inputList.length; i++) {\\r\\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n            // Only display this option if there are two value or dummy inputs\\r\\n            // next to each other.\\r\\n            var inlineOption = {enabled: true};\\r\\n            var isInline = this.getInputsInline();\\r\\n            inlineOption.text = isInline ?\\r\\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\\r\\n            inlineOption.callback = function() {\\r\\n              block.setInputsInline(!isInline);\\r\\n            };\\r\\n            menuOptions.push(inlineOption);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.collapse) {\\r\\n        // Option to collapse/expand block.\\r\\n        if (this.collapsed_) {\\r\\n          var expandOption = {enabled: true};\\r\\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\\r\\n          expandOption.callback = function() {\\r\\n            block.setCollapsed(false);\\r\\n          };\\r\\n          menuOptions.push(expandOption);\\r\\n        } else {\\r\\n          var collapseOption = {enabled: true};\\r\\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\\r\\n          collapseOption.callback = function() {\\r\\n            block.setCollapsed(true);\\r\\n          };\\r\\n          menuOptions.push(collapseOption);\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.disable) {\\r\\n        // Option to disable/enable block.\\r\\n        var disableOption = {\\r\\n          text: this.disabled ?\\r\\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\\r\\n          enabled: !this.getInheritedDisabled(),\\r\\n          callback: function() {\\r\\n            block.setDisabled(!block.disabled);\\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(disableOption);\\r\\n      }\\r\\n  \\r\\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\\r\\n\\r\\n\\r\\n      // Breakpoints\\r\\n      var breakpointOption = {\\r\\n        text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n            if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\\r\\n              var new_br = {\\r\\n                \\\"block_id\\\" : block.id,\\r\\n                \\\"enable\\\" : true,\\r\\n                \\\"icon\\\" : new Breakpoint_Icon(block)\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(new_br);\\r\\n              block.setCollapsed(false);\\r\\n            }\\r\\n            else{\\r\\n              var icon = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\\r\\n              icon[0].myDisable();\\r\\n              var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n          }\\r\\n      };\\r\\n      menuOptions.push(breakpointOption);\\r\\n\\r\\n      if(Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\\r\\n      var DisableBreakpointOption = {\\r\\n        text: (Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \\\"Disable Breakpoint\\\" : \\\"Enable Breakpoint\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          if(Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].disable(block.id);\\r\\n          else\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].enable(block.id);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      menuOptions.push(DisableBreakpointOption);\\r\\n      }\\r\\n\\r\\n      // Run to cursor\\r\\n      var runToCursorOption = {\\r\\n        text: \\\"Run to cursor\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n        }\\r\\n      };\\r\\n      menuOptions.push(runToCursorOption);\\r\\n\\r\\n\\r\\n      if(Debuggee_Worker.hasInstance()){\\r\\n        var watchOption = {\\r\\n          text:(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\",\\r\\n          enabled: (block.outputConnection==null) ? false : true,\\r\\n          callback: function(){\\r\\n            var name = block.toString();\\r\\n\\r\\n            if(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\\r\\n              var code = Blockly.JavaScript.myBlockToCode(block);\\r\\n              var new_watch = {\\r\\n                \\\"name\\\": name,\\r\\n                \\\"code\\\": code, \\r\\n                \\\"value\\\": undefined\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().push(new_watch);\\r\\n            }else{\\r\\n              var index = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Watch\\\"].handler();  \\r\\n          }\\r\\n        }\\r\\n        menuOptions.push(watchOption);\\r\\n\\r\\n\\r\\n        // Evaluate\\r\\n        var evalOption = {\\r\\n          text: \\\"Evaluate\\\",\\r\\n          enabled: (block.type === \\\"variables_set\\\" || block.type===\\\"math_change\\\") ? true : false,\\r\\n          callback: function(){\\r\\n            Blockly_Debugger.actions[\\\"Eval\\\"].handler(Blockly.JavaScript.myBlockToCode(block));  \\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(evalOption);   \\r\\n      }\\r\\n    }\\r\\n\\r\\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\\r\\n\\r\\n\\r\\n  \\r\\n    // Allow the block to add or modify menuOptions.\\r\\n    if (this.customContextMenu) {\\r\\n      this.customContextMenu(menuOptions);\\r\\n    }\\r\\n  \\r\\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\\r\\n    Blockly.ContextMenu.currentBlock = this;\\r\\n  };\\r\\n\\r\\n\\r\\n\",\"import '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\naddEventListener(\\\"updateTable\\\",function (){\\r\\n    let variables = Blockly_Debugger.actions[\\\"Variables\\\"].getVariables();\\r\\n    document.getElementById(\\\"variables\\\").innerHTML = '';\\r\\n    for(var i = 0; i<variables.length; ++i){\\r\\n        document.getElementById(\\\"variables\\\").innerHTML += `<tr>\\r\\n                                                            <td>` + variables[i].name + `</td>\\r\\n                                                            <td>` +  variables[i].value + `</td>\\r\\n                                                            <td>` + typeof variables[i].value + `</td>\\r\\n                                                          </tr>`;\\r\\n    }\\r\\n});\\r\\n\\r\\n\\r\\naddEventListener(\\\"updateWatchesTable\\\",function (){\\r\\n    let watches = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches();\\r\\n    document.getElementById(\\\"watches\\\").innerHTML = '';\\r\\n    for(var i = 0; i<watches.length; ++i){\\r\\n        document.getElementById(\\\"watches\\\").innerHTML += `<tr>\\r\\n                                                            <td>` + watches[i].name + `</td>\\r\\n                                                            <td>` + watches[i].code + `</td>\\r\\n                                                            <td>` + watches[i].value + `</td>\\r\\n                                                            <td>` + typeof watches[i].value + `</td>\\r\\n                                                        </tr>`;\\r\\n    }\\r\\n});\",\"import './events.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\nwindow.workspace = {};\\r\\n\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly1\\\"]);\\r\\n\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly2\\\"]);\\r\\n\\r\\n\\t//Blockly_Debugger.actions[\\\"Variables\\\"].init();\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blockly_Debugger.actions[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blockly_Debugger.actions[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blockly_Debugger.actions[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blockly_Debugger.actions[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blockly_Debugger.actions[\\\"Start\\\"].handler;\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\",\"\\r\\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\\r\\n    var text = [];\\r\\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\\r\\n    if (this.collapsed_) {\\r\\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\\r\\n    } else {\\r\\n      for (var i = 0, input; input = this.inputList[i]; i++) {\\r\\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\\r\\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          } else {\\r\\n            text.push(field.getText());\\r\\n          }\\r\\n        }\\r\\n        if (input.connection) {\\r\\n          var child = input.connection.targetBlock();\\r\\n          if (child) {\\r\\n              var child_text = child.toString(undefined, opt_emptyToken);\\r\\n              child_text = \\\"(\\\" + child_text + \\\")\\\";\\r\\n            text.push(child_text);\\r\\n          } else {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    text = goog.string.trim(text.join(' ')) || '???';\\r\\n    if (opt_maxLength) {\\r\\n      // TODO: Improve truncation so that text from this block is given priority.\\r\\n      // E.g. \\\"1+2+3+4+5+6+7+8+9=0\\\" should be \\\"...6+7+8+9=0\\\", not \\\"1+2+3+4+5...\\\".\\r\\n      // E.g. \\\"1+2+3+4+5=6+7+8+9+0\\\" should be \\\"...4+5=6+7...\\\".\\r\\n      text = goog.string.truncate(text, opt_maxLength);\\r\\n    }\\r\\n    return text;\\r\\n  };\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\\r\\n        Blockly.JavaScript.ORDER_MEMBER;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        // Adjust index if using one-based indices.\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n        var code = text + '.slice(' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'textRandomLetter',\\r\\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n             '  var x = Math.floor(Math.random() * text.length);',\\r\\n             '  return text[x];',\\r\\n             '}']);\\r\\n        var code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else if (text.match(/^'?\\\\w+'?$/) ||\\r\\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\\r\\n        where2 != 'FROM_END' && where2 != 'LAST')) {\\r\\n      // If the text is a variable or literal or doesn't require a call for\\r\\n      // length, don't generate a helper function.\\r\\n      text = '(' + text + ')';\\r\\n      switch (where1) {\\r\\n        case 'FROM_START':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at1 = text + '.length - ' + at1;\\r\\n          break;\\r\\n        case 'FIRST':\\r\\n          var at1 = '0';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      switch (where2) {\\r\\n        case 'FROM_START':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at2 = text + '.length - ' + at2;\\r\\n          break;\\r\\n        case 'LAST':\\r\\n          var at2 = text + '.length';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\\r\\n    } else {\\r\\n      text = '(' + text + ')';\\r\\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\\r\\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\\r\\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\\r\\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n          '(sequence' +\\r\\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\\r\\n          // we add it as a parameter.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\\r\\n          ') {',\\r\\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\\r\\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\\r\\n            '  return sequence.slice(start, end);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text +\\r\\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\\r\\n          // pass it.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\\r\\n          ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n  //   // Change capitalization.\\r\\n  //   var OPERATORS = {\\r\\n  //     'UPPERCASE': '.toUpperCase()',\\r\\n  //     'LOWERCASE': '.toLowerCase()',\\r\\n  //     'TITLECASE': null\\r\\n  //   };\\r\\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n  //   var code;\\r\\n  //   if (operator) {\\r\\n  //     // Upper and lower case are functions built into JavaScript.\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n  //     code = '(' + argument0 + ')' + operator;\\r\\n  //   } else {\\r\\n  //     // Title case is not a native JavaScript function.  Define one.\\r\\n  //     var functionName = Blockly.JavaScript.provideFunction_(\\r\\n  //         'text_toTitleCase',\\r\\n  //         [ 'function ' +\\r\\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n  //           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n  //               'txt.substring(1).toLowerCase();});',\\r\\n  //           '}']);\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n  //   }\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\\r\\n        Blockly.JavaScript.ORDER_NONE;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var code = '(' + text + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'textToTitleCase',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(str) {',\\r\\n           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n              'txt.substring(1).toLowerCase();});',\\r\\n           '}']);\\r\\n      var code = functionName + '(' + '(' + text + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\\r\\n\\r\\n\\r\\n\"]}","code":"!function(t){var e={};function a(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,o){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=3)}([,,,function(t,e,a){\"use strict\";a.r(e);var o=function(){var t,e={};function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e.alert=(t=>{window.alert(t)}),e.prompt=(t=>{o.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})}),e.highlightBlock=(t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)}),e.execution_finished=(()=>{t=void 0}),t.onmessage=function(t){let a=t.data,o=a.data;e[a.type](o)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),n={actions:{}};n.actions.Continue={},n.actions.Continue.handler=(()=>{o.Instance().postMessage({type:\"continue\"})}),n.actions.StepIn={},n.actions.StepOver={},n.actions.StepParent={},n.actions.StepOut={},n.actions.StepIn.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepIn\"})}),n.actions.StepOver.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepOver\"})}),n.actions.StepParent.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepParent\"})}),n.actions.StepOut.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepOut\"})}),n.actions.Stop={},n.actions.Stop.handler=(()=>{o.Stop()}),n.actions.Watch={},n.actions.Variables={},n.actions.Eval={},n.actions.Watch=function(){var t=[];return{handler:function(){dispatchEvent(new Event(\"updateWatchesTable\")),o.hasInstance()&&o.Instance().postMessage({type:\"watch\",data:t})},update:function(e){t=e,dispatchEvent(new Event(\"updateWatchesTable\"))},getWatches:function(){return t},init:function(){for(var e=0;e<t.length;++e)t[e].value=void 0}}}(),n.actions.Variables=function(){var t=[];return{update:function(e){t=e,dispatchEvent(new Event(\"updateTable\"))},getVariables:function(){return t},init:function(){var e=[];e[0]=window.workspace.blockly1.getAllVariables().map(t=>t.name),e[1]=window.workspace.blockly2.getAllVariables().map(t=>t.name);for(var a=0;a<e.length;a++)for(var o=t.map(t=>t.name),n=0;n<e[a].length;++n)if(!o.includes(e[a][n])){var l={name:e[a][n],value:void 0};t.push(l)}dispatchEvent(new Event(\"updateTable\"))}}}(),n.actions.Eval.handler=function(t){o.hasInstance()&&o.Instance().postMessage({type:\"eval\",data:t})},o.AddOnDispacher(\"watches\",n.actions.Watch.update),o.AddOnDispacher(\"variables\",n.actions.Variables.update),n.actions.Start={},n.actions.Start.handler=(t=>{if(!o.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),a=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),l=e+a;n.actions.Variables.init(),n.actions.Watch.init(),t instanceof MouseEvent&&(t=\"\"),o.Instance().postMessage({type:\"start_debugging\",data:{code:l,breakpoints:n.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable})),cursorBreakpoint:t,watches:n.actions.Watch.getWatches(),variables:n.actions.Variables.getVariables()}}),console.log(e+a)}}),n.actions.Breakpoint={},n.actions.RunToCursor={},n.actions.Breakpoint.breakpoints=[],n.actions.Breakpoint.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"breakpoint\",data:n.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))})}),n.actions.Breakpoint.wait_view=(t=>{document.getElementById(t).style.stroke=\"red\",document.getElementById(t).style.fill=\"yellow\",document.getElementById(t).style[\"stroke-width\"]=\"5px\"}),n.actions.Breakpoint.reset_view=(t=>{document.getElementById(t).style.stroke=\"yellow\",document.getElementById(t).style.fill=\"red\",document.getElementById(t).style[\"stroke-width\"]=\"1px\"}),n.actions.Breakpoint.disable=(t=>{var e=n.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(t);-1!=e&&(document.getElementById(t).style.fill=\"#FA8258\",n.actions.Breakpoint.breakpoints[e].enable=!1,o.hasInstance()&&o.Instance().postMessage({type:\"breakpoint\",data:n.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))}))}),n.actions.Breakpoint.enable=(t=>{var e=n.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(t);-1!=e&&(document.getElementById(t).style.fill=\"red\",n.actions.Breakpoint.breakpoints[e].enable=!0,o.hasInstance()&&o.Instance().postMessage({type:\"breakpoint\",data:n.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))}))}),n.actions.RunToCursor.handler=(t=>{o.hasInstance()?o.Instance().postMessage({type:\"runToCursor\",data:t}):n.actions.Start.handler(t)}),o.AddOnDispacher(\"breakpoint_wait_view\",n.actions.Breakpoint.wait_view),o.AddOnDispacher(\"breakpoint_reset_view\",n.actions.Breakpoint.reset_view);var l={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[o+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",o=\"RANDOM\"==a?Blockly.JavaScript.ORDER_COMMA:Blockly.JavaScript.ORDER_MEMBER,n=Blockly.JavaScript.valueToCode(t,\"VALUE\",o)||\"[]\";switch(n=\"(\"+n+\")\",a){case\"FIRST\":if(\"GET\"==e)return[i=n+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[i=n+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return n+\".shift();\\n\";break;case\"LAST\":if(\"GET\"==e)return[i=n+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[i=n+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return n+\".pop();\\n\";break;case\"FROM_START\":var l=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"GET\"==e)return[i=n+\"[\"+l+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[i=n+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return n+\".splice(\"+l+\", 1);\\n\";break;case\"FROM_END\":var i;l=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0);if(\"GET\"==e)return[i=n+\".slice(\"+l+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e)return[i=n+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return n+\".splice(\"+l+\", 1);\";break;case\"RANDOM\":if(i=Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+n+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[i,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return i+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",o=t.getFieldValue(\"WHERE\")||\"FROM_START\",n=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function l(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}switch(e=\"(\"+e+\")\",o){case\"FIRST\":if(\"SET\"==a)return e+\"[0] = \"+n+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+n+\");\\n\";break;case\"LAST\":if(\"SET\"==a){var i=l();return i+=e+\"[\"+e+\".length - 1] = \"+n+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+n+\");\\n\";break;case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"SET\"==a)return e+\"[\"+c+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+c+\", 0, \"+n+\");\\n\";break;case\"FROM_END\":c=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION),i=l();if(\"SET\"==a)return i+=e+\"[\"+e+\".length - \"+c+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return i+=e+\".splice(\"+e+\".length - \"+c+\", 0, \"+n+\");\\n\";break;case\"RANDOM\":i=l();var r=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\",Blockly.Variables.NAME_TYPE);if(i+=\"var \"+r+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return i+=e+\"[\"+r+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return i+=e+\".splice(\"+r+\", 0, \"+n+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=t.getFieldValue(\"MODE\");if(\"SPLIT\"==o){e||(e=\"''\");var n=\"split\"}else{if(\"JOIN\"!=o)throw\"Unknown mode: \"+o;e||(e=\"[]\");n=\"join\"}return[\"(\"+e+\").\"+n+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_reverse=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").slice().reverse()\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");if(Blockly.JavaScript.STATEMENT_PREFIX){var o=t.id.replace(/\\$/g,\"$$$$\");a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(0, '\"+o+\"', '\"+l.currentSystemEditorId+\"')\"),Blockly.JavaScript.INDENT)+a}Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var n=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";n=n?\"  let $returnValue = \"+n+\";\\n  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return $returnValue;\\n\":\"  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return;\\n\";for(var i=[],c=0;c<t.arguments_.length;c++)i[c]=Blockly.JavaScript.variableDB_.getName(t.arguments_[c],Blockly.Variables.NAME_TYPE);var r=\"async function \"+e+\"(\"+i.join(\", \")+\") {\\n  let global_nest = Blockly_Debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n\"+a+n+\"}\";return r=Blockly.JavaScript.scrub_(t,r),Blockly.JavaScript.definitions_[\"%\"+e]=r,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],o=0;o<t.arguments_.length;o++)a[o]=Blockly.JavaScript.valueToCode(t,\"ARG\"+o,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],o=0;o<t.arguments_.length;o++)a[o]=Blockly.JavaScript.valueToCode(t,\"ARG\"+o,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"};a(6);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++l.nest,o=e.call(t,t);if(l.nest--,goog.isArray(o))return goog.asserts.assert(t.outputConnection,//!! New blockly \n'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX&&(o[0]=\"await $id(eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+l.currentSystemEditorId+\"'), \"+o[0]+\")\"),[this.scrub_(t,o[0]),o[1]];if(goog.isString(o)){t.id.replace(/\\$/g,\"$$$$\");return this.STATEMENT_PREFIX&&(o=this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+l.currentSystemEditorId+\"') \")+o),this.scrub_(t,o)}if(null===o)return\"\";goog.asserts.fail(\"Invalid code generated: %s\",o)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return e=e.replace(/\\$/g,\"$$$$\"),this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+l.nest+\", '\"+e+\"', '\"+l.currentSystemEditorId+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);l.currentSystemEditorId=t.systemEditorId;var o=\"\\n// start source code of another editor\\n\";e.push(o);for(var n,i=0;n=a[i];i++)o=this.blockToCode(n),goog.isArray(o)&&(o=o[0]),o&&(n.outputConnection&&this.scrubNakedValue&&(o=this.scrubNakedValue(o)),e.push(o));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},Blockly.Generator.prototype.myBlockToCode=function(t){if(console.log(\"myBlockToCode\"),!t||t.disabled)return\"\";this.init(t.workspace);var e=this[t.type],a=this.STATEMENT_PREFIX;this.STATEMENT_PREFIX=null,goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var o=e.call(t,t);return goog.isArray(o)?(goog.asserts.assert(t.outputConnection,'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX=a,this.myscrub_(t,o[0])):goog.isString(o)?(this.STATEMENT_PREFIX=a,this.myscrub_(t,o)):null===o?(this.STATEMENT_PREFIX=a,\"\"):void goog.asserts.fail(\"Invalid code generated: %s\",o)},Blockly.JavaScript.myscrub_=function(t,e){var a=\"\";if(!t.outputConnection||!t.outputConnection.targetConnection){var o=t.getCommentText();(o=Blockly.utils.wrap(o,Blockly.JavaScript.COMMENT_WRAP-3))&&(a=t.getProcedureDef?a+\"/**\\n\"+Blockly.JavaScript.prefixLines(o+\"\\n\",\" * \")+\" */\\n\":a+Blockly.JavaScript.prefixLines(o+\"\\n\",\"// \"));for(var n=0;n<t.inputList.length;n++)t.inputList[n].type==Blockly.INPUT_VALUE&&(o=t.inputList[n].connection.targetBlock())&&(o=Blockly.JavaScript.allNestedComments(o))&&(a+=Blockly.JavaScript.prefixLines(o,\"// \"))}return a+e},Blockly.JavaScript.finish=function(t){var e,a=[];for(e in Blockly.JavaScript.definitions_)\"variables\"!==e&&a.push(Blockly.JavaScript.definitions_[e]);return delete Blockly.JavaScript.definitions_,delete Blockly.JavaScript.functionNames_,Blockly.JavaScript.variableDB_.reset(),a.join(\"\\n\\n\")+\"\\n\\n\\n\"+t},Blockly.JavaScript.scrubNakedValue=function(t){return t+\";\\n\"},Blockly.JavaScript.quote_=function(t){return\"'\"+(t=t.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\"))+\"'\"};var i=function(t){Blockly.Icon.call(this,t),this.createIcon()};(i.prototype=Object.create(Blockly.Icon.prototype)).width_=160,i.prototype.height_=80,i.prototype.drawIcon_=function(t){Blockly.utils.createSvgElement(\"circle\",{class:\"breakpoint_enable\",id:this.block_.id,r:\"6\",cx:\"8\",cy:\"8\"},t)},i.prototype.setVisible=function(t){var e=n.actions.Breakpoint.breakpoints.map(t=>{if(t.block_id==this.block_.id)return t.enable});if(console.log(e),e[0])n.actions.Breakpoint.disable(this.block_.id);else{this.myDisable();var a=n.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(this.block_.id);-1!==a&&n.actions.Breakpoint.breakpoints.splice(a,1)}},i.prototype.myDisable=function(){goog.dom.removeNode(this.iconGroup_),this.iconGroup_=null},Blockly.utils.createSvgElement=function(t,e,a){for(var o in t=document.createElementNS(Blockly.SVG_NS,t),e)t.setAttribute(o,e[o]);return document.body.runtimeStyle&&(t.runtimeStyle=t.currentStyle=t.style),a&&a.appendChild(t),t},Blockly.BlockSvg.prototype.showContextMenu_=function(t){if(!this.workspace.options.readOnly&&this.contextMenu){var e=this,a=[];if(this.isDeletable()&&this.isMovable()&&!e.isInFlyout){if(a.push(Blockly.ContextMenu.blockDuplicateOption(e)),this.isEditable()&&!this.collapsed_&&this.workspace.options.comments&&a.push(Blockly.ContextMenu.blockCommentOption(e)),!this.collapsed_)for(var l=1;l<this.inputList.length;l++)if(this.inputList[l-1].type!=Blockly.NEXT_STATEMENT&&this.inputList[l].type!=Blockly.NEXT_STATEMENT){var c={enabled:!0},r=this.getInputsInline();c.text=r?Blockly.Msg.EXTERNAL_INPUTS:Blockly.Msg.INLINE_INPUTS,c.callback=function(){e.setInputsInline(!r)},a.push(c);break}if(this.workspace.options.collapse)if(this.collapsed_){var s={enabled:!0};s.text=Blockly.Msg.EXPAND_BLOCK,s.callback=function(){e.setCollapsed(!1)},a.push(s)}else{var p={enabled:!0};p.text=Blockly.Msg.COLLAPSE_BLOCK,p.callback=function(){e.setCollapsed(!0)},a.push(p)}if(this.workspace.options.disable){var u={text:this.disabled?Blockly.Msg.ENABLE_BLOCK:Blockly.Msg.DISABLE_BLOCK,enabled:!this.getInheritedDisabled(),callback:function(){e.setDisabled(!e.disabled)}};a.push(u)}a.push(Blockly.ContextMenu.blockDeleteOption(e));var d={text:n.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(n.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)){n.actions.Breakpoint.breakpoints.map(t=>{if(t.block_id===e.id)return t.icon})[0].myDisable();var t=n.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(e.id);-1!==t&&n.actions.Breakpoint.breakpoints.splice(t,1)}else{var a={block_id:e.id,enable:!0,icon:new i(e)};n.actions.Breakpoint.breakpoints.push(a),e.setCollapsed(!1)}n.actions.Breakpoint.handler()}};if(a.push(d),n.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)){var k={text:n.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(e.id)?\"Disable Breakpoint\":\"Enable Breakpoint\",enabled:!0,callback:function(){n.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(e.id)?n.actions.Breakpoint.disable(e.id):n.actions.Breakpoint.enable(e.id)}};a.push(k)}var v={text:\"Run to cursor\",enabled:!0,callback:function(){n.actions.RunToCursor.handler(e.id)}};if(a.push(v),o.hasInstance()){var E={text:n.actions.Watch.getWatches().map(t=>t.name).includes(e.toString())?\"Remove Watch\":\"Add Watch\",enabled:null!=e.outputConnection,callback:function(){var t=e.toString();if(n.actions.Watch.getWatches().map(t=>t.name).includes(t)){var a=n.actions.Watch.getWatches().map(t=>t.name).indexOf(t);-1!==a&&n.actions.Watch.getWatches().splice(a,1)}else{var o={name:t,code:Blockly.JavaScript.myBlockToCode(e),value:void 0};n.actions.Watch.getWatches().push(o)}n.actions.Watch.handler()}};a.push(E);var y={text:\"Evaluate\",enabled:\"variables_set\"===e.type||\"math_change\"===e.type,callback:function(){n.actions.Eval.handler(Blockly.JavaScript.myBlockToCode(e))}};a.push(y)}}a.push(Blockly.ContextMenu.blockHelpOption(e)),this.customContextMenu&&this.customContextMenu(a),Blockly.ContextMenu.show(t,a,this.RTL),Blockly.ContextMenu.currentBlock=this}};a(5);addEventListener(\"updateTable\",function(){let t=n.actions.Variables.getVariables();document.getElementById(\"variables\").innerHTML=\"\";for(var e=0;e<t.length;++e)document.getElementById(\"variables\").innerHTML+=\"<tr>\\n                                                            <td>\"+t[e].name+\"</td>\\n                                                            <td>\"+t[e].value+\"</td>\\n                                                            <td>\"+typeof t[e].value+\"</td>\\n                                                          </tr>\"}),addEventListener(\"updateWatchesTable\",function(){let t=n.actions.Watch.getWatches();document.getElementById(\"watches\").innerHTML=\"\";for(var e=0;e<t.length;++e)document.getElementById(\"watches\").innerHTML+=\"<tr>\\n                                                            <td>\"+t[e].name+\"</td>\\n                                                            <td>\"+t[e].code+\"</td>\\n                                                            <td>\"+t[e].value+\"</td>\\n                                                            <td>\"+typeof t[e].value+\"</td>\\n                                                        </tr>\"}),window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly1),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly2),document.getElementById(\"ContinueButton\").onclick=n.actions.Continue.handler,document.getElementById(\"StepInButton\").onclick=n.actions.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=n.actions.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=n.actions.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=n.actions.StepOut.handler,document.getElementById(\"StopButton\").onclick=n.actions.Stop.handler,document.getElementById(\"StartButton\").onclick=n.actions.Start.handler},,function(t,e){Blockly.Block.prototype.toString=function(t,e){var a=[],o=e||\"?\";if(this.collapsed_)a.push(this.getInput(\"_TEMP_COLLAPSED_INPUT\").fieldRow[0].text_);else for(var n,l=0;n=this.inputList[l];l++){for(var i,c=0;i=n.fieldRow[c];c++)i instanceof Blockly.FieldDropdown&&!i.getValue()?a.push(o):a.push(i.getText());if(n.connection){var r=n.connection.targetBlock();if(r){var s=r.toString(void 0,e);s=\"(\"+s+\")\",a.push(s)}else a.push(o)}}return a=goog.string.trim(a.join(\" \"))||\"???\",t&&(a=goog.string.truncate(a,t)),a}},function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[o+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=\"RANDOM\"==e?Blockly.JavaScript.ORDER_NONE:Blockly.JavaScript.ORDER_MEMBER,o=Blockly.JavaScript.valueToCode(t,\"VALUE\",a)||\"''\";switch(o=\"(\"+o+\")\",e){case\"FIRST\":return[o+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[o+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return[o+\".charAt(\"+Blockly.JavaScript.getAdjusted(t,\"AT\")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[o+\".slice(\"+Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0)+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"textRandomLetter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+o+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\",a=t.getFieldValue(\"WHERE1\"),o=t.getFieldValue(\"WHERE2\");if(\"FIRST\"==a&&\"LAST\"==o)var n=e;else if(e.match(/^'?\\w+'?$/)||\"FROM_END\"!=a&&\"LAST\"!=a&&\"FROM_END\"!=o&&\"LAST\"!=o){switch(e=\"(\"+e+\")\",a){case\"FROM_START\":var l=Blockly.JavaScript.getAdjusted(t,\"AT1\");break;case\"FROM_END\":l=e+\".length - \"+(l=Blockly.JavaScript.getAdjusted(t,\"AT1\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"FIRST\":l=\"0\";break;default:throw\"Unhandled option (text_getSubstring).\"}switch(o){case\"FROM_START\":var i=Blockly.JavaScript.getAdjusted(t,\"AT2\",1);break;case\"FROM_END\":i=e+\".length - \"+(i=Blockly.JavaScript.getAdjusted(t,\"AT2\",0,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"LAST\":i=e+\".length\";break;default:throw\"Unhandled option (text_getSubstring).\"}n=e+\".slice(\"+l+\", \"+i+\")\"}else{e=\"(\"+e+\")\";l=Blockly.JavaScript.getAdjusted(t,\"AT1\"),i=Blockly.JavaScript.getAdjusted(t,\"AT2\");var c=Blockly.JavaScript.text.getIndex_,r={FIRST:\"First\",LAST:\"Last\",FROM_START:\"FromStart\",FROM_END:\"FromEnd\"};n=Blockly.JavaScript.provideFunction_(\"subsequence\"+r[a]+r[o],[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(sequence\"+(\"FROM_END\"==a||\"FROM_START\"==a?\", at1\":\"\")+(\"FROM_END\"==o||\"FROM_START\"==o?\", at2\":\"\")+\") {\",\"  var start = \"+c(\"sequence\",a,\"at1\")+\";\",\"  var end = \"+c(\"sequence\",o,\"at2\")+\" + 1;\",\"  return sequence.slice(start, end);\",\"}\"])+\"(\"+e+(\"FROM_END\"==a||\"FROM_START\"==a?\", \"+l:\"\")+(\"FROM_END\"==o||\"FROM_START\"==o?\", \"+i:\"\")+\")\"}return[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")],a=e?Blockly.JavaScript.ORDER_MEMBER:Blockly.JavaScript.ORDER_NONE,o=Blockly.JavaScript.valueToCode(t,\"TEXT\",a)||\"''\";if(e)var n=\"(\"+o+\")\"+e;else n=Blockly.JavaScript.provideFunction_(\"textToTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+o+\"))\";return[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext}]);","extractedComments":[]}