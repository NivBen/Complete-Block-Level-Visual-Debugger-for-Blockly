{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\actions\\\\run.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\actions\\\\step.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\actions\\\\start.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\index.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\generator\\\\loops.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\generator\\\\logic.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\Blockly_debugger\\\\debugger\\\\src\\\\blockly\\\\core\\\\generator.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"window\",\"workspace\",\"Blockly\",\"inject\",\"media\",\"toolbox\",\"document\",\"getElementById\",\"Xml\",\"domToWorkspace\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"alert\",\"msg\",\"highlightBlock\",\"id\",\"traceOn_\",\"execution_finished\",\"onmessage\",\"obj\",\"data\",\"type\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blocly_Debugger\",\"generation\",\"JavaScript\",\"block\",\"quote_\",\"getFieldValue\",\"ORDER_ATOMIC\",\"valueToCode\",\"ORDER_NONE\",\"STATEMENT_PREFIX\",\"code\",\"workspaceToCode\",\"postMessage\",\"onclick\",\"funcName\",\"variableDB_\",\"getName\",\"Procedures\",\"NAME_TYPE\",\"branch\",\"statementToCode\",\"prefixLines\",\"replace\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"x\",\"arguments_\",\"length\",\"Variables\",\"join\",\"scrub_\",\"definitions_\",\"ORDER_COMMA\",\"ORDER_FUNCTION_CALL\",\"getField\",\"repeats\",\"String\",\"Number\",\"ORDER_ASSIGNMENT\",\"addLoopTrap\",\"loopVar\",\"getDistinctName\",\"endVar\",\"match\",\"isNumber\",\"until\",\"argument0\",\"ORDER_LOGICAL_NOT\",\"variable0\",\"argument1\",\"increment\",\"up\",\"parseFloat\",\"step\",\"Math\",\"abs\",\"startVar\",\"incVar\",\"listVar\",\"indexVar\",\"argument\",\"elseifCount_\",\"elseCount_\",\"Generator\",\"order\",\"isNaN\",\"goog\",\"asserts\",\"fail\",\"targetBlock\",\"getInputTargetBlock\",\"tuple\",\"this\",\"blockToCode\",\"assertArray\",\"innerOrder\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\",\"window.workspace = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\n\\t \\r\\nBlockly.Xml.domToWorkspace(window.workspace,\\r\\n\\tdocument.getElementById('startBlocks'));\\r\\n\\t\\t\\r\\n\\r\\nexport var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher;\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"../../debuggee/bundle.js\\\");\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher = {                              \\r\\n\\t\\t\\t\\\"alert\\\" : (msg) => {\\r\\n\\t\\t\\t\\talert(msg);\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"highlightBlock\\\" : (id) => {\\r\\n\\t\\t\\t\\twindow.workspace.traceOn_ = true;\\r\\n\\t\\t\\t\\twindow.workspace.highlightBlock(id);\\r\\n\\t\\t\\t}, \\r\\n\\t\\t\\t\\\"execution_finished\\\" : () => {\\r\\n\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blocly_Debugger = {};\",\"export var generation = {\\r\\n    tmp : '$',\\r\\n    tmp_count : 0\\r\\n}\",\"import {generation} from '../blockly_init.js'; \\r\\n\\r\\n\\r\\nBlockly.JavaScript['text'] = function(block) {\\r\\n    // Text value.\\r\\n    var code = generation.tmp + ' = ' + Blockly.JavaScript.quote_(block.getFieldValue('TEXT')) + ';';\\r\\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\\r\\n  };\\r\\n\\r\\nBlockly.JavaScript['text_print'] = function(block) {\\r\\n    // Print statement.\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n\\r\\n    return argument0 + 'window.alert(' + generation.tmp + ');\\\\n';\\r\\n  };\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Run\\\"] = () => {\\r\\n\\r\\n    if(Debuggee_Worker.hasInstance()) return; \\r\\n\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = '';\\r\\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace);\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"run\\\", \\\"data\\\": code});\\r\\n}\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"StepInto\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepInto\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOver\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlocly_Debugger[\\\"StepOut\\\"] = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blocly_Debugger} from \\\"../init\\\";\\r\\n\\r\\nBlocly_Debugger[\\\"Stop\\\"] = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blocly_Debugger} from '../init.js';\\r\\n\\r\\nBlocly_Debugger[\\\"Start\\\"] = () => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;  \\r\\n\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\\\\nawait wait();\\\\n';\\r\\n    var code = Blockly.JavaScript.workspaceToCode(window.workspace); \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": code});\\r\\n}\\r\\n\",\"import './init.js';\\r\\nimport {Blocly_Debugger} from './init.js';\\r\\nimport './blockly/blockly_init.js';\\r\\nimport './blockly/core/generator.js';\\r\\nimport './blockly/generator/logic.js';\\r\\nimport './blockly/generator/loops.js';\\r\\nimport './blockly/generator/maths.js';\\r\\nimport './blockly/generator/procedures.js';\\r\\nimport './blockly/generator/text.js';\\r\\nimport './blockly/generator/variables/js';\\r\\nimport './actions/run.js';\\r\\nimport './actions/step.js';\\r\\nimport './actions/stop.js';\\r\\nimport './actions/start.js';\\r\\n\\r\\ndocument.getElementById(\\\"RunButton\\\").onclick = Blocly_Debugger[\\\"Run\\\"];\\r\\ndocument.getElementById(\\\"StepIntoButton\\\").onclick = Blocly_Debugger[\\\"StepInto\\\"];\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blocly_Debugger[\\\"StepOver\\\"];\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blocly_Debugger[\\\"StepOut\\\"];\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blocly_Debugger[\\\"Stop\\\"];\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blocly_Debugger[\\\"Start\\\"];\\r\\n\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\",\"// // function definition\\r\\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n//       branch = Blockly.JavaScript.prefixLines(\\r\\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\''), Blockly.JavaScript.INDENT) + branch;\\r\\n//     }\\r\\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\'') + branch;\\r\\n//     }\\r\\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n//         Blockly.JavaScript.ORDER_NONE) || '';\\r\\n//     if (returnValue) {\\r\\n//       returnValue = '  return ' + returnValue + ';\\\\n';\\r\\n//     }\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n//           Blockly.Variables.NAME_TYPE);\\r\\n//     }\\r\\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +\\r\\n//         '  let local_over = isStepOver();\\\\n  let local_out = isStepOut();\\\\n' +\\r\\n//         branch + '  if(local_out==false) flags.out = false;\\\\n' + returnValue + '}'; \\r\\n//     code = Blockly.JavaScript.scrub_(block, code);\\r\\n//     Blockly.JavaScript.definitions_[funcName] = code;\\r\\n//     return null;\\r\\n//   };\\r\\n//   Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n//   Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// // function call \\r\\n// Blockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n//     // Call a procedure with a return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n//           Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n//     }\\r\\n//     var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n//     return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//   };\\r\\n  \\r\\n// Blockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n//     // Call a procedure with no return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n//           Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n//     }\\r\\n//     var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n//     return code;\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      branch = Blockly.JavaScript.prefixLines(\\r\\n          Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\''), Blockly.JavaScript.INDENT) + branch;\\r\\n    }\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n    if (returnValue) {\\r\\n      returnValue = '  return ' + returnValue + ';\\\\n';\\r\\n    }\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n    var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +\\r\\n        '  let local_over = isStepOver();\\\\n  let local_out = isStepOut();\\\\n' +\\r\\n        branch + '  if(local_out==false) flag_out = false;\\\\n' + returnValue + '}'; \\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    Blockly.JavaScript.definitions_[funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\",\"// Blockly.JavaScript['controls_repeat_ext'] = function(block) {\\r\\n//     // Repeat n times.\\r\\n//     if (block.getField('TIMES')) {\\r\\n//       // Internal number.\\r\\n//       var repeats = String(Number(block.getFieldValue('TIMES')));\\r\\n//     } else {\\r\\n//       // External number.\\r\\n//       var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\\r\\n//           Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n//     }\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n//     var code = '';\\r\\n//     var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//         'count', Blockly.Variables.NAME_TYPE);\\r\\n//     var endVar = repeats;\\r\\n//     if (!repeats.match(/^\\\\w+$/) && !Blockly.isNumber(repeats)) {\\r\\n//       var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//           'repeat_end', Blockly.Variables.NAME_TYPE);\\r\\n//       code += 'var ' + endVar + ' = ' + repeats + ';\\\\n';\\r\\n//     }\\r\\n//     code += 'for (var ' + loopVar + ' = 0; ' +\\r\\n//         loopVar + ' < ' + endVar + '; ' +\\r\\n//         loopVar + '++) {\\\\n' +\\r\\n//         '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//         + branch + '}\\\\n';\\r\\n//     return code;\\r\\n//   };\\r\\n  \\r\\n//   Blockly.JavaScript['controls_repeat'] =\\r\\n//       Blockly.JavaScript['controls_repeat_ext'];\\r\\n  \\r\\n//   Blockly.JavaScript['controls_whileUntil'] = function(block) {\\r\\n//     // Do while/until loop.\\r\\n//     var until = block.getFieldValue('MODE') == 'UNTIL';\\r\\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\\r\\n//         until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\\r\\n//         Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n//     if (until) {\\r\\n//       argument0 = '!' + argument0;\\r\\n//     }\\r\\n//     return 'while (' + argument0 + ') {\\\\n' +\\r\\n//         '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//         + branch + '}\\\\n';\\r\\n//   };\\r\\n  \\r\\n//   Blockly.JavaScript['controls_for'] = function(block) {\\r\\n//     // For loop.\\r\\n//     var variable0 = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\\r\\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\\r\\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n//     var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n//     var increment = Blockly.JavaScript.valueToCode(block, 'BY',\\r\\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n//     var code;\\r\\n//     if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\\r\\n//         Blockly.isNumber(increment)) {\\r\\n//       // All arguments are simple numbers.\\r\\n//       var up = parseFloat(argument0) <= parseFloat(argument1);\\r\\n//       code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\\r\\n//           variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\\r\\n//           variable0;\\r\\n//       var step = Math.abs(parseFloat(increment));\\r\\n//       if (step == 1) {\\r\\n//         code += up ? '++' : '--';\\r\\n//       } else {\\r\\n//         code += (up ? ' += ' : ' -= ') + step;\\r\\n//       }\\r\\n//       code += ') {\\\\n' +\\r\\n//         '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//         + branch + '}\\\\n';\\r\\n//     } else {\\r\\n//       code = '';\\r\\n//       // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n//       var startVar = argument0;\\r\\n//       if (!argument0.match(/^\\\\w+$/) && !Blockly.isNumber(argument0)) {\\r\\n//         startVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//             variable0 + '_start', Blockly.Variables.NAME_TYPE);\\r\\n//         code += 'var ' + startVar + ' = ' + argument0 + ';\\\\n';\\r\\n//       }\\r\\n//       var endVar = argument1;\\r\\n//       if (!argument1.match(/^\\\\w+$/) && !Blockly.isNumber(argument1)) {\\r\\n//         var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//             variable0 + '_end', Blockly.Variables.NAME_TYPE);\\r\\n//         code += 'var ' + endVar + ' = ' + argument1 + ';\\\\n';\\r\\n//       }\\r\\n//       // Determine loop direction at start, in case one of the bounds\\r\\n//       // changes during loop execution.\\r\\n//       var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//           variable0 + '_inc', Blockly.Variables.NAME_TYPE);\\r\\n//       code += 'var ' + incVar + ' = ';\\r\\n//       if (Blockly.isNumber(increment)) {\\r\\n//         code += Math.abs(increment) + ';\\\\n';\\r\\n//       } else {\\r\\n//         code += 'Math.abs(' + increment + ');\\\\n';\\r\\n//       }\\r\\n//       code += 'if (' + startVar + ' > ' + endVar + ') {\\\\n';\\r\\n//       code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\\\n';\\r\\n//       code += '}\\\\n';\\r\\n//       code += 'for (' + variable0 + ' = ' + startVar + ';\\\\n' +\\r\\n//           '     ' + incVar + ' >= 0 ? ' +\\r\\n//           variable0 + ' <= ' + endVar + ' : ' +\\r\\n//           variable0 + ' >= ' + endVar + ';\\\\n' +\\r\\n//           '     ' + variable0 + ' += ' + incVar + ') {\\\\n' +\\r\\n//           '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//           + branch + '}\\\\n';\\r\\n//     }\\r\\n//     return code;\\r\\n//   };\\r\\n  \\r\\n//   Blockly.JavaScript['controls_forEach'] = function(block) {\\r\\n//     // For each loop.\\r\\n//     var variable0 = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\\r\\n//     var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n//         Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n//     branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n//     var code = '';\\r\\n//     // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n//     var listVar = argument0;\\r\\n//     if (!argument0.match(/^\\\\w+$/)) {\\r\\n//       listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//           variable0 + '_list', Blockly.Variables.NAME_TYPE);\\r\\n//       code += 'var ' + listVar + ' = ' + argument0 + ';\\\\n';\\r\\n//     }\\r\\n//     var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n//         variable0 + '_index', Blockly.Variables.NAME_TYPE);\\r\\n//     branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\\r\\n//         listVar + '[' + indexVar + '];\\\\n' + branch;\\r\\n//     code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\\\n' +\\r\\n//     '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//     + branch + '}\\\\n';\\r\\n//     return code;\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['controls_repeat_ext'] = function(block) {\\r\\n    // Repeat n times.\\r\\n    if (block.getField('TIMES')) {\\r\\n      // Internal number.\\r\\n      var repeats = String(Number(block.getFieldValue('TIMES')));\\r\\n    } else {\\r\\n      // External number.\\r\\n      var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\\r\\n          Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n    }\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n    var code = '';\\r\\n    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n        'count', Blockly.Variables.NAME_TYPE);\\r\\n    var endVar = repeats;\\r\\n    if (!repeats.match(/^\\\\w+$/) && !Blockly.isNumber(repeats)) {\\r\\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'repeat_end', Blockly.Variables.NAME_TYPE);\\r\\n      code += 'var ' + endVar + ' = ' + repeats + ';\\\\n';\\r\\n    }\\r\\n    code += 'for (var ' + loopVar + ' = 0; ' +\\r\\n        loopVar + ' < ' + endVar + '; ' +\\r\\n        loopVar + '++) {\\\\n' +\\r\\n        '  let local_over = isStepOver();\\\\n'                            // me\\r\\n        + branch + '}\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['controls_repeat'] =\\r\\n      Blockly.JavaScript['controls_repeat_ext'];\\r\\n  \\r\\n  Blockly.JavaScript['controls_whileUntil'] = function(block) {\\r\\n    // Do while/until loop.\\r\\n    var until = block.getFieldValue('MODE') == 'UNTIL';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\\r\\n        until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n    if (until) {\\r\\n      argument0 = '!' + argument0;\\r\\n    }\\r\\n    return 'while (' + argument0 + ') {\\\\n' +\\r\\n        '  let local_over = isStepOver();\\\\n'                            // me\\r\\n        + branch + '}\\\\n';\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['controls_for'] = function(block) {\\r\\n    // For loop.\\r\\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\\r\\n    var increment = Blockly.JavaScript.valueToCode(block, 'BY',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n    var code;\\r\\n    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\\r\\n        Blockly.isNumber(increment)) {\\r\\n      // All arguments are simple numbers.\\r\\n      var up = parseFloat(argument0) <= parseFloat(argument1);\\r\\n      code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\\r\\n          variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\\r\\n          variable0;\\r\\n      var step = Math.abs(parseFloat(increment));\\r\\n      if (step == 1) {\\r\\n        code += up ? '++' : '--';\\r\\n      } else {\\r\\n        code += (up ? ' += ' : ' -= ') + step;\\r\\n      }\\r\\n      code += ') {\\\\n' +\\r\\n        '  let local_over = isStepOver();\\\\n'                            // me\\r\\n        + branch + '}\\\\n';\\r\\n    } else {\\r\\n      code = '';\\r\\n      // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n      var startVar = argument0;\\r\\n      if (!argument0.match(/^\\\\w+$/) && !Blockly.isNumber(argument0)) {\\r\\n        startVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            variable0 + '_start', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + startVar + ' = ' + argument0 + ';\\\\n';\\r\\n      }\\r\\n      var endVar = argument1;\\r\\n      if (!argument1.match(/^\\\\w+$/) && !Blockly.isNumber(argument1)) {\\r\\n        var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            variable0 + '_end', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + endVar + ' = ' + argument1 + ';\\\\n';\\r\\n      }\\r\\n      // Determine loop direction at start, in case one of the bounds\\r\\n      // changes during loop execution.\\r\\n      var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          variable0 + '_inc', Blockly.Variables.NAME_TYPE);\\r\\n      code += 'var ' + incVar + ' = ';\\r\\n      if (Blockly.isNumber(increment)) {\\r\\n        code += Math.abs(increment) + ';\\\\n';\\r\\n      } else {\\r\\n        code += 'Math.abs(' + increment + ');\\\\n';\\r\\n      }\\r\\n      code += 'if (' + startVar + ' > ' + endVar + ') {\\\\n';\\r\\n      code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\\\n';\\r\\n      code += '}\\\\n';\\r\\n      code += 'for (' + variable0 + ' = ' + startVar + ';\\\\n' +\\r\\n          '     ' + incVar + ' >= 0 ? ' +\\r\\n          variable0 + ' <= ' + endVar + ' : ' +\\r\\n          variable0 + ' >= ' + endVar + ';\\\\n' +\\r\\n          '     ' + variable0 + ' += ' + incVar + ') {\\\\n' +\\r\\n          '  let local_over = isStepOver();\\\\n'                            // me\\r\\n          + branch + '}\\\\n';\\r\\n    }\\r\\n    return code;\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['controls_forEach'] = function(block) {\\r\\n    // For each loop.\\r\\n    var variable0 = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\\r\\n    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\\r\\n    var code = '';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    var listVar = argument0;\\r\\n    if (!argument0.match(/^\\\\w+$/)) {\\r\\n      listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          variable0 + '_list', Blockly.Variables.NAME_TYPE);\\r\\n      code += 'var ' + listVar + ' = ' + argument0 + ';\\\\n';\\r\\n    }\\r\\n    var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n        variable0 + '_index', Blockly.Variables.NAME_TYPE);\\r\\n    branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\\r\\n        listVar + '[' + indexVar + '];\\\\n' + branch;\\r\\n    code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\\\n' +\\r\\n    '  let local_over = isStepOver();\\\\n'                            // me\\r\\n    + branch + '}\\\\n';\\r\\n    return code;\\r\\n  };\",\"// // If/elseif/else condition.\\r\\n// Blockly.JavaScript['controls_if'] = function(block) {\\r\\n//     var n = 0;\\r\\n//     var argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\\r\\n//         Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\\r\\n//     var code = 'if (' + argument + ') {\\\\n' + \\r\\n//     '  let local_over = isStepOver();\\\\n'                              // me\\r\\n//      + branch + '}';\\r\\n//     for (n = 1; n <= block.elseifCount_; n++) {\\r\\n//       argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\\r\\n//           Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n//       branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\\r\\n//       code += ' else if (' + argument + ') {\\\\n' + \\r\\n//       '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//       + branch + '}';\\r\\n//     }\\r\\n//     if (block.elseCount_) {\\r\\n//       branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\\r\\n//       code += ' else {\\\\n' +\\r\\n//       '  let local_over = isStepOver();\\\\n'                            // me\\r\\n//       + branch + '}';\\r\\n//     }\\r\\n//     return code + '\\\\n';\\r\\n//   };\\r\\n\\r\\n\\r\\nBlockly.JavaScript['controls_if'] = function(block) {\\r\\n  var n = 0;\\r\\n  var argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\\r\\n  var code = 'if (' + argument + ') {\\\\n' + \\r\\n  '  let local_over = isStepOver();\\\\n'                              // me\\r\\n   + branch + '}';\\r\\n  for (n = 1; n <= block.elseifCount_; n++) {\\r\\n    argument = Blockly.JavaScript.valueToCode(block, 'IF' + n,\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n    branch = Blockly.JavaScript.statementToCode(block, 'DO' + n);\\r\\n    code += ' else if (' + argument + ') {\\\\n' + \\r\\n    '  let local_over = isStepOver();\\\\n'                            // me\\r\\n    + branch + '}';\\r\\n  }\\r\\n  if (block.elseCount_) {\\r\\n    branch = Blockly.JavaScript.statementToCode(block, 'ELSE');\\r\\n    code += ' else {\\\\n' +\\r\\n    '  let local_over = isStepOver();\\\\n'                            // me\\r\\n    + branch + '}';\\r\\n  }\\r\\n  return code + '\\\\n';\\r\\n};\",\"Blockly.Generator.prototype.valueToCode = function(block, name, order) {\\r\\n    if (isNaN(order)) {\\r\\n      goog.asserts.fail('Expecting valid order from block \\\"%s\\\".', block.type);\\r\\n    }\\r\\n    var targetBlock = block.getInputTargetBlock(name);\\r\\n    if (!targetBlock) {\\r\\n      return '';\\r\\n    }\\r\\n    var tuple = this.blockToCode(targetBlock);\\r\\n    if (tuple === '') {\\r\\n      // Disabled block.\\r\\n      return '';\\r\\n    }\\r\\n    // Value blocks must return code and order of operations info.\\r\\n    // Statement blocks must only return code.\\r\\n    goog.asserts.assertArray(tuple, 'Expecting tuple from value block \\\"%s\\\".',\\r\\n        targetBlock.type);\\r\\n    var code = tuple[0];\\r\\n    var innerOrder = tuple[1];\\r\\n    if (isNaN(innerOrder)) {\\r\\n      goog.asserts.fail('Expecting valid order from value block \\\"%s\\\".',\\r\\n          targetBlock.type);\\r\\n    }\\r\\n    if (code && order <= innerOrder) {\\r\\n      if (order == innerOrder && (order == 0 || order == 99)) {\\r\\n        // Don't generate parens around NONE-NONE and ATOMIC-ATOMIC pairs.\\r\\n        // 0 is the atomic order, 99 is the none order.  No parentheses needed.\\r\\n        // In all known languages multiple such code blocks are not order\\r\\n        // sensitive.  In fact in Python ('a' 'b') 'c' would fail.\\r\\n      } else {\\r\\n        // The operators outside this code are stonger than the operators\\r\\n        // inside this code.  To prevent the code from being pulled apart,\\r\\n        // wrap the code in parentheses.\\r\\n        // Technically, this should be handled on a language-by-language basis.\\r\\n        // However all known (sane) languages use parentheses for grouping.\\r\\n        if(order != 5 && order != 6)                    // for * / % + -\\r\\n            code = '(' + code + ')';\\r\\n      }\\r\\n    }\\r\\n    return code;\\r\\n  };\"]}","code":"!function(e){var a={};function t(l){if(a[l])return a[l].exports;var o=a[l]={i:l,l:!1,exports:{}};return e[l].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=a,t.d=function(e,a,l){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:l})},t.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,\"a\",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p=\"\",t(t.s=0)}([function(e,a,t){\"use strict\";t.r(a),window.workspace=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),Blockly.Xml.domToWorkspace(window.workspace,document.getElementById(\"startBlocks\"));var l=function(){var e,a;function t(){return void 0!==e}return{Instance:function(){return void 0===e&&(e=new Worker(\"../../debuggee/bundle.js\"),a={alert:e=>{alert(e)},highlightBlock:e=>{window.workspace.traceOn_=!0,window.workspace.highlightBlock(e)},execution_finished:()=>{e=void 0}},e.onmessage=function(e){let t=e.data,l=t.data;a[t.type](l)}),e},Stop:function(){t()&&(e.terminate(),e=void 0)},AddOnDispacher:function(e,t){a[e]=t},hasInstance:t}}(),o={},r=\"$\";t(4),t(3),t(2),t(1);Blockly.JavaScript.text=function(e){return[r+\" = \"+Blockly.JavaScript.quote_(e.getFieldValue(\"TEXT\"))+\";\",Blockly.JavaScript.ORDER_ATOMIC]},Blockly.JavaScript.text_print=function(e){return(Blockly.JavaScript.valueToCode(e,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\")+\"window.alert(\"+r+\");\\n\"},o.Run=(()=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"\";var e=Blockly.JavaScript.workspaceToCode(window.workspace);l.Instance().postMessage({type:\"run\",data:e})}}),o.StepInto=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepInto\"})}),o.StepOver=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOver\"})}),o.StepOut=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOut\"})}),o.Stop=(()=>{l.Stop()}),o.Start=(()=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"highlightBlock(%1);\\nawait wait();\\n\";var e=Blockly.JavaScript.workspaceToCode(window.workspace);l.Instance().postMessage({type:\"start_debugging\",data:e})}}),function(){var e=new Error('Cannot find module \"./blockly/generator/maths.js\"');throw e.code=\"MODULE_NOT_FOUND\",e}(),function(){var e=new Error('Cannot find module \"./blockly/generator/variables/js\"');throw e.code=\"MODULE_NOT_FOUND\",e}(),document.getElementById(\"RunButton\").onclick=o.Run,document.getElementById(\"StepIntoButton\").onclick=o.StepInto,document.getElementById(\"StepOverButton\").onclick=o.StepOver,document.getElementById(\"StepOutButton\").onclick=o.StepOut,document.getElementById(\"StopButton\").onclick=o.Stop,document.getElementById(\"StartButton\").onclick=o.Start},function(e,a){Blockly.JavaScript.procedures_defreturn=function(e){var a=Blockly.JavaScript.variableDB_.getName(e.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),t=Blockly.JavaScript.statementToCode(e,\"STACK\");Blockly.JavaScript.STATEMENT_PREFIX&&(t=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"'\"+e.id+\"'\"),Blockly.JavaScript.INDENT)+t),Blockly.JavaScript.INFINITE_LOOP_TRAP&&(t=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e.id+\"'\")+t);var l=Blockly.JavaScript.valueToCode(e,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";l&&(l=\"  return \"+l+\";\\n\");for(var o=[],r=0;r<e.arguments_.length;r++)o[r]=Blockly.JavaScript.variableDB_.getName(e.arguments_[r],Blockly.Variables.NAME_TYPE);var c=\"async function \"+a+\"(\"+o.join(\", \")+\") {\\n  let local_over = isStepOver();\\n  let local_out = isStepOut();\\n\"+t+\"  if(local_out==false) flag_out = false;\\n\"+l+\"}\";return c=Blockly.JavaScript.scrub_(e,c),Blockly.JavaScript.definitions_[a]=c,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(e){for(var a=Blockly.JavaScript.variableDB_.getName(e.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),t=[],l=0;l<e.arguments_.length;l++)t[l]=Blockly.JavaScript.valueToCode(e,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+a+\"(\"+t.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(e){for(var a=Blockly.JavaScript.variableDB_.getName(e.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),t=[],l=0;l<e.arguments_.length;l++)t[l]=Blockly.JavaScript.valueToCode(e,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+a+\"(\"+t.join(\", \")+\");\\n\"}},function(e,a){Blockly.JavaScript.controls_repeat_ext=function(e){if(e.getField(\"TIMES\"))var a=String(Number(e.getFieldValue(\"TIMES\")));else a=Blockly.JavaScript.valueToCode(e,\"TIMES\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"0\";var t=Blockly.JavaScript.statementToCode(e,\"DO\");t=Blockly.JavaScript.addLoopTrap(t,e.id);var l=\"\",o=Blockly.JavaScript.variableDB_.getDistinctName(\"count\",Blockly.Variables.NAME_TYPE),r=a;a.match(/^\\w+$/)||Blockly.isNumber(a)||(l+=\"var \"+(r=Blockly.JavaScript.variableDB_.getDistinctName(\"repeat_end\",Blockly.Variables.NAME_TYPE))+\" = \"+a+\";\\n\");return l+=\"for (var \"+o+\" = 0; \"+o+\" < \"+r+\"; \"+o+\"++) {\\n  let local_over = isStepOver();\\n\"+t+\"}\\n\"},Blockly.JavaScript.controls_repeat=Blockly.JavaScript.controls_repeat_ext,Blockly.JavaScript.controls_whileUntil=function(e){var a=\"UNTIL\"==e.getFieldValue(\"MODE\"),t=Blockly.JavaScript.valueToCode(e,\"BOOL\",a?Blockly.JavaScript.ORDER_LOGICAL_NOT:Blockly.JavaScript.ORDER_NONE)||\"false\",l=Blockly.JavaScript.statementToCode(e,\"DO\");return l=Blockly.JavaScript.addLoopTrap(l,e.id),a&&(t=\"!\"+t),\"while (\"+t+\") {\\n  let local_over = isStepOver();\\n\"+l+\"}\\n\"},Blockly.JavaScript.controls_for=function(e){var a,t=Blockly.JavaScript.variableDB_.getName(e.getFieldValue(\"VAR\"),Blockly.Variables.NAME_TYPE),l=Blockly.JavaScript.valueToCode(e,\"FROM\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"0\",o=Blockly.JavaScript.valueToCode(e,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"0\",r=Blockly.JavaScript.valueToCode(e,\"BY\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"1\",c=Blockly.JavaScript.statementToCode(e,\"DO\");if(c=Blockly.JavaScript.addLoopTrap(c,e.id),Blockly.isNumber(l)&&Blockly.isNumber(o)&&Blockly.isNumber(r)){var n=parseFloat(l)<=parseFloat(o);a=\"for (\"+t+\" = \"+l+\"; \"+t+(n?\" <= \":\" >= \")+o+\"; \"+t;var i=Math.abs(parseFloat(r));a+=1==i?n?\"++\":\"--\":(n?\" += \":\" -= \")+i,a+=\") {\\n  let local_over = isStepOver();\\n\"+c+\"}\\n\"}else{a=\"\";var v=l;l.match(/^\\w+$/)||Blockly.isNumber(l)||(a+=\"var \"+(v=Blockly.JavaScript.variableDB_.getDistinctName(t+\"_start\",Blockly.Variables.NAME_TYPE))+\" = \"+l+\";\\n\");var p=o;if(!o.match(/^\\w+$/)&&!Blockly.isNumber(o))a+=\"var \"+(p=Blockly.JavaScript.variableDB_.getDistinctName(t+\"_end\",Blockly.Variables.NAME_TYPE))+\" = \"+o+\";\\n\";var s=Blockly.JavaScript.variableDB_.getDistinctName(t+\"_inc\",Blockly.Variables.NAME_TYPE);a+=\"var \"+s+\" = \",Blockly.isNumber(r)?a+=Math.abs(r)+\";\\n\":a+=\"Math.abs(\"+r+\");\\n\",a+=\"if (\"+v+\" > \"+p+\") {\\n\",a+=Blockly.JavaScript.INDENT+s+\" = -\"+s+\";\\n\",a+=\"}\\n\",a+=\"for (\"+t+\" = \"+v+\";\\n     \"+s+\" >= 0 ? \"+t+\" <= \"+p+\" : \"+t+\" >= \"+p+\";\\n     \"+t+\" += \"+s+\") {\\n  let local_over = isStepOver();\\n\"+c+\"}\\n\"}return a},Blockly.JavaScript.controls_forEach=function(e){var a=Blockly.JavaScript.variableDB_.getName(e.getFieldValue(\"VAR\"),Blockly.Variables.NAME_TYPE),t=Blockly.JavaScript.valueToCode(e,\"LIST\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"[]\",l=Blockly.JavaScript.statementToCode(e,\"DO\");l=Blockly.JavaScript.addLoopTrap(l,e.id);var o=\"\",r=t;t.match(/^\\w+$/)||(o+=\"var \"+(r=Blockly.JavaScript.variableDB_.getDistinctName(a+\"_list\",Blockly.Variables.NAME_TYPE))+\" = \"+t+\";\\n\");var c=Blockly.JavaScript.variableDB_.getDistinctName(a+\"_index\",Blockly.Variables.NAME_TYPE);return o+=\"for (var \"+c+\" in \"+r+\") {\\n  let local_over = isStepOver();\\n\"+(l=Blockly.JavaScript.INDENT+a+\" = \"+r+\"[\"+c+\"];\\n\"+l)+\"}\\n\"}},function(e,a){Blockly.JavaScript.controls_if=function(e){var a=0,t=Blockly.JavaScript.valueToCode(e,\"IF\"+a,Blockly.JavaScript.ORDER_NONE)||\"false\",l=Blockly.JavaScript.statementToCode(e,\"DO\"+a),o=\"if (\"+t+\") {\\n  let local_over = isStepOver();\\n\"+l+\"}\";for(a=1;a<=e.elseifCount_;a++)o+=\" else if (\"+(t=Blockly.JavaScript.valueToCode(e,\"IF\"+a,Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  let local_over = isStepOver();\\n\"+(l=Blockly.JavaScript.statementToCode(e,\"DO\"+a))+\"}\";return e.elseCount_&&(o+=\" else {\\n  let local_over = isStepOver();\\n\"+(l=Blockly.JavaScript.statementToCode(e,\"ELSE\"))+\"}\"),o+\"\\n\"}},function(e,a){Blockly.Generator.prototype.valueToCode=function(e,a,t){isNaN(t)&&goog.asserts.fail('Expecting valid order from block \"%s\".',e.type);var l=e.getInputTargetBlock(a);if(!l)return\"\";var o=this.blockToCode(l);if(\"\"===o)return\"\";goog.asserts.assertArray(o,'Expecting tuple from value block \"%s\".',l.type);var r=o[0],c=o[1];return isNaN(c)&&goog.asserts.fail('Expecting valid order from value block \"%s\".',l.type),r&&t<=c&&(t!=c||0!=t&&99!=t)&&5!=t&&6!=t&&(r=\"(\"+r+\")\"),r}}]);","extractedComments":[]}