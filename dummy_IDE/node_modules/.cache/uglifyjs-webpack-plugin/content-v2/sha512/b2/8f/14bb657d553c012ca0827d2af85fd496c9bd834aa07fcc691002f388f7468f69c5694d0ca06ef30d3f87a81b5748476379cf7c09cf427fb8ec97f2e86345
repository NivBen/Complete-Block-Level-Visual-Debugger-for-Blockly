{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\watches.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"msg\",\"window\",\"alert\",\"postMessage\",\"type\",\"data\",\"prompt\",\"workspace\",\"CurrentSystemEditorId\",\"traceOn_\",\"highlightBlock\",\"id\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blockly_Debugger\",\"actions\",\"handler\",\"watches\",\"variables\",\"update\",\"new_vars\",\"dispatchEvent\",\"Event\",\"getVariables\",\"cursorBreakpoint\",\"Blockly\",\"JavaScript\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"code\",\"variables1\",\"getAllVariables\",\"map\",\"variable\",\"variables2\",\"console\",\"log\",\"length\",\"nvar\",\"push\",\"variables_names\",\"includes\",\"MouseEvent\",\"breakpoints\",\"block_id\",\"generation\",\"nest\",\"currentSystemEditorId\",\"block\",\"valueToCode\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"item\",\"ORDER_NONE\",\"options\",\"oneBasedIndex\",\"ORDER_ADDITION\",\"ORDER_FUNCTION_CALL\",\"mode\",\"where\",\"listOrder\",\"ORDER_COMMA\",\"list\",\"at\",\"getAdjusted\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"ORDER_SUBTRACTION\",\"xVar\",\"input\",\"delimiter\",\"functionName\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"replace\",\"prefixLines\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"arguments_\",\"join\",\"scrub_\",\"definitions_\",\"x\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"this\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"assert\",\"outputConnection\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"init\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"scrubNakedValue\",\"finish\",\"document\",\"getElementById\",\"onclick\",\"addEventListener\",\"innerHTML\",\"argument0\",\"textOrder\",\"text\",\"where1\",\"where2\",\"at1\",\"at2\",\"getIndex_\",\"wherePascalCase\",\"FIRST\",\"LAST\",\"FROM_START\",\"FROM_END\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\",\"quote_\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 3);\\n\",\"export var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher = {};\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\"); // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher[\\\"alert\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"prompt\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"highlightBlock\\\"] = (data) => {\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t\\t\\t\\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\\t\\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\\r\\n\\t\\t\\t\\t\\t\\t\\t// block.setCollapsed(false);\\r\\n\\t\\t\\t\\t}; \\t\\t\\t\\t\\t\\t\\r\\n\\t\\tdispatcher[\\\"execution_finished\\\"] = () => {\\r\\n\\t\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t\\t};\\t\\t\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blockly_Debugger = {};\\r\\nBlockly_Debugger.actions = {};\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"] = {}; \\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blockly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = {};\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"].watches = [];\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"watch\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Watch\\\"].watches});\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = (function(){\\r\\n    var variables = [];\\r\\n\\r\\n    function handler() {};     \\r\\n\\r\\n    function update(new_vars){\\r\\n        variables = new_vars;\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getVariables(){\\r\\n        return variables;\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        update : update,\\r\\n        getVariables : getVariables       \\r\\n    }\\r\\n})();\\r\\n\\r\\n Debuggee_Worker.AddOnDispacher(\\\"variables\\\", Blockly_Debugger.actions[\\\"Variables\\\"].update);\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\nimport './watches.js';\\r\\n\\r\\n// function addCode(js){                                // gia na kanw debug to eval \\r\\n//     var e = document.createElement('script');\\r\\n//     e.type = 'text/javascript';\\r\\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\\r\\n//     document.head.appendChild(e);\\r\\n// }\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"].handler = (cursorBreakpoint) => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    \\r\\n\\r\\n    var variables1 = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    var variables2 = (window.workspace[\\\"blockly2\\\"].getAllVariables()).map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    \\r\\n\\r\\n    console.log( window.workspace[\\\"blockly1\\\"].getAllVariables());\\r\\n\\r\\n    var variables= [];\\r\\n    for(var i = 0; i<variables1.length; ++i){\\r\\n        var nvar = {\\r\\n            \\\"name\\\" : variables1[i],\\r\\n            \\\"value\\\" : undefined\\r\\n        }\\r\\n        variables.push(nvar);\\r\\n    }\\r\\n\\r\\n    var variables_names =  variables.map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    for(var i = 0; i<variables2.length; ++i){\\r\\n        if(variables_names.includes(variables2[i])) continue;\\r\\n        var nvar = {\\r\\n            \\\"name\\\" : variables2[i],\\r\\n            \\\"value\\\" : undefined\\r\\n        }\\r\\n        variables.push(nvar);\\r\\n    }\\r\\n    Blockly_Debugger.actions[\\\"Variables\\\"].update(variables);\\r\\n\\r\\n    // var code = \\\"async function code(){\\\\n\\\" + code1 + code2 +\\\" };\\\\ncode();\\\";\\r\\n    // addCode(code);\\r\\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \\\"\\\";\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints,\\r\\n                                                                               \\\"cursorBreakpoint\\\": cursorBreakpoint,\\r\\n                                                                               \\\"watches\\\": Blockly_Debugger.actions[\\\"Watch\\\"].watches,            // prepei na kanw allages gt kanoyn allo pragma\\r\\n                                                                               \\\"variables\\\": variables\\r\\n                                                                            }});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints});\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].handler = (block_id) => {\\r\\n    if(!Debuggee_Worker.hasInstance()) {\\r\\n        Blockly_Debugger.actions[\\\"Start\\\"].handler(block_id);\\r\\n        return;\\r\\n    }; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"runToCursor\\\", \\\"data\\\": block_id});\\r\\n}\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    // old blockly\\r\\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \\r\\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\\r\\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n//     // Get element at index.\\r\\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n//     var mode = block.getFieldValue('MODE') || 'GET';\\r\\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n//     list = '(' + list + ')';\\r\\n//     if (where == 'FIRST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.shift()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.shift();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'LAST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.pop()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.pop();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_START') {\\r\\n//       // Blockly uses one-based indicies.\\r\\n//       if (Blockly.isNumber(at)) {\\r\\n//         // If the index is a naked number, decrement it right now.\\r\\n//         at = parseFloat(at) - 1;\\r\\n//       } else {\\r\\n//         // If the index is dynamic, decrement it in code.\\r\\n//         at += ' - 1';\\r\\n//       }\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[' + at + ']';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.splice(' + at + ', 1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.splice(' + at + ', 1);\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_END') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-' + at + ')[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n//         var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//             'lists_remove_from_end',\\r\\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//                 '(list, x) {',\\r\\n//               '  x = list.length - x;',\\r\\n//               '  return list.splice(x, 1)[0];',\\r\\n//               '}']);\\r\\n//         code = functionName + '(' + list + ', ' + at + ')';\\r\\n//         if (mode == 'GET_REMOVE') {\\r\\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//         } else if (mode == 'REMOVE') {\\r\\n//           return code + ';\\\\n';\\r\\n//         }\\r\\n//       }\\r\\n//     } else if (where == 'RANDOM') {\\r\\n//       var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//           'lists_get_random_item',\\r\\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//               '(list, remove) {',\\r\\n//             '  var x = Math.floor(Math.random() * list.length);',\\r\\n//             '  if (remove) {',\\r\\n//             '    return list.splice(x, 1)[0];',\\r\\n//             '  } else {',\\r\\n//             '    return list[x];',\\r\\n//             '  }',\\r\\n//             '}']);\\r\\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return code + ';\\\\n';\\r\\n//       }\\r\\n//     }\\r\\n//     throw 'Unhandled combination (lists_getIndex).';\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n  // Get element at index.\\r\\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n  var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\\r\\n      Blockly.JavaScript.ORDER_MEMBER;\\r\\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\\r\\n  list = '(' + list + ')';\\r\\n  switch (where) {\\r\\n    case ('FIRST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('LAST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_START'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_END'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);';\\r\\n      }\\r\\n      break;\\r\\n    case ('RANDOM'):\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'listsGetRandomItem',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n           '  var x = Math.floor(Math.random() * list.length);',\\r\\n           '  if (remove) {',\\r\\n           '    return list.splice(x, 1)[0];',\\r\\n           '  } else {',\\r\\n           '    return list[x];',\\r\\n           '  }',\\r\\n           '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n  throw 'Unhandled combination (lists_getIndex).';\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n\\r\\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n  //   // Set element at index.\\r\\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  //   var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n  //   // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n  //   list = '(' + list + ')';\\r\\n  //   function cacheList() {\\r\\n  //     if (list.match(/^\\\\w+$/)) {\\r\\n  //       return '';\\r\\n  //     }\\r\\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n  //     list = listVar;\\r\\n  //     return code;\\r\\n  //   }\\r\\n  //   if (where == 'FIRST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[0] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.unshift(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'LAST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       var code = cacheList();\\r\\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.push(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_START') {\\r\\n  //     // Blockly uses one-based indicies.\\r\\n  //     if (Blockly.isNumber(at)) {\\r\\n  //       // If the index is a naked number, decrement it right now.\\r\\n  //       at = parseFloat(at) - 1;\\r\\n  //     } else {\\r\\n  //       // If the index is dynamic, decrement it in code.\\r\\n  //       at += ' - 1';\\r\\n  //     }\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_END') {\\r\\n  //     var code = cacheList();\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n  //           ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   } else if (where == 'RANDOM') {\\r\\n  //     var code = cacheList();\\r\\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n  //         '.length);\\\\n';\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   }\\r\\n  //   throw 'Unhandled combination (lists_setIndex).';\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n\\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmpList', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    switch (where) {\\r\\n      case ('FIRST'):\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[0] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.unshift(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('LAST'):\\r\\n        if (mode == 'SET') {\\r\\n          var code = cacheList();\\r\\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.push(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_START'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_END'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\\r\\n            Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n        var code = cacheList();\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n              ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n      case ('RANDOM'):\\r\\n        var code = cacheList();\\r\\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            'tmpX', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n            '.length);\\\\n';\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['lists_split'] = function(block) {\\r\\n  //   // Block for splitting text into a list, or joining a list into text.\\r\\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER);\\r\\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //   var mode = block.getFieldValue('MODE');\\r\\n  //   if (mode == 'SPLIT') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '\\\\'\\\\'';\\r\\n  //     }\\r\\n  //     var functionName = 'split';\\r\\n  //   } else if (mode == 'JOIN') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '[]';\\r\\n  //     }\\r\\n  //     var functionName = 'join';\\r\\n  //   } else {\\r\\n  //     throw 'Unknown mode: ' + mode;\\r\\n  //   }\\r\\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!input) {\\r\\n        input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!input) {\\r\\n        input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_reverse'] = function(block) {\\r\\n    // Block for reversing a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var code = '(' + list + ')' + '.slice().reverse()';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n//     // Define a procedure with a return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n//       branch = Blockly.JavaScript.prefixLines(\\r\\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\'), eval(update_values())'\\r\\n//         ), Blockly.JavaScript.INDENT) + branch ;\\r\\n//     }\\r\\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\'') + branch;\\r\\n//     }\\r\\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n//         Blockly.JavaScript.ORDER_NONE) || '';\\r\\n//     if (returnValue) {\\r\\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n//     }else{\\r\\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n//     }\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n//           Blockly.Variables.NAME_TYPE);\\r\\n//     }\\r\\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n//         branch +    \\r\\n//         returnValue + '}'; \\r\\n//     code = Blockly.JavaScript.scrub_(block, code);\\r\\n//     Blockly.JavaScript.definitions_[funcName] = code;\\r\\n//     return null;\\r\\n//   };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.\\r\\n        branch = Blockly.JavaScript.prefixLines(\\r\\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \\\"0\\\" + ', \\\\'' + id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n\\r\\n     if (returnValue) {\\r\\n         returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n     }else{\\r\\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n     }\\r\\n\\r\\n\\r\\n    var args = [];\\r\\n    for (var i = 0; i < block.arguments_.length; i++) {\\r\\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n                branch +    \\r\\n                returnValue + '}';\\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    // Add % so as not to collide with helper functions in definitions list.\\r\\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\\\n  Blockly_Debuggee.state.currState.parent = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      goog.asserts.assert(block.outputConnection,               //!! Now blockly \\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n      code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), ' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\') ') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  id = id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blockly_Debugger.actions[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blockly_Debugger.actions[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blockly_Debugger.actions[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blockly_Debugger.actions[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blockly_Debugger.actions[\\\"Start\\\"].handler;\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\\r\\n\\r\\n\\r\\naddEventListener(\\\"updateTable\\\",function (){\\r\\n    let variables = Blockly_Debugger.actions[\\\"Variables\\\"].getVariables();\\r\\n     console.log(variables);\\r\\n    document.getElementById(\\\"variables\\\").innerHTML = '';\\r\\n    for(var i = 0; i<variables.length; ++i){\\r\\n        document.getElementById(\\\"variables\\\").innerHTML += `<tr>\\r\\n                                                                <td>` + variables[i].name + `</td>\\r\\n                                                                <td>` +  variables[i].value + `</td>\\r\\n                                                                <td>` + typeof variables[i].value + `</td>\\r\\n                                                            </tr>`;\\r\\n    }\\r\\n});\\r\\n\\r\\n\\r\\n\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\\r\\n        Blockly.JavaScript.ORDER_MEMBER;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        // Adjust index if using one-based indices.\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n        var code = text + '.slice(' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'textRandomLetter',\\r\\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n             '  var x = Math.floor(Math.random() * text.length);',\\r\\n             '  return text[x];',\\r\\n             '}']);\\r\\n        var code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else if (text.match(/^'?\\\\w+'?$/) ||\\r\\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\\r\\n        where2 != 'FROM_END' && where2 != 'LAST')) {\\r\\n      // If the text is a variable or literal or doesn't require a call for\\r\\n      // length, don't generate a helper function.\\r\\n      text = '(' + text + ')';\\r\\n      switch (where1) {\\r\\n        case 'FROM_START':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at1 = text + '.length - ' + at1;\\r\\n          break;\\r\\n        case 'FIRST':\\r\\n          var at1 = '0';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      switch (where2) {\\r\\n        case 'FROM_START':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at2 = text + '.length - ' + at2;\\r\\n          break;\\r\\n        case 'LAST':\\r\\n          var at2 = text + '.length';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\\r\\n    } else {\\r\\n      text = '(' + text + ')';\\r\\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\\r\\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\\r\\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\\r\\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n          '(sequence' +\\r\\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\\r\\n          // we add it as a parameter.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\\r\\n          ') {',\\r\\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\\r\\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\\r\\n            '  return sequence.slice(start, end);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text +\\r\\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\\r\\n          // pass it.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\\r\\n          ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n  //   // Change capitalization.\\r\\n  //   var OPERATORS = {\\r\\n  //     'UPPERCASE': '.toUpperCase()',\\r\\n  //     'LOWERCASE': '.toLowerCase()',\\r\\n  //     'TITLECASE': null\\r\\n  //   };\\r\\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n  //   var code;\\r\\n  //   if (operator) {\\r\\n  //     // Upper and lower case are functions built into JavaScript.\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n  //     code = '(' + argument0 + ')' + operator;\\r\\n  //   } else {\\r\\n  //     // Title case is not a native JavaScript function.  Define one.\\r\\n  //     var functionName = Blockly.JavaScript.provideFunction_(\\r\\n  //         'text_toTitleCase',\\r\\n  //         [ 'function ' +\\r\\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n  //           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n  //               'txt.substring(1).toLowerCase();});',\\r\\n  //           '}']);\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n  //   }\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\\r\\n        Blockly.JavaScript.ORDER_NONE;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var code = '(' + text + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'textToTitleCase',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(str) {',\\r\\n           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n              'txt.substring(1).toLowerCase();});',\\r\\n           '}']);\\r\\n      var code = functionName + '(' + '(' + text + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\\r\\n\\r\\n\\r\\n\",\" window.workspace = {};\\r\\n\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(//window.workspace[\\\"blockly1\\\"],\\r\\n\\tdocument.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly1\\\"]);\\r\\n\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(//window.workspace[\\\"blockly2\\\"],   \\r\\n\\tdocument.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly2\\\"]);\\r\\n\\r\\n\"]}","code":"!function(t){var e={};function a(r){if(e[r])return e[r].exports;var l=e[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,a),l.l=!0,l.exports}a.m=t,a.c=e,a.d=function(t,e,r){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=3)}([,,,function(t,e,a){\"use strict\";a.r(e);a(6);var r=function(){var t,e={};function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e.alert=(t=>{window.alert(t)}),e.prompt=(t=>{r.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})}),e.highlightBlock=(t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)}),e.execution_finished=(()=>{t=void 0}),t.onmessage=function(t){let a=t.data,r=a.data;e[a.type](r)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),l={actions:{}};l.actions.Continue={},l.actions.Continue.handler=(()=>{r.Instance().postMessage({type:\"continue\"})}),l.actions.StepIn={},l.actions.StepOver={},l.actions.StepParent={},l.actions.StepOut={},l.actions.StepIn.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"stepIn\"})}),l.actions.StepOver.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"stepOver\"})}),l.actions.StepParent.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"stepParent\"})}),l.actions.StepOut.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"stepOut\"})}),l.actions.Stop={},l.actions.Stop.handler=(()=>{r.Stop()}),l.actions.Watch={},l.actions.Variables={},l.actions.Watch.watches=[],l.actions.Watch.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"watch\",data:l.actions.Watch.watches})}),l.actions.Variables=function(){var t=[];return{update:function(e){t=e,dispatchEvent(new Event(\"updateTable\"))},getVariables:function(){return t}}}(),r.AddOnDispacher(\"variables\",l.actions.Variables.update),l.actions.Start={},l.actions.Start.handler=(t=>{if(!r.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),a=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),o=e+a,c=window.workspace.blockly1.getAllVariables().map(t=>t.name),n=window.workspace.blockly2.getAllVariables().map(t=>t.name);console.log(window.workspace.blockly1.getAllVariables());for(var i=[],s=0;s<c.length;++s){var p={name:c[s],value:void 0};i.push(p)}var u=i.map(t=>t.name);for(s=0;s<n.length;++s)if(!u.includes(n[s])){p={name:n[s],value:void 0};i.push(p)}l.actions.Variables.update(i),t instanceof MouseEvent&&(t=\"\"),r.Instance().postMessage({type:\"start_debugging\",data:{code:o,breakpoints:l.actions.Breakpoint.breakpoints,cursorBreakpoint:t,watches:l.actions.Watch.watches,variables:i}}),console.log(e+a)}}),l.actions.Breakpoint={},l.actions.RunToCursor={},l.actions.Breakpoint.breakpoints=[],l.actions.Breakpoint.handler=(()=>{r.hasInstance()&&r.Instance().postMessage({type:\"breakpoint\",data:l.actions.Breakpoint.breakpoints})}),l.actions.RunToCursor.handler=(t=>{r.hasInstance()?r.Instance().postMessage({type:\"runToCursor\",data:t}):l.actions.Start.handler(t)});var o={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",r=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[r+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[r,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",r=\"RANDOM\"==a?Blockly.JavaScript.ORDER_COMMA:Blockly.JavaScript.ORDER_MEMBER,l=Blockly.JavaScript.valueToCode(t,\"VALUE\",r)||\"[]\";switch(l=\"(\"+l+\")\",a){case\"FIRST\":if(\"GET\"==e)return[c=l+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[c=l+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return l+\".shift();\\n\";break;case\"LAST\":if(\"GET\"==e)return[c=l+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[c=l+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return l+\".pop();\\n\";break;case\"FROM_START\":var o=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"GET\"==e)return[c=l+\"[\"+o+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[c=l+\".splice(\"+o+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return l+\".splice(\"+o+\", 1);\\n\";break;case\"FROM_END\":var c;o=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0);if(\"GET\"==e)return[c=l+\".slice(\"+o+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e)return[c=l+\".splice(\"+o+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return l+\".splice(\"+o+\", 1);\";break;case\"RANDOM\":if(c=Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+l+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[c,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return c+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",r=t.getFieldValue(\"WHERE\")||\"FROM_START\",l=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function o(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}switch(e=\"(\"+e+\")\",r){case\"FIRST\":if(\"SET\"==a)return e+\"[0] = \"+l+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+l+\");\\n\";break;case\"LAST\":if(\"SET\"==a){var c=o();return c+=e+\"[\"+e+\".length - 1] = \"+l+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+l+\");\\n\";break;case\"FROM_START\":var n=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"SET\"==a)return e+\"[\"+n+\"] = \"+l+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+n+\", 0, \"+l+\");\\n\";break;case\"FROM_END\":n=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION),c=o();if(\"SET\"==a)return c+=e+\"[\"+e+\".length - \"+n+\"] = \"+l+\";\\n\";if(\"INSERT\"==a)return c+=e+\".splice(\"+e+\".length - \"+n+\", 0, \"+l+\");\\n\";break;case\"RANDOM\":c=o();var i=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\",Blockly.Variables.NAME_TYPE);if(c+=\"var \"+i+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return c+=e+\"[\"+i+\"] = \"+l+\";\\n\";if(\"INSERT\"==a)return c+=e+\".splice(\"+i+\", 0, \"+l+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",r=t.getFieldValue(\"MODE\");if(\"SPLIT\"==r){e||(e=\"''\");var l=\"split\"}else{if(\"JOIN\"!=r)throw\"Unknown mode: \"+r;e||(e=\"[]\");l=\"join\"}return[\"(\"+e+\").\"+l+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_reverse=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").slice().reverse()\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");if(Blockly.JavaScript.STATEMENT_PREFIX){var r=t.id.replace(/\\$/g,\"$$$$\");a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(0, '\"+r+\"', '\"+o.currentSystemEditorId+\"')\"),Blockly.JavaScript.INDENT)+a}Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var l=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";l=l?\"  let $returnValue = \"+l+\";\\n  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return $returnValue;\\n\":\"  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return;\\n\";for(var c=[],n=0;n<t.arguments_.length;n++)c[n]=Blockly.JavaScript.variableDB_.getName(t.arguments_[n],Blockly.Variables.NAME_TYPE);var i=\"async function \"+e+\"(\"+c.join(\", \")+\") {\\n  let global_nest = Blockly_Debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n\"+a+l+\"}\";return i=Blockly.JavaScript.scrub_(t,i),Blockly.JavaScript.definitions_[\"%\"+e]=i,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],r=0;r<t.arguments_.length;r++)a[r]=Blockly.JavaScript.valueToCode(t,\"ARG\"+r,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],r=0;r<t.arguments_.length;r++)a[r]=Blockly.JavaScript.valueToCode(t,\"ARG\"+r,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"};a(5);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++o.nest,r=e.call(t,t);if(o.nest--,goog.isArray(r))return goog.asserts.assert(t.outputConnection,//!! Now blockly \n'Expecting string from statement block \"%s\".',t.type),r[0]=\"await $id(eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+o.currentSystemEditorId+\"'), \"+r[0]+\")\",[this.scrub_(t,r[0]),r[1]];if(goog.isString(r)){t.id.replace(/\\$/g,\"$$$$\");return this.STATEMENT_PREFIX&&(r=this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+o.currentSystemEditorId+\"') \")+r),this.scrub_(t,r)}if(null===r)return\"\";goog.asserts.fail(\"Invalid code generated: %s\",r)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return e=e.replace(/\\$/g,\"$$$$\"),this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+o.nest+\", '\"+e+\"', '\"+o.currentSystemEditorId+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);o.currentSystemEditorId=t.systemEditorId;var r=\"\\n// start source code of another editor\\n\";e.push(r);for(var l,c=0;l=a[c];c++)r=this.blockToCode(l),goog.isArray(r)&&(r=r[0]),r&&(l.outputConnection&&this.scrubNakedValue&&(r=this.scrubNakedValue(r)),e.push(r));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")};a(7);document.getElementById(\"ContinueButton\").onclick=l.actions.Continue.handler,document.getElementById(\"StepInButton\").onclick=l.actions.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=l.actions.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=l.actions.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=l.actions.StepOut.handler,document.getElementById(\"StopButton\").onclick=l.actions.Stop.handler,document.getElementById(\"StartButton\").onclick=l.actions.Start.handler,addEventListener(\"updateTable\",function(){let t=l.actions.Variables.getVariables();console.log(t),document.getElementById(\"variables\").innerHTML=\"\";for(var e=0;e<t.length;++e)document.getElementById(\"variables\").innerHTML+=\"<tr>\\n                                                                <td>\"+t[e].name+\"</td>\\n                                                                <td>\"+t[e].value+\"</td>\\n                                                                <td>\"+typeof t[e].value+\"</td>\\n                                                            </tr>\"})},,function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",r=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[r+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[r,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=\"RANDOM\"==e?Blockly.JavaScript.ORDER_NONE:Blockly.JavaScript.ORDER_MEMBER,r=Blockly.JavaScript.valueToCode(t,\"VALUE\",a)||\"''\";switch(r=\"(\"+r+\")\",e){case\"FIRST\":return[r+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[r+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return[r+\".charAt(\"+Blockly.JavaScript.getAdjusted(t,\"AT\")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[r+\".slice(\"+Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0)+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"textRandomLetter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+r+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\",a=t.getFieldValue(\"WHERE1\"),r=t.getFieldValue(\"WHERE2\");if(\"FIRST\"==a&&\"LAST\"==r)var l=e;else if(e.match(/^'?\\w+'?$/)||\"FROM_END\"!=a&&\"LAST\"!=a&&\"FROM_END\"!=r&&\"LAST\"!=r){switch(e=\"(\"+e+\")\",a){case\"FROM_START\":var o=Blockly.JavaScript.getAdjusted(t,\"AT1\");break;case\"FROM_END\":o=e+\".length - \"+(o=Blockly.JavaScript.getAdjusted(t,\"AT1\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"FIRST\":o=\"0\";break;default:throw\"Unhandled option (text_getSubstring).\"}switch(r){case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT2\",1);break;case\"FROM_END\":c=e+\".length - \"+(c=Blockly.JavaScript.getAdjusted(t,\"AT2\",0,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"LAST\":c=e+\".length\";break;default:throw\"Unhandled option (text_getSubstring).\"}l=e+\".slice(\"+o+\", \"+c+\")\"}else{e=\"(\"+e+\")\";o=Blockly.JavaScript.getAdjusted(t,\"AT1\"),c=Blockly.JavaScript.getAdjusted(t,\"AT2\");var n=Blockly.JavaScript.text.getIndex_,i={FIRST:\"First\",LAST:\"Last\",FROM_START:\"FromStart\",FROM_END:\"FromEnd\"};l=Blockly.JavaScript.provideFunction_(\"subsequence\"+i[a]+i[r],[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(sequence\"+(\"FROM_END\"==a||\"FROM_START\"==a?\", at1\":\"\")+(\"FROM_END\"==r||\"FROM_START\"==r?\", at2\":\"\")+\") {\",\"  var start = \"+n(\"sequence\",a,\"at1\")+\";\",\"  var end = \"+n(\"sequence\",r,\"at2\")+\" + 1;\",\"  return sequence.slice(start, end);\",\"}\"])+\"(\"+e+(\"FROM_END\"==a||\"FROM_START\"==a?\", \"+o:\"\")+(\"FROM_END\"==r||\"FROM_START\"==r?\", \"+c:\"\")+\")\"}return[l,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")],a=e?Blockly.JavaScript.ORDER_MEMBER:Blockly.JavaScript.ORDER_NONE,r=Blockly.JavaScript.valueToCode(t,\"TEXT\",a)||\"''\";if(e)var l=\"(\"+r+\")\"+e;else l=Blockly.JavaScript.provideFunction_(\"textToTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+r+\"))\";return[l,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext},function(t,e){window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly1),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly2)},function(t,e){throw new Error('Module parse failed: Unexpected token (145:20)\\nYou may need an appropriate loader to handle this file type.\\n|     var evalOption = {\\r\\n|       text: \"Evaluate\",\\r\\n|       enabled: true,,\\r\\n|       callback: function(){\\r\\n|         console.log(block);\\r')}]);","extractedComments":[]}