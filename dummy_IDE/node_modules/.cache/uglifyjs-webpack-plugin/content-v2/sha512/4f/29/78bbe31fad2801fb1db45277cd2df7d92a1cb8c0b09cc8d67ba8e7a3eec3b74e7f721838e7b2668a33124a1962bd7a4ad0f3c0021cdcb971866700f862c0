{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\watches.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block_svg.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\events.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Blockly\",\"Block\",\"toString\",\"opt_maxLength\",\"opt_emptyToken\",\"text\",\"emptyFieldPlaceholder\",\"this\",\"collapsed_\",\"push\",\"getInput\",\"fieldRow\",\"text_\",\"input\",\"inputList\",\"field\",\"j\",\"FieldDropdown\",\"getValue\",\"getText\",\"connection\",\"child\",\"targetBlock\",\"child_text\",\"undefined\",\"goog\",\"string\",\"trim\",\"join\",\"truncate\",\"JavaScript\",\"block\",\"valueToCode\",\"ORDER_FUNCTION_CALL\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"argument0\",\"ORDER_NONE\",\"code\",\"workspace\",\"options\",\"oneBasedIndex\",\"ORDER_ADDITION\",\"where\",\"textOrder\",\"getAdjusted\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"where1\",\"where2\",\"match\",\"at1\",\"ORDER_SUBTRACTION\",\"at2\",\"getIndex_\",\"wherePascalCase\",\"FIRST\",\"LAST\",\"FROM_START\",\"FROM_END\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\",\"msg\",\"quote_\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"Instance\",\"Worker\",\"window\",\"alert\",\"postMessage\",\"type\",\"data\",\"prompt\",\"CurrentSystemEditorId\",\"traceOn_\",\"highlightBlock\",\"id\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blockly_Debugger\",\"actions\",\"handler\",\"watches\",\"dispatchEvent\",\"Event\",\"update\",\"new_watches\",\"console\",\"log\",\"getWatches\",\"init\",\"length\",\"variables\",\"new_vars\",\"getVariables\",\"workspace_vars\",\"getAllVariables\",\"map\",\"variable\",\"variables_names\",\"includes\",\"nvar\",\"expr\",\"cursorBreakpoint\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"MouseEvent\",\"breakpoints\",\"block_id\",\"generation\",\"nest\",\"currentSystemEditorId\",\"item\",\"mode\",\"listOrder\",\"ORDER_COMMA\",\"list\",\"at\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"xVar\",\"delimiter\",\"functionName\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"replace\",\"prefixLines\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"arguments_\",\"scrub_\",\"definitions_\",\"x\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"getNextBlock\",\"func\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"assert\",\"outputConnection\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"scrubNakedValue\",\"finish\",\"myBlockToCode\",\"stmt_Prefix\",\"myscrub_\",\"a\",\"b\",\"targetConnection\",\"getCommentText\",\"utils\",\"wrap\",\"COMMENT_WRAP\",\"getProcedureDef\",\"e\",\"INPUT_VALUE\",\"allNestedComments\",\"functionNames_\",\"reset\",\"BlockSvg\",\"showContextMenu_\",\"readOnly\",\"contextMenu\",\"menuOptions\",\"isDeletable\",\"isMovable\",\"isInFlyout\",\"ContextMenu\",\"blockDuplicateOption\",\"isEditable\",\"comments\",\"blockCommentOption\",\"NEXT_STATEMENT\",\"inlineOption\",\"enabled\",\"isInline\",\"getInputsInline\",\"Msg\",\"setInputsInline\",\"collapse\",\"expandOption\",\"setCollapsed\",\"collapseOption\",\"disable\",\"disableOption\",\"getInheritedDisabled\",\"setDisabled\",\"blockDeleteOption\",\"breakpointOption\",\"icon\",\"lala\",\"index\",\"indexOf\",\"splice\",\"new_br\",\"enable\",\"breakpoint\",\"runToCursorOption\",\"watchOption\",\"new_watch\",\"evalOption\",\"block___\",\"blockHelpOption\",\"customContextMenu\",\"show\",\"RTL\",\"currentBlock\",\"addEventListener\",\"document\",\"getElementById\",\"innerHTML\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\",\"onclick\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 7);\\n\",\"\\r\\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\\r\\n    var text = [];\\r\\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\\r\\n    if (this.collapsed_) {\\r\\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\\r\\n    } else {\\r\\n      for (var i = 0, input; input = this.inputList[i]; i++) {\\r\\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\\r\\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          } else {\\r\\n            text.push(field.getText());\\r\\n          }\\r\\n        }\\r\\n        if (input.connection) {\\r\\n          var child = input.connection.targetBlock();\\r\\n          if (child) {\\r\\n              var child_text = child.toString(undefined, opt_emptyToken);\\r\\n              child_text = \\\"(\\\" + child_text + \\\")\\\";\\r\\n            text.push(child_text);\\r\\n          } else {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    text = goog.string.trim(text.join(' ')) || '???';\\r\\n    if (opt_maxLength) {\\r\\n      // TODO: Improve truncation so that text from this block is given priority.\\r\\n      // E.g. \\\"1+2+3+4+5+6+7+8+9=0\\\" should be \\\"...6+7+8+9=0\\\", not \\\"1+2+3+4+5...\\\".\\r\\n      // E.g. \\\"1+2+3+4+5=6+7+8+9+0\\\" should be \\\"...4+5=6+7...\\\".\\r\\n      text = goog.string.truncate(text, opt_maxLength);\\r\\n    }\\r\\n    return text;\\r\\n  };\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\\r\\n        Blockly.JavaScript.ORDER_MEMBER;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        // Adjust index if using one-based indices.\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n        var code = text + '.slice(' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'textRandomLetter',\\r\\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n             '  var x = Math.floor(Math.random() * text.length);',\\r\\n             '  return text[x];',\\r\\n             '}']);\\r\\n        var code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else if (text.match(/^'?\\\\w+'?$/) ||\\r\\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\\r\\n        where2 != 'FROM_END' && where2 != 'LAST')) {\\r\\n      // If the text is a variable or literal or doesn't require a call for\\r\\n      // length, don't generate a helper function.\\r\\n      text = '(' + text + ')';\\r\\n      switch (where1) {\\r\\n        case 'FROM_START':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at1 = text + '.length - ' + at1;\\r\\n          break;\\r\\n        case 'FIRST':\\r\\n          var at1 = '0';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      switch (where2) {\\r\\n        case 'FROM_START':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at2 = text + '.length - ' + at2;\\r\\n          break;\\r\\n        case 'LAST':\\r\\n          var at2 = text + '.length';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\\r\\n    } else {\\r\\n      text = '(' + text + ')';\\r\\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\\r\\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\\r\\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\\r\\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n          '(sequence' +\\r\\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\\r\\n          // we add it as a parameter.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\\r\\n          ') {',\\r\\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\\r\\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\\r\\n            '  return sequence.slice(start, end);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text +\\r\\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\\r\\n          // pass it.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\\r\\n          ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n  //   // Change capitalization.\\r\\n  //   var OPERATORS = {\\r\\n  //     'UPPERCASE': '.toUpperCase()',\\r\\n  //     'LOWERCASE': '.toLowerCase()',\\r\\n  //     'TITLECASE': null\\r\\n  //   };\\r\\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n  //   var code;\\r\\n  //   if (operator) {\\r\\n  //     // Upper and lower case are functions built into JavaScript.\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n  //     code = '(' + argument0 + ')' + operator;\\r\\n  //   } else {\\r\\n  //     // Title case is not a native JavaScript function.  Define one.\\r\\n  //     var functionName = Blockly.JavaScript.provideFunction_(\\r\\n  //         'text_toTitleCase',\\r\\n  //         [ 'function ' +\\r\\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n  //           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n  //               'txt.substring(1).toLowerCase();});',\\r\\n  //           '}']);\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n  //   }\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\\r\\n        Blockly.JavaScript.ORDER_NONE;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var code = '(' + text + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'textToTitleCase',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(str) {',\\r\\n           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n              'txt.substring(1).toLowerCase();});',\\r\\n           '}']);\\r\\n      var code = functionName + '(' + '(' + text + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\\r\\n\\r\\n\\r\\n\",\"export var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher = {};\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\"); // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher[\\\"alert\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"prompt\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"highlightBlock\\\"] = (data) => {\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t\\t\\t\\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\\t\\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\\r\\n\\t\\t\\t\\t\\t\\t\\t// block.setCollapsed(false);\\r\\n\\t\\t\\t\\t}; \\t\\t\\t\\t\\t\\t\\r\\n\\t\\tdispatcher[\\\"execution_finished\\\"] = () => {\\r\\n\\t\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t\\t};\\t\\t\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blockly_Debugger = {};\\r\\nBlockly_Debugger.actions = {};\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"] = {}; \\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blockly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"] = {};\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = (function(){\\r\\n    var watches = [];\\r\\n    \\r\\n    function handler(){\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n        if(!Debuggee_Worker.hasInstance()) return; \\r\\n        Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"watch\\\", \\\"data\\\": watches});\\r\\n    }\\r\\n\\r\\n    function update(new_watches){\\r\\n        watches = new_watches;\\r\\n        console.log(\\\"Upadated watch Debugger:\\\");\\r\\n        console.log(watches);\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getWatches(){\\r\\n        return watches;\\r\\n    }\\r\\n\\r\\n    function init(){\\r\\n        for(var i=0; i<watches.length; ++i){\\r\\n            watches[i].value = undefined;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        handler : handler,\\r\\n        update : update,\\r\\n        getWatches : getWatches,\\r\\n        init : init       \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = (function(){\\r\\n    var variables = [];\\r\\n\\r\\n    function handler() {};     \\r\\n\\r\\n    function update(new_vars){\\r\\n        variables = new_vars;\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getVariables(){\\r\\n        return variables;\\r\\n    };\\r\\n\\r\\n    function init(){\\r\\n        // var variables1 = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n        // var variables2 = (window.workspace[\\\"blockly2\\\"].getAllVariables()).map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n\\r\\n\\r\\n        var workspace_vars = [];\\r\\n        workspace_vars[0] = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n        workspace_vars[1] = window.workspace[\\\"blockly2\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n\\r\\n        for(var i = 0; i<workspace_vars.length; i++){\\r\\n            var variables_names =  variables.map((variable) => {\\r\\n                return variable.name;\\r\\n            });   \\r\\n            for(var j = 0; j<workspace_vars[i].length; ++j){\\r\\n                if(variables_names.includes(workspace_vars[i][j])) continue;\\r\\n                var nvar = {\\r\\n                    \\\"name\\\" : workspace_vars[i][j],\\r\\n                    \\\"value\\\" : undefined\\r\\n                }\\r\\n                variables.push(nvar);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        // var variables_names =  variables.map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n\\r\\n        // for(var i = 0; i<variables1.length; ++i){\\r\\n        //     if(variables_names.includes(variables1[i])) continue;\\r\\n        //     var nvar = {\\r\\n        //         \\\"name\\\" : variables1[i],\\r\\n        //         \\\"value\\\" : undefined\\r\\n        //     }\\r\\n        //     variables.push(nvar);\\r\\n        // }\\r\\n\\r\\n        // variables_names =  variables.map((variable) => {\\r\\n        //     return variable.name;\\r\\n        // });\\r\\n        \\r\\n        // for(var i = 0; i<variables2.length; ++i){\\r\\n        //     if(variables_names.includes(variables2[i])) continue;\\r\\n        //     var nvar = {\\r\\n        //         \\\"name\\\" : variables2[i],\\r\\n        //         \\\"value\\\" : undefined\\r\\n        //     }\\r\\n        //     variables.push(nvar);\\r\\n        // }\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n\\r\\n    return {\\r\\n        update : update,\\r\\n        getVariables : getVariables,\\r\\n        init : init       \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"].handler = function (expr){\\r\\n    console.log(expr);\\r\\n    if(!Debuggee_Worker.hasInstance()) return;\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"eval\\\", \\\"data\\\": expr});\\r\\n}\\r\\n\\r\\n\\r\\nDebuggee_Worker.AddOnDispacher(\\\"watches\\\", Blockly_Debugger.actions[\\\"Watch\\\"].update);\\r\\nDebuggee_Worker.AddOnDispacher(\\\"variables\\\", Blockly_Debugger.actions[\\\"Variables\\\"].update);\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\nimport './watches.js';\\r\\n\\r\\n// function addCode(js){                                // gia na kanw debug to eval \\r\\n//     var e = document.createElement('script');\\r\\n//     e.type = 'text/javascript';\\r\\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\\r\\n//     document.head.appendChild(e);\\r\\n// }\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"].handler = (cursorBreakpoint) => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    \\r\\n    Blockly_Debugger.actions[\\\"Variables\\\"].init();\\r\\n    Blockly_Debugger.actions[\\\"Watch\\\"].init();\\r\\n\\r\\n    // var code = \\\"async function code(){\\\\n\\\" + code1 + code2 +\\\" };\\\\ncode();\\\";\\r\\n    // addCode(code);\\r\\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \\\"\\\";\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints,\\r\\n                                                                               \\\"cursorBreakpoint\\\": cursorBreakpoint,\\r\\n                                                                               \\\"watches\\\": Blockly_Debugger.actions[\\\"Watch\\\"].getWatches(),\\r\\n                                                                               \\\"variables\\\": Blockly_Debugger.actions[\\\"Variables\\\"].getVariables()\\r\\n                                                                            }});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints});\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].handler = (block_id) => {\\r\\n    if(!Debuggee_Worker.hasInstance()) {\\r\\n        Blockly_Debugger.actions[\\\"Start\\\"].handler(block_id);\\r\\n        return;\\r\\n    }; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"runToCursor\\\", \\\"data\\\": block_id});\\r\\n}\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    // old blockly\\r\\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \\r\\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\\r\\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n//     // Get element at index.\\r\\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n//     var mode = block.getFieldValue('MODE') || 'GET';\\r\\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n//     list = '(' + list + ')';\\r\\n//     if (where == 'FIRST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.shift()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.shift();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'LAST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.pop()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.pop();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_START') {\\r\\n//       // Blockly uses one-based indicies.\\r\\n//       if (Blockly.isNumber(at)) {\\r\\n//         // If the index is a naked number, decrement it right now.\\r\\n//         at = parseFloat(at) - 1;\\r\\n//       } else {\\r\\n//         // If the index is dynamic, decrement it in code.\\r\\n//         at += ' - 1';\\r\\n//       }\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[' + at + ']';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.splice(' + at + ', 1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.splice(' + at + ', 1);\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_END') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-' + at + ')[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n//         var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//             'lists_remove_from_end',\\r\\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//                 '(list, x) {',\\r\\n//               '  x = list.length - x;',\\r\\n//               '  return list.splice(x, 1)[0];',\\r\\n//               '}']);\\r\\n//         code = functionName + '(' + list + ', ' + at + ')';\\r\\n//         if (mode == 'GET_REMOVE') {\\r\\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//         } else if (mode == 'REMOVE') {\\r\\n//           return code + ';\\\\n';\\r\\n//         }\\r\\n//       }\\r\\n//     } else if (where == 'RANDOM') {\\r\\n//       var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//           'lists_get_random_item',\\r\\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//               '(list, remove) {',\\r\\n//             '  var x = Math.floor(Math.random() * list.length);',\\r\\n//             '  if (remove) {',\\r\\n//             '    return list.splice(x, 1)[0];',\\r\\n//             '  } else {',\\r\\n//             '    return list[x];',\\r\\n//             '  }',\\r\\n//             '}']);\\r\\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return code + ';\\\\n';\\r\\n//       }\\r\\n//     }\\r\\n//     throw 'Unhandled combination (lists_getIndex).';\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n  // Get element at index.\\r\\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n  var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\\r\\n      Blockly.JavaScript.ORDER_MEMBER;\\r\\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\\r\\n  list = '(' + list + ')';\\r\\n  switch (where) {\\r\\n    case ('FIRST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('LAST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_START'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_END'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);';\\r\\n      }\\r\\n      break;\\r\\n    case ('RANDOM'):\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'listsGetRandomItem',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n           '  var x = Math.floor(Math.random() * list.length);',\\r\\n           '  if (remove) {',\\r\\n           '    return list.splice(x, 1)[0];',\\r\\n           '  } else {',\\r\\n           '    return list[x];',\\r\\n           '  }',\\r\\n           '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n  throw 'Unhandled combination (lists_getIndex).';\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n\\r\\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n  //   // Set element at index.\\r\\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  //   var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n  //   // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n  //   list = '(' + list + ')';\\r\\n  //   function cacheList() {\\r\\n  //     if (list.match(/^\\\\w+$/)) {\\r\\n  //       return '';\\r\\n  //     }\\r\\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n  //     list = listVar;\\r\\n  //     return code;\\r\\n  //   }\\r\\n  //   if (where == 'FIRST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[0] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.unshift(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'LAST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       var code = cacheList();\\r\\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.push(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_START') {\\r\\n  //     // Blockly uses one-based indicies.\\r\\n  //     if (Blockly.isNumber(at)) {\\r\\n  //       // If the index is a naked number, decrement it right now.\\r\\n  //       at = parseFloat(at) - 1;\\r\\n  //     } else {\\r\\n  //       // If the index is dynamic, decrement it in code.\\r\\n  //       at += ' - 1';\\r\\n  //     }\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_END') {\\r\\n  //     var code = cacheList();\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n  //           ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   } else if (where == 'RANDOM') {\\r\\n  //     var code = cacheList();\\r\\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n  //         '.length);\\\\n';\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   }\\r\\n  //   throw 'Unhandled combination (lists_setIndex).';\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n\\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmpList', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    switch (where) {\\r\\n      case ('FIRST'):\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[0] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.unshift(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('LAST'):\\r\\n        if (mode == 'SET') {\\r\\n          var code = cacheList();\\r\\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.push(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_START'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_END'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\\r\\n            Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n        var code = cacheList();\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n              ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n      case ('RANDOM'):\\r\\n        var code = cacheList();\\r\\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            'tmpX', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n            '.length);\\\\n';\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['lists_split'] = function(block) {\\r\\n  //   // Block for splitting text into a list, or joining a list into text.\\r\\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER);\\r\\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //   var mode = block.getFieldValue('MODE');\\r\\n  //   if (mode == 'SPLIT') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '\\\\'\\\\'';\\r\\n  //     }\\r\\n  //     var functionName = 'split';\\r\\n  //   } else if (mode == 'JOIN') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '[]';\\r\\n  //     }\\r\\n  //     var functionName = 'join';\\r\\n  //   } else {\\r\\n  //     throw 'Unknown mode: ' + mode;\\r\\n  //   }\\r\\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!input) {\\r\\n        input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!input) {\\r\\n        input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_reverse'] = function(block) {\\r\\n    // Block for reversing a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var code = '(' + list + ')' + '.slice().reverse()';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n//     // Define a procedure with a return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n//       branch = Blockly.JavaScript.prefixLines(\\r\\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\'), eval(update_values())'\\r\\n//         ), Blockly.JavaScript.INDENT) + branch ;\\r\\n//     }\\r\\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\'') + branch;\\r\\n//     }\\r\\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n//         Blockly.JavaScript.ORDER_NONE) || '';\\r\\n//     if (returnValue) {\\r\\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n//     }else{\\r\\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n//     }\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n//           Blockly.Variables.NAME_TYPE);\\r\\n//     }\\r\\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n//         branch +    \\r\\n//         returnValue + '}'; \\r\\n//     code = Blockly.JavaScript.scrub_(block, code);\\r\\n//     Blockly.JavaScript.definitions_[funcName] = code;\\r\\n//     return null;\\r\\n//   };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.\\r\\n        branch = Blockly.JavaScript.prefixLines(\\r\\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \\\"0\\\" + ', \\\\'' + id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n\\r\\n     if (returnValue) {\\r\\n         returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n     }else{\\r\\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n     }\\r\\n\\r\\n\\r\\n    var args = [];\\r\\n    for (var i = 0; i < block.arguments_.length; i++) {\\r\\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n                branch +    \\r\\n                returnValue + '}';\\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    // Add % so as not to collide with helper functions in definitions list.\\r\\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\\\n  Blockly_Debuggee.state.currState.parent = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n      if (this.STATEMENT_PREFIX) \\r\\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), ' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! New blockly \\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\') ') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  id = id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\\r\\n\\r\\n\\r\\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\\r\\n Blockly.Generator.prototype.myBlockToCode = function(block) {\\r\\n   console.log(\\\"myBlockToCode\\\");\\r\\n  if (!block || block.disabled) {\\r\\n    return '';\\r\\n  }\\r\\n  this.init(block.workspace);           //  added \\r\\n  var func = this[block.type];\\r\\n  var stmt_Prefix = this.STATEMENT_PREFIX;\\r\\n  this.STATEMENT_PREFIX = null;\\r\\n  goog.asserts.assertFunction(func,\\r\\n      'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n      this.name_, block.type);\\r\\n   var code = func.call(block, block);\\r\\n  if (goog.isArray(code)) {\\r\\n       goog.asserts.assert(block.outputConnection,\\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\\r\\n  } else if (goog.isString(code)) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    //return code;\\r\\n    return this.myscrub_(block, code);\\r\\n  } else if (code === null) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return '';\\r\\n  } else {\\r\\n    goog.asserts.fail('Invalid code generated: %s', code);\\r\\n  }\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.JavaScript.myscrub_=function(a,b){\\r\\n  var c=\\\"\\\";\\r\\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\\r\\n    var d=a.getCommentText();\\r\\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\\\"/**\\\\n\\\"+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\" * \\\")+\\\" */\\\\n\\\"):c+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\"// \\\"));\\r\\n    for(var e=0;e<a.inputList.length;e++)\\r\\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\\\"// \\\"))\\r\\n  }\\r\\n  return c+b;\\r\\n}\\r\\n\\r\\n\\r\\nBlockly.JavaScript.finish=function(a){\\r\\n  var b=[],c;\\r\\n  for(c in Blockly.JavaScript.definitions_){\\r\\n    if(c === \\\"variables\\\") continue;\\r\\n    b.push(Blockly.JavaScript.definitions_[c]);\\r\\n  }\\r\\n  delete Blockly.JavaScript.definitions_;\\r\\n  delete Blockly.JavaScript.functionNames_;\\r\\n  Blockly.JavaScript.variableDB_.reset();\\r\\n  return b.join(\\\"\\\\n\\\\n\\\")+\\\"\\\\n\\\\n\\\\n\\\"+a};\\r\\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\\\";\\\\n\\\"};\\r\\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\\\\\/g,\\\"\\\\\\\\\\\\\\\\\\\").replace(/\\\\n/g,\\\"\\\\\\\\\\\\n\\\").replace(/'/g,\\\"\\\\\\\\'\\\");\\r\\n  return\\\"'\\\"+a+\\\"'\\\"\\r\\n};\\r\\n\",\"import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\\r\\nimport {Breakpoint_Icon} from './breakpoint.js';\\r\\n\\r\\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n    if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n      return;\\r\\n    }\\r\\n    // Save the current block in a variable for use in closures.\\r\\n    var block = this;\\r\\n    var menuOptions = [];\\r\\n  \\r\\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\\r\\n      if (this.isEditable() && !this.collapsed_ &&\\r\\n          this.workspace.options.comments) {\\r\\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\\r\\n      }\\r\\n  \\r\\n      // Option to make block inline.\\r\\n      if (!this.collapsed_) {\\r\\n        for (var i = 1; i < this.inputList.length; i++) {\\r\\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n            // Only display this option if there are two value or dummy inputs\\r\\n            // next to each other.\\r\\n            var inlineOption = {enabled: true};\\r\\n            var isInline = this.getInputsInline();\\r\\n            inlineOption.text = isInline ?\\r\\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\\r\\n            inlineOption.callback = function() {\\r\\n              block.setInputsInline(!isInline);\\r\\n            };\\r\\n            menuOptions.push(inlineOption);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.collapse) {\\r\\n        // Option to collapse/expand block.\\r\\n        if (this.collapsed_) {\\r\\n          var expandOption = {enabled: true};\\r\\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\\r\\n          expandOption.callback = function() {\\r\\n            block.setCollapsed(false);\\r\\n          };\\r\\n          menuOptions.push(expandOption);\\r\\n        } else {\\r\\n          var collapseOption = {enabled: true};\\r\\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\\r\\n          collapseOption.callback = function() {\\r\\n            block.setCollapsed(true);\\r\\n          };\\r\\n          menuOptions.push(collapseOption);\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.disable) {\\r\\n        // Option to disable/enable block.\\r\\n        var disableOption = {\\r\\n          text: this.disabled ?\\r\\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\\r\\n          enabled: !this.getInheritedDisabled(),\\r\\n          callback: function() {\\r\\n            block.setDisabled(!block.disabled);\\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(disableOption);\\r\\n      }\\r\\n  \\r\\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\\r\\n\\r\\n\\r\\n      // Breakpoints\\r\\n      var breakpointOption = {\\r\\n        text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\\r\\n            var new_br = {\\r\\n              \\\"block_id\\\" : block.id,\\r\\n              \\\"enable\\\" : true,\\r\\n              \\\"icon\\\" :  new Breakpoint_Icon(block)\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(new_br);\\r\\n            block.setCollapsed(false);\\r\\n          }\\r\\n          else{\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.icon.lala();\\r\\n            var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\\r\\n            if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n          }\\r\\n          Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n\\r\\n            // if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) {\\r\\n            //   Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(block.id);\\r\\n            //   block.setCollapsed(false);                                  // expand the block if it is collapted \\r\\n            // } else {\\r\\n            //   var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.indexOf(block.id);\\r\\n            //   if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n            // }\\r\\n            // Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n          }\\r\\n      };\\r\\n      menuOptions.push(breakpointOption);\\r\\n\\r\\n      // Run to cursor\\r\\n      var runToCursorOption = {\\r\\n        text: \\\"Run to cursor\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n        }\\r\\n      };\\r\\n      menuOptions.push(runToCursorOption);\\r\\n\\r\\n\\r\\n      if(Debuggee_Worker.hasInstance()){\\r\\n        var watchOption = {\\r\\n          text:(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\",\\r\\n          enabled: (block.outputConnection==null) ? false : true,\\r\\n          callback: function(){\\r\\n            var name = block.toString();\\r\\n\\r\\n            if(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\\r\\n              var code = Blockly.JavaScript.myBlockToCode(block);\\r\\n              var new_watch = {\\r\\n                \\\"name\\\": name,\\r\\n                \\\"code\\\": code, \\r\\n                \\\"value\\\": undefined\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().push(new_watch);\\r\\n            }else{\\r\\n              var index = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Watch\\\"].handler();  \\r\\n          }\\r\\n        }\\r\\n        menuOptions.push(watchOption);\\r\\n\\r\\n\\r\\n        // Evaluate\\r\\n        var evalOption = {\\r\\n          text: \\\"Evaluate\\\",\\r\\n          enabled: (block.type === \\\"variables_set\\\" || block.type===\\\"math_change\\\") ? true : false,\\r\\n          //enabled: true,\\r\\n          callback: function(){\\r\\n            //console.log(block);\\r\\n            Blockly_Debugger.actions[\\\"Eval\\\"].handler(Blockly.JavaScript.myBlockToCode(block));  \\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(evalOption);   \\r\\n      }\\r\\n\\r\\n\\r\\n      var block___ = {\\r\\n        text: \\\"BLOCK\\\",\\r\\n        enabled: true,    \\r\\n        callback: function(){\\r\\n          new Breakpoint_Icon(block);\\r\\n        }\\r\\n      };\\r\\n      menuOptions.push(block___); \\r\\n\\r\\n    }\\r\\n\\r\\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\\r\\n\\r\\n\\r\\n  \\r\\n    // Allow the block to add or modify menuOptions.\\r\\n    if (this.customContextMenu) {\\r\\n      this.customContextMenu(menuOptions);\\r\\n    }\\r\\n  \\r\\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\\r\\n    Blockly.ContextMenu.currentBlock = this;\\r\\n  };\\r\\n\\r\\n\\r\\n\",\"import '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\naddEventListener(\\\"updateTable\\\",function (){\\r\\n    let variables = Blockly_Debugger.actions[\\\"Variables\\\"].getVariables();\\r\\n    document.getElementById(\\\"variables\\\").innerHTML = '';\\r\\n    for(var i = 0; i<variables.length; ++i){\\r\\n        document.getElementById(\\\"variables\\\").innerHTML += `<tr>\\r\\n                                                            <td>` + variables[i].name + `</td>\\r\\n                                                            <td>` +  variables[i].value + `</td>\\r\\n                                                            <td>` + typeof variables[i].value + `</td>\\r\\n                                                          </tr>`;\\r\\n    }\\r\\n});\\r\\n\\r\\n\\r\\naddEventListener(\\\"updateWatchesTable\\\",function (){\\r\\n    let watches = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches();\\r\\n    document.getElementById(\\\"watches\\\").innerHTML = '';\\r\\n    for(var i = 0; i<watches.length; ++i){\\r\\n        document.getElementById(\\\"watches\\\").innerHTML += `<tr>\\r\\n                                                            <td>` + watches[i].name + `</td>\\r\\n                                                            <td>` + watches[i].code + `</td>\\r\\n                                                            <td>` + watches[i].value + `</td>\\r\\n                                                            <td>` + typeof watches[i].value + `</td>\\r\\n                                                        </tr>`;\\r\\n    }\\r\\n});\",\"import './events.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\nwindow.workspace = {};\\r\\n\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly1\\\"]);\\r\\n\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly2\\\"]);\\r\\n\\r\\n\\t//Blockly_Debugger.actions[\\\"Variables\\\"].init();\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blockly_Debugger.actions[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blockly_Debugger.actions[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blockly_Debugger.actions[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blockly_Debugger.actions[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blockly_Debugger.actions[\\\"Start\\\"].handler;\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\"]}","code":"!function(t){var e={};function a(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,o){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=7)}([,,,function(t,e){throw new Error('Module parse failed: Unexpected token (45:22)\\nYou may need an appropriate loader to handle this file type.\\n| \\r\\n| \\r\\n| Breakpoint_Icon.lala(){\\r\\n|   alert(\"lalallaalala\");\\r\\n| }\\r')},,function(t,e){Blockly.Block.prototype.toString=function(t,e){var a=[],o=e||\"?\";if(this.collapsed_)a.push(this.getInput(\"_TEMP_COLLAPSED_INPUT\").fieldRow[0].text_);else for(var n,l=0;n=this.inputList[l];l++){for(var r,c=0;r=n.fieldRow[c];c++)r instanceof Blockly.FieldDropdown&&!r.getValue()?a.push(o):a.push(r.getText());if(n.connection){var i=n.connection.targetBlock();if(i){var s=i.toString(void 0,e);s=\"(\"+s+\")\",a.push(s)}else a.push(o)}}return a=goog.string.trim(a.join(\" \"))||\"???\",t&&(a=goog.string.truncate(a,t)),a}},function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[o+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=\"RANDOM\"==e?Blockly.JavaScript.ORDER_NONE:Blockly.JavaScript.ORDER_MEMBER,o=Blockly.JavaScript.valueToCode(t,\"VALUE\",a)||\"''\";switch(o=\"(\"+o+\")\",e){case\"FIRST\":return[o+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[o+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return[o+\".charAt(\"+Blockly.JavaScript.getAdjusted(t,\"AT\")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[o+\".slice(\"+Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0)+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"textRandomLetter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+o+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\",a=t.getFieldValue(\"WHERE1\"),o=t.getFieldValue(\"WHERE2\");if(\"FIRST\"==a&&\"LAST\"==o)var n=e;else if(e.match(/^'?\\w+'?$/)||\"FROM_END\"!=a&&\"LAST\"!=a&&\"FROM_END\"!=o&&\"LAST\"!=o){switch(e=\"(\"+e+\")\",a){case\"FROM_START\":var l=Blockly.JavaScript.getAdjusted(t,\"AT1\");break;case\"FROM_END\":l=e+\".length - \"+(l=Blockly.JavaScript.getAdjusted(t,\"AT1\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"FIRST\":l=\"0\";break;default:throw\"Unhandled option (text_getSubstring).\"}switch(o){case\"FROM_START\":var r=Blockly.JavaScript.getAdjusted(t,\"AT2\",1);break;case\"FROM_END\":r=e+\".length - \"+(r=Blockly.JavaScript.getAdjusted(t,\"AT2\",0,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"LAST\":r=e+\".length\";break;default:throw\"Unhandled option (text_getSubstring).\"}n=e+\".slice(\"+l+\", \"+r+\")\"}else{e=\"(\"+e+\")\";l=Blockly.JavaScript.getAdjusted(t,\"AT1\"),r=Blockly.JavaScript.getAdjusted(t,\"AT2\");var c=Blockly.JavaScript.text.getIndex_,i={FIRST:\"First\",LAST:\"Last\",FROM_START:\"FromStart\",FROM_END:\"FromEnd\"};n=Blockly.JavaScript.provideFunction_(\"subsequence\"+i[a]+i[o],[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(sequence\"+(\"FROM_END\"==a||\"FROM_START\"==a?\", at1\":\"\")+(\"FROM_END\"==o||\"FROM_START\"==o?\", at2\":\"\")+\") {\",\"  var start = \"+c(\"sequence\",a,\"at1\")+\";\",\"  var end = \"+c(\"sequence\",o,\"at2\")+\" + 1;\",\"  return sequence.slice(start, end);\",\"}\"])+\"(\"+e+(\"FROM_END\"==a||\"FROM_START\"==a?\", \"+l:\"\")+(\"FROM_END\"==o||\"FROM_START\"==o?\", \"+r:\"\")+\")\"}return[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")],a=e?Blockly.JavaScript.ORDER_MEMBER:Blockly.JavaScript.ORDER_NONE,o=Blockly.JavaScript.valueToCode(t,\"TEXT\",a)||\"''\";if(e)var n=\"(\"+o+\")\"+e;else n=Blockly.JavaScript.provideFunction_(\"textToTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+o+\"))\";return[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext},function(t,e,a){\"use strict\";a.r(e);var o=function(){var t,e={};function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e.alert=(t=>{window.alert(t)}),e.prompt=(t=>{o.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})}),e.highlightBlock=(t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)}),e.execution_finished=(()=>{t=void 0}),t.onmessage=function(t){let a=t.data,o=a.data;e[a.type](o)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),n={actions:{}};n.actions.Continue={},n.actions.Continue.handler=(()=>{o.Instance().postMessage({type:\"continue\"})}),n.actions.StepIn={},n.actions.StepOver={},n.actions.StepParent={},n.actions.StepOut={},n.actions.StepIn.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepIn\"})}),n.actions.StepOver.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepOver\"})}),n.actions.StepParent.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepParent\"})}),n.actions.StepOut.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"stepOut\"})}),n.actions.Stop={},n.actions.Stop.handler=(()=>{o.Stop()}),n.actions.Watch={},n.actions.Variables={},n.actions.Eval={},n.actions.Watch=function(){var t=[];return{handler:function(){dispatchEvent(new Event(\"updateWatchesTable\")),o.hasInstance()&&o.Instance().postMessage({type:\"watch\",data:t})},update:function(e){t=e,console.log(\"Upadated watch Debugger:\"),console.log(t),dispatchEvent(new Event(\"updateWatchesTable\"))},getWatches:function(){return t},init:function(){for(var e=0;e<t.length;++e)t[e].value=void 0}}}(),n.actions.Variables=function(){var t=[];return{update:function(e){t=e,dispatchEvent(new Event(\"updateTable\"))},getVariables:function(){return t},init:function(){var e=[];e[0]=window.workspace.blockly1.getAllVariables().map(t=>t.name),e[1]=window.workspace.blockly2.getAllVariables().map(t=>t.name);for(var a=0;a<e.length;a++)for(var o=t.map(t=>t.name),n=0;n<e[a].length;++n)if(!o.includes(e[a][n])){var l={name:e[a][n],value:void 0};t.push(l)}dispatchEvent(new Event(\"updateTable\"))}}}(),n.actions.Eval.handler=function(t){console.log(t),o.hasInstance()&&o.Instance().postMessage({type:\"eval\",data:t})},o.AddOnDispacher(\"watches\",n.actions.Watch.update),o.AddOnDispacher(\"variables\",n.actions.Variables.update),n.actions.Start={},n.actions.Start.handler=(t=>{if(!o.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),a=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),l=e+a;n.actions.Variables.init(),n.actions.Watch.init(),t instanceof MouseEvent&&(t=\"\"),o.Instance().postMessage({type:\"start_debugging\",data:{code:l,breakpoints:n.actions.Breakpoint.breakpoints,cursorBreakpoint:t,watches:n.actions.Watch.getWatches(),variables:n.actions.Variables.getVariables()}}),console.log(e+a)}}),n.actions.Breakpoint={},n.actions.RunToCursor={},n.actions.Breakpoint.breakpoints=[],n.actions.Breakpoint.handler=(()=>{o.hasInstance()&&o.Instance().postMessage({type:\"breakpoint\",data:n.actions.Breakpoint.breakpoints})}),n.actions.RunToCursor.handler=(t=>{o.hasInstance()?o.Instance().postMessage({type:\"runToCursor\",data:t}):n.actions.Start.handler(t)});var l={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[o+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",o=\"RANDOM\"==a?Blockly.JavaScript.ORDER_COMMA:Blockly.JavaScript.ORDER_MEMBER,n=Blockly.JavaScript.valueToCode(t,\"VALUE\",o)||\"[]\";switch(n=\"(\"+n+\")\",a){case\"FIRST\":if(\"GET\"==e)return[r=n+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=n+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return n+\".shift();\\n\";break;case\"LAST\":if(\"GET\"==e)return[r=n+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=n+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return n+\".pop();\\n\";break;case\"FROM_START\":var l=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"GET\"==e)return[r=n+\"[\"+l+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=n+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return n+\".splice(\"+l+\", 1);\\n\";break;case\"FROM_END\":var r;l=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0);if(\"GET\"==e)return[r=n+\".slice(\"+l+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e)return[r=n+\".splice(\"+l+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return n+\".splice(\"+l+\", 1);\";break;case\"RANDOM\":if(r=Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+n+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[r,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return r+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",o=t.getFieldValue(\"WHERE\")||\"FROM_START\",n=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function l(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}switch(e=\"(\"+e+\")\",o){case\"FIRST\":if(\"SET\"==a)return e+\"[0] = \"+n+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+n+\");\\n\";break;case\"LAST\":if(\"SET\"==a){var r=l();return r+=e+\"[\"+e+\".length - 1] = \"+n+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+n+\");\\n\";break;case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"SET\"==a)return e+\"[\"+c+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+c+\", 0, \"+n+\");\\n\";break;case\"FROM_END\":c=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION),r=l();if(\"SET\"==a)return r+=e+\"[\"+e+\".length - \"+c+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return r+=e+\".splice(\"+e+\".length - \"+c+\", 0, \"+n+\");\\n\";break;case\"RANDOM\":r=l();var i=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\",Blockly.Variables.NAME_TYPE);if(r+=\"var \"+i+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return r+=e+\"[\"+i+\"] = \"+n+\";\\n\";if(\"INSERT\"==a)return r+=e+\".splice(\"+i+\", 0, \"+n+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",o=t.getFieldValue(\"MODE\");if(\"SPLIT\"==o){e||(e=\"''\");var n=\"split\"}else{if(\"JOIN\"!=o)throw\"Unknown mode: \"+o;e||(e=\"[]\");n=\"join\"}return[\"(\"+e+\").\"+n+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_reverse=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").slice().reverse()\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");if(Blockly.JavaScript.STATEMENT_PREFIX){var o=t.id.replace(/\\$/g,\"$$$$\");a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(0, '\"+o+\"', '\"+l.currentSystemEditorId+\"')\"),Blockly.JavaScript.INDENT)+a}Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var n=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";n=n?\"  let $returnValue = \"+n+\";\\n  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return $returnValue;\\n\":\"  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return;\\n\";for(var r=[],c=0;c<t.arguments_.length;c++)r[c]=Blockly.JavaScript.variableDB_.getName(t.arguments_[c],Blockly.Variables.NAME_TYPE);var i=\"async function \"+e+\"(\"+r.join(\", \")+\") {\\n  let global_nest = Blockly_Debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n\"+a+n+\"}\";return i=Blockly.JavaScript.scrub_(t,i),Blockly.JavaScript.definitions_[\"%\"+e]=i,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],o=0;o<t.arguments_.length;o++)a[o]=Blockly.JavaScript.valueToCode(t,\"ARG\"+o,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],o=0;o<t.arguments_.length;o++)a[o]=Blockly.JavaScript.valueToCode(t,\"ARG\"+o,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"};a(6);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++l.nest,o=e.call(t,t);if(l.nest--,goog.isArray(o))return goog.asserts.assert(t.outputConnection,//!! New blockly \n'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX&&(o[0]=\"await $id(eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+l.currentSystemEditorId+\"'), \"+o[0]+\")\"),[this.scrub_(t,o[0]),o[1]];if(goog.isString(o)){t.id.replace(/\\$/g,\"$$$$\");return this.STATEMENT_PREFIX&&(o=this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+l.currentSystemEditorId+\"') \")+o),this.scrub_(t,o)}if(null===o)return\"\";goog.asserts.fail(\"Invalid code generated: %s\",o)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return e=e.replace(/\\$/g,\"$$$$\"),this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+l.nest+\", '\"+e+\"', '\"+l.currentSystemEditorId+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);l.currentSystemEditorId=t.systemEditorId;var o=\"\\n// start source code of another editor\\n\";e.push(o);for(var n,r=0;n=a[r];r++)o=this.blockToCode(n),goog.isArray(o)&&(o=o[0]),o&&(n.outputConnection&&this.scrubNakedValue&&(o=this.scrubNakedValue(o)),e.push(o));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},Blockly.Generator.prototype.myBlockToCode=function(t){if(console.log(\"myBlockToCode\"),!t||t.disabled)return\"\";this.init(t.workspace);var e=this[t.type],a=this.STATEMENT_PREFIX;this.STATEMENT_PREFIX=null,goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var o=e.call(t,t);return goog.isArray(o)?(goog.asserts.assert(t.outputConnection,'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX=a,this.myscrub_(t,o[0])):goog.isString(o)?(this.STATEMENT_PREFIX=a,this.myscrub_(t,o)):null===o?(this.STATEMENT_PREFIX=a,\"\"):void goog.asserts.fail(\"Invalid code generated: %s\",o)},Blockly.JavaScript.myscrub_=function(t,e){var a=\"\";if(!t.outputConnection||!t.outputConnection.targetConnection){var o=t.getCommentText();(o=Blockly.utils.wrap(o,Blockly.JavaScript.COMMENT_WRAP-3))&&(a=t.getProcedureDef?a+\"/**\\n\"+Blockly.JavaScript.prefixLines(o+\"\\n\",\" * \")+\" */\\n\":a+Blockly.JavaScript.prefixLines(o+\"\\n\",\"// \"));for(var n=0;n<t.inputList.length;n++)t.inputList[n].type==Blockly.INPUT_VALUE&&(o=t.inputList[n].connection.targetBlock())&&(o=Blockly.JavaScript.allNestedComments(o))&&(a+=Blockly.JavaScript.prefixLines(o,\"// \"))}return a+e},Blockly.JavaScript.finish=function(t){var e,a=[];for(e in Blockly.JavaScript.definitions_)\"variables\"!==e&&a.push(Blockly.JavaScript.definitions_[e]);return delete Blockly.JavaScript.definitions_,delete Blockly.JavaScript.functionNames_,Blockly.JavaScript.variableDB_.reset(),a.join(\"\\n\\n\")+\"\\n\\n\\n\"+t},Blockly.JavaScript.scrubNakedValue=function(t){return t+\";\\n\"},Blockly.JavaScript.quote_=function(t){return\"'\"+(t=t.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\"))+\"'\"};var r=a(3);Blockly.BlockSvg.prototype.showContextMenu_=function(t){if(!this.workspace.options.readOnly&&this.contextMenu){var e=this,a=[];if(this.isDeletable()&&this.isMovable()&&!e.isInFlyout){if(a.push(Blockly.ContextMenu.blockDuplicateOption(e)),this.isEditable()&&!this.collapsed_&&this.workspace.options.comments&&a.push(Blockly.ContextMenu.blockCommentOption(e)),!this.collapsed_)for(var l=1;l<this.inputList.length;l++)if(this.inputList[l-1].type!=Blockly.NEXT_STATEMENT&&this.inputList[l].type!=Blockly.NEXT_STATEMENT){var c={enabled:!0},i=this.getInputsInline();c.text=i?Blockly.Msg.EXTERNAL_INPUTS:Blockly.Msg.INLINE_INPUTS,c.callback=function(){e.setInputsInline(!i)},a.push(c);break}if(this.workspace.options.collapse)if(this.collapsed_){var s={enabled:!0};s.text=Blockly.Msg.EXPAND_BLOCK,s.callback=function(){e.setCollapsed(!1)},a.push(s)}else{var p={enabled:!0};p.text=Blockly.Msg.COLLAPSE_BLOCK,p.callback=function(){e.setCollapsed(!0)},a.push(p)}if(this.workspace.options.disable){var u={text:this.disabled?Blockly.Msg.ENABLE_BLOCK:Blockly.Msg.DISABLE_BLOCK,enabled:!this.getInheritedDisabled(),callback:function(){e.setDisabled(!e.disabled)}};a.push(u)}a.push(Blockly.ContextMenu.blockDeleteOption(e));var d={text:n.actions.Breakpoint.breakpoints.includes(e.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(n.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)){n.actions.Breakpoint.breakpoints.icon.lala();var t=n.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(e.id);-1!==t&&n.actions.Breakpoint.breakpoints.splice(t,1)}else{var a={block_id:e.id,enable:!0,icon:new r.Breakpoint_Icon(e)};n.actions.Breakpoint.breakpoints.push(a),e.setCollapsed(!1)}n.actions.Breakpoint.handler()}};a.push(d);var v={text:\"Run to cursor\",enabled:!0,callback:function(){n.actions.RunToCursor.handler(e.id)}};if(a.push(v),o.hasInstance()){var k={text:n.actions.Watch.getWatches().map(t=>t.name).includes(e.toString())?\"Remove Watch\":\"Add Watch\",enabled:null!=e.outputConnection,callback:function(){var t=e.toString();if(n.actions.Watch.getWatches().map(t=>t.name).includes(t)){var a=n.actions.Watch.getWatches().map(t=>t.name).indexOf(t);-1!==a&&n.actions.Watch.getWatches().splice(a,1)}else{var o={name:t,code:Blockly.JavaScript.myBlockToCode(e),value:void 0};n.actions.Watch.getWatches().push(o)}n.actions.Watch.handler()}};a.push(k);var E={text:\"Evaluate\",enabled:\"variables_set\"===e.type||\"math_change\"===e.type,callback:function(){n.actions.Eval.handler(Blockly.JavaScript.myBlockToCode(e))}};a.push(E)}var y={text:\"BLOCK\",enabled:!0,callback:function(){new r.Breakpoint_Icon(e)}};a.push(y)}a.push(Blockly.ContextMenu.blockHelpOption(e)),this.customContextMenu&&this.customContextMenu(a),Blockly.ContextMenu.show(t,a,this.RTL),Blockly.ContextMenu.currentBlock=this}};a(5);addEventListener(\"updateTable\",function(){let t=n.actions.Variables.getVariables();document.getElementById(\"variables\").innerHTML=\"\";for(var e=0;e<t.length;++e)document.getElementById(\"variables\").innerHTML+=\"<tr>\\n                                                            <td>\"+t[e].name+\"</td>\\n                                                            <td>\"+t[e].value+\"</td>\\n                                                            <td>\"+typeof t[e].value+\"</td>\\n                                                          </tr>\"}),addEventListener(\"updateWatchesTable\",function(){let t=n.actions.Watch.getWatches();document.getElementById(\"watches\").innerHTML=\"\";for(var e=0;e<t.length;++e)document.getElementById(\"watches\").innerHTML+=\"<tr>\\n                                                            <td>\"+t[e].name+\"</td>\\n                                                            <td>\"+t[e].code+\"</td>\\n                                                            <td>\"+t[e].value+\"</td>\\n                                                            <td>\"+typeof t[e].value+\"</td>\\n                                                        </tr>\"}),window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly1),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly2),document.getElementById(\"ContinueButton\").onclick=n.actions.Continue.handler,document.getElementById(\"StepInButton\").onclick=n.actions.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=n.actions.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=n.actions.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=n.actions.StepOut.handler,document.getElementById(\"StopButton\").onclick=n.actions.Stop.handler,document.getElementById(\"StartButton\").onclick=n.actions.Start.handler}]);","extractedComments":[]}