{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\watches.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\breakpoint.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block_svg.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\events.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block.js\",\"C:\\\\Users\\\\user\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"msg\",\"window\",\"alert\",\"postMessage\",\"type\",\"data\",\"prompt\",\"workspace\",\"CurrentSystemEditorId\",\"traceOn_\",\"highlightBlock\",\"id\",\"document\",\"getElementById\",\"innerHTML\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blockly_Debugger\",\"actions\",\"handler\",\"breakpoints\",\"map\",\"reset_view\",\"block_id\",\"variables\",\"update\",\"new_vars\",\"length\",\"change\",\"dispatchEvent\",\"Event\",\"getVariables\",\"init\",\"workspace_vars\",\"getAllVariables\",\"variable\",\"variables_names\",\"j\",\"includes\",\"nvar\",\"push\",\"menuOption\",\"block\",\"text\",\"getWatches\",\"toString\",\"enabled\",\"outputConnection\",\"index\",\"indexOf\",\"splice\",\"new_watch\",\"code\",\"Blockly\",\"JavaScript\",\"myBlockToCode\",\"watches\",\"new_watches\",\"expr\",\"cursorBreakpoint\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"MouseEvent\",\"enable\",\"console\",\"log\",\"wait_view\",\"getBlockById\",\"setCollapsed\",\"parentBlock_\",\"style\",\"stroke\",\"fill\",\"disable\",\"icon\",\"myDisable\",\"new_br\",\"Breakpoint_Icon\",\"disableMenuOption\",\"generation\",\"nest\",\"currentSystemEditorId\",\"valueToCode\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"item\",\"ORDER_NONE\",\"options\",\"oneBasedIndex\",\"ORDER_ADDITION\",\"ORDER_FUNCTION_CALL\",\"mode\",\"where\",\"listOrder\",\"ORDER_COMMA\",\"list\",\"at\",\"getAdjusted\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"ORDER_SUBTRACTION\",\"xVar\",\"input\",\"delimiter\",\"functionName\",\"direction\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"replace\",\"prefixLines\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"arguments_\",\"join\",\"scrub_\",\"definitions_\",\"x\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"this\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"assert\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"scrubNakedValue\",\"finish\",\"stmt_Prefix\",\"myscrub_\",\"a\",\"b\",\"targetConnection\",\"getCommentText\",\"utils\",\"wrap\",\"COMMENT_WRAP\",\"getProcedureDef\",\"e\",\"inputList\",\"INPUT_VALUE\",\"connection\",\"targetBlock\",\"allNestedComments\",\"functionNames_\",\"reset\",\"quote_\",\"breakpoint_Breakpoint_Icon\",\"Icon\",\"createIcon\",\"create\",\"width_\",\"height_\",\"drawIcon_\",\"group\",\"createSvgElement\",\"class\",\"block_\",\"cx\",\"cy\",\"setVisible\",\"visible\",\"isEnable\",\"dom\",\"removeNode\",\"iconGroup_\",\"createElementNS\",\"SVG_NS\",\"setAttribute\",\"body\",\"runtimeStyle\",\"currentStyle\",\"appendChild\",\"BlockSvg\",\"showContextMenu_\",\"readOnly\",\"contextMenu\",\"menuOptions\",\"isDeletable\",\"isMovable\",\"isInFlyout\",\"ContextMenu\",\"blockDuplicateOption\",\"isEditable\",\"collapsed_\",\"comments\",\"blockCommentOption\",\"NEXT_STATEMENT\",\"inlineOption\",\"isInline\",\"getInputsInline\",\"Msg\",\"setInputsInline\",\"collapse\",\"expandOption\",\"collapseOption\",\"disableOption\",\"getInheritedDisabled\",\"setDisabled\",\"blockDeleteOption\",\"breakpointOption\",\"DisableBreakpointOption\",\"runToCursorOption\",\"watchOption\",\"evalOption\",\"block___\",\"blockHelpOption\",\"customContextMenu\",\"show\",\"RTL\",\"currentBlock\",\"addEventListener\",\"red_style\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\",\"onclick\",\"Block\",\"opt_maxLength\",\"opt_emptyToken\",\"emptyFieldPlaceholder\",\"getInput\",\"fieldRow\",\"text_\",\"field\",\"FieldDropdown\",\"getValue\",\"getText\",\"child\",\"child_text\",\"string\",\"trim\",\"truncate\",\"argument0\",\"textOrder\",\"where1\",\"where2\",\"at1\",\"at2\",\"getIndex_\",\"wherePascalCase\",\"FIRST\",\"LAST\",\"FROM_START\",\"FROM_END\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 3);\\n\",\"export var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher = {};\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\");\\t // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher[\\\"alert\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"alert\\\",\\\"data\\\": \\\"\\\"});\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"prompt\\\"] = (msg) => {\\r\\n\\t\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\tdispatcher[\\\"highlightBlock\\\"] = (data) => {\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t}; \\t\\t\\t\\t\\t\\t\\r\\n\\t\\tdispatcher[\\\"execution_finished\\\"] = () => {\\r\\n\\t\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t\\t\\tdocument.getElementById(\\\"val_table\\\").innerHTML = '';\\r\\n\\t\\t\\t\\t};\\t\\t\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blockly_Debugger = {};\\r\\nBlockly_Debugger.actions = {};\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"] = {}; \\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blockly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n    document.getElementById(\\\"val_table\\\").innerHTML = '';\\r\\n    Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{Blockly_Debugger.actions[\\\"Breakpoint\\\"].reset_view(obj.block_id)}); \\r\\n    // remove hilighting \\r\\n    window.workspace[\\\"blockly1\\\"].traceOn_ = true;\\r\\n    window.workspace[\\\"blockly1\\\"].highlightBlock(\\\"\\\");\\r\\n    window.workspace[\\\"blockly2\\\"].traceOn_ = true;\\r\\n    window.workspace[\\\"blockly2\\\"].highlightBlock(\\\"\\\");\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"] = {};\\r\\n\\r\\n// Variables\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Variables\\\"] = (function(){\\r\\n    var variables = [];\\r\\n\\r\\n    function handler() {};     \\r\\n\\r\\n    function update(new_vars){\\r\\n        for(var i= 0; i < variables.length; ++i){\\r\\n            if(variables[i].value !== new_vars[i].value){\\r\\n                variables[i].value = new_vars[i].value;\\r\\n                variables[i].change = true;\\r\\n            }else{\\r\\n                variables[i].change = false;\\r\\n            }\\r\\n\\r\\n        }\\r\\n        //variables = new_vars;\\r\\n        dispatchEvent(new Event(\\\"updateTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getVariables(){\\r\\n        return variables;\\r\\n    };\\r\\n\\r\\n    function init(){\\r\\n        var workspace_vars = [];\\r\\n        workspace_vars[0] = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n        workspace_vars[1] = window.workspace[\\\"blockly2\\\"].getAllVariables().map((variable) => {\\r\\n            return variable.name;\\r\\n        });\\r\\n\\r\\n        for(var i = 0; i<workspace_vars.length; i++){\\r\\n            var variables_names =  variables.map((variable) => {\\r\\n                return variable.name;\\r\\n            });   \\r\\n            for(var j = 0; j<workspace_vars[i].length; ++j){\\r\\n                if(variables_names.includes(workspace_vars[i][j])) continue;\\r\\n                var nvar = {\\r\\n                    \\\"name\\\" : workspace_vars[i][j],\\r\\n                    \\\"value\\\" : undefined,\\r\\n                    \\\"change\\\": false\\r\\n                }\\r\\n                variables.push(nvar);\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n\\r\\n    function menuOption(block){\\r\\n        var watchOption = {\\r\\n            text:(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\",\\r\\n            enabled: (block.outputConnection==null) ? false : true,\\r\\n            callback: function(){\\r\\n              var name = block.toString();\\r\\n  \\r\\n              if(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\\r\\n                var code = Blockly.JavaScript.myBlockToCode(block);\\r\\n                var new_watch = {\\r\\n                  \\\"name\\\": name,\\r\\n                  \\\"code\\\": code, \\r\\n                  \\\"value\\\": undefined\\r\\n                }\\r\\n                Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().push(new_watch);\\r\\n              }else{\\r\\n                var index = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\\r\\n                if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().splice(index, 1);\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Watch\\\"].handler();  \\r\\n            }\\r\\n          };\\r\\n          return watchOption;\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        update : update,\\r\\n        getVariables : getVariables,\\r\\n        init : init,  \\r\\n        menuOption : menuOption     \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\n\\r\\n// Watches\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = (function(){\\r\\n    var watches = [];\\r\\n    \\r\\n    function handler(){\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n        if(!Debuggee_Worker.hasInstance()) return; \\r\\n        Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"watch\\\", \\\"data\\\": watches});\\r\\n    }\\r\\n\\r\\n    function update(new_watches){\\r\\n        for(var i= 0; i < watches.length; ++i){\\r\\n            if(watches[i].value !== new_watches[i].value){\\r\\n                watches[i].value = new_watches[i].value;\\r\\n                watches[i].change = true;\\r\\n            }else{\\r\\n                watches[i].change = false;\\r\\n            }\\r\\n\\r\\n        }\\r\\n        //watches = new_watches;\\r\\n        dispatchEvent(new Event(\\\"updateWatchesTable\\\"));\\r\\n    };\\r\\n    \\r\\n    function getWatches(){\\r\\n        return watches;\\r\\n    }\\r\\n\\r\\n    function init(){\\r\\n        for(var i=0; i<watches.length; ++i){\\r\\n            watches[i].value = undefined;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        handler : handler,\\r\\n        update : update,\\r\\n        getWatches : getWatches,\\r\\n        init : init       \\r\\n    }\\r\\n})();\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// Eval \\r\\n\\r\\nBlockly_Debugger.actions[\\\"Eval\\\"].handler = function (expr){\\r\\n    if(!Debuggee_Worker.hasInstance()) return;\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"eval\\\", \\\"data\\\": expr});\\r\\n}\\r\\n\\r\\n\\r\\nDebuggee_Worker.AddOnDispacher(\\\"watches\\\", Blockly_Debugger.actions[\\\"Watch\\\"].update);\\r\\nDebuggee_Worker.AddOnDispacher(\\\"variables\\\", Blockly_Debugger.actions[\\\"Variables\\\"].update);\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\nimport './watches.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"].handler = (cursorBreakpoint) => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    \\r\\n    Blockly_Debugger.actions[\\\"Variables\\\"].init();\\r\\n    Blockly_Debugger.actions[\\\"Watch\\\"].init();\\r\\n\\r\\n    document.getElementById(\\\"val_table\\\").innerHTML = `  <div class=\\\"watch\\\">\\r\\n                                                            <div class=\\\"title\\\">&nbsp;Variables  \\r\\n                                                            <!--i class=\\\"fa fa-bars\\\"></i-->\\r\\n                                                            </div>\\r\\n                                                            <div class=\\\"watch-content\\\">\\r\\n                                                            <table style=\\\"width:100%\\\">\\r\\n                                                            <tr>\\r\\n                                                                <th>Name</th>\\r\\n                                                                <th>Value</th> \\r\\n                                                                <th>Type</th>\\r\\n                                                            </tr>     \\r\\n\\r\\n                                                            </table>\\r\\n                                                            <table id=\\\"variables\\\" style=\\\"width:100%\\\"></table>\\r\\n                                                        </div>\\r\\n                                                        </div>\\r\\n\\r\\n                                                        <div class=\\\"watch\\\">\\r\\n                                                            <div class=\\\"title\\\">&nbsp;Watches</div>\\r\\n                                                            <div class=\\\"watch-content\\\">\\r\\n                                                            <table style=\\\"width:100%\\\">\\r\\n                                                            <tr>\\r\\n                                                                <th>Name</th>\\r\\n                                                                <th>Code</th> \\r\\n                                                                <th>Value</th>\\r\\n                                                                <th>Type</th>\\r\\n                                                            </tr>     \\r\\n                                                            </table>\\r\\n                                                            <table id=\\\"watches\\\" style=\\\"width:100%\\\"></table>\\r\\n                                                        </div>\\r\\n                                                        </div>`;\\r\\n\\r\\n    \\r\\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \\\"\\\";\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return { \\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                                      \\\"enable\\\" : obj.enable}}),\\r\\n                                                                               \\\"cursorBreakpoint\\\": cursorBreakpoint,\\r\\n                                                                               \\\"watches\\\": Blockly_Debugger.actions[\\\"Watch\\\"].getWatches(),\\r\\n                                                                               \\\"variables\\\": Blockly_Debugger.actions[\\\"Variables\\\"].getVariables()\\r\\n                                                                            }});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"] = {};\\r\\n\\r\\n\\r\\n// Breakpoints\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].wait_view = (block_id) => {\\r\\n    var CurrentSystemEditorId = window.workspace[\\\"blockly1\\\"].getBlockById(block_id) ? \\\"blockly1\\\" : \\\"blockly2\\\";\\r\\n    var block = window.workspace[CurrentSystemEditorId].getBlockById(block_id);\\r\\n    while(block!=null){\\r\\n        block.setCollapsed(false);\\r\\n        block = block.parentBlock_;\\r\\n    }\\r\\n    window.workspace[CurrentSystemEditorId].traceOn_ = true;                // hilighting (gt den kanei an einai collapsed)\\r\\n    window.workspace[CurrentSystemEditorId].highlightBlock(block_id);\\r\\n    \\r\\n    document.getElementById(block_id).style.stroke = 'red';\\r\\n    document.getElementById(block_id).style.fill = 'yellow';\\r\\n    document.getElementById(block_id).style['stroke-width'] = '5px';\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].reset_view = (block_id) =>{\\r\\n    document.getElementById(block_id).style.stroke = 'yellow';\\r\\n    document.getElementById(block_id).style.fill = 'red';\\r\\n    document.getElementById(block_id).style['stroke-width'] = '1px';\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].disable = (block_id) =>{\\r\\n    var i = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\\r\\n    if(i!=-1){\\r\\n        document.getElementById(block_id).style.stroke = 'yellow';\\r\\n        document.getElementById(block_id).style.fill = '#FA8258';\\r\\n        document.getElementById(block_id).style['stroke-width'] = '1px';\\r\\n        Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints[i].enable = false;\\r\\n        if(Debuggee_Worker.hasInstance()) \\r\\n            Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].enable = (block_id) =>{\\r\\n    var i = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block_id);\\r\\n    if(i!=-1){\\r\\n        document.getElementById(block_id).style.fill = 'red';\\r\\n        Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints[i].enable = true;\\r\\n        if(Debuggee_Worker.hasInstance()) \\r\\n            Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return {\\\"block_id\\\" : obj.block_id,\\r\\n                                                                                                                                                \\\"enable\\\" : obj.enable}}),});\\r\\n    }\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].menuOption = (block) => {\\r\\n    var breakpointOption = {\\r\\n        text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n            if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\\r\\n              var new_br = {\\r\\n                \\\"block_id\\\" : block.id,\\r\\n                \\\"enable\\\" : true,\\r\\n                \\\"icon\\\" : new Breakpoint_Icon(block),\\r\\n                \\\"change\\\": false\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(new_br);\\r\\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\\r\\n            }\\r\\n            else{\\r\\n              var icon = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\\r\\n              icon[0].myDisable();\\r\\n              var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n          }\\r\\n      };\\r\\n      return breakpointOption;\\r\\n}\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].disableMenuOption = (block) => {\\r\\n    var DisableBreakpointOption = {\\r\\n        text: (Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \\\"Disable Breakpoint\\\" : \\\"Enable Breakpoint\\\",\\r\\n        enabled: (Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? true : false,\\r\\n        callback: function() {\\r\\n          if(Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].disable(block.id);\\r\\n          else\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].enable(block.id);\\r\\n        }\\r\\n      };\\r\\n      return DisableBreakpointOption;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// Run to Cursor\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].handler = (block_id) => {\\r\\n    if(!Debuggee_Worker.hasInstance()) {\\r\\n        Blockly_Debugger.actions[\\\"Start\\\"].handler(block_id);\\r\\n        return;\\r\\n    }; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"runToCursor\\\", \\\"data\\\": block_id});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].menuOption = (block) =>{\\r\\n    var runToCursorOption = {\\r\\n        text: \\\"Run to cursor\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n        }\\r\\n    };\\r\\n    return runToCursorOption;\\r\\n}\\r\\n\\r\\n\\r\\nDebuggee_Worker.AddOnDispacher(\\\"breakpoint_wait_view\\\", Blockly_Debugger.actions[\\\"Breakpoint\\\"].wait_view);\\r\\nDebuggee_Worker.AddOnDispacher(\\\"breakpoint_reset_view\\\", Blockly_Debugger.actions[\\\"Breakpoint\\\"].reset_view);\\r\\n\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    // old blockly\\r\\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \\r\\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\\r\\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n  // Get element at index.\\r\\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n  var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\\r\\n      Blockly.JavaScript.ORDER_MEMBER;\\r\\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\\r\\n  list = '(' + list + ')';\\r\\n  switch (where) {\\r\\n    case ('FIRST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('LAST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_START'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_END'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);';\\r\\n      }\\r\\n      break;\\r\\n    case ('RANDOM'):\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'listsGetRandomItem',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n           '  var x = Math.floor(Math.random() * list.length);',\\r\\n           '  if (remove) {',\\r\\n           '    return list.splice(x, 1)[0];',\\r\\n           '  } else {',\\r\\n           '    return list[x];',\\r\\n           '  }',\\r\\n           '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n  throw 'Unhandled combination (lists_getIndex).';\\r\\n};\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n\\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmpList', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    switch (where) {\\r\\n      case ('FIRST'):\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[0] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.unshift(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('LAST'):\\r\\n        if (mode == 'SET') {\\r\\n          var code = cacheList();\\r\\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.push(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_START'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_END'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\\r\\n            Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n        var code = cacheList();\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n              ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n      case ('RANDOM'):\\r\\n        var code = cacheList();\\r\\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            'tmpX', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n            '.length);\\\\n';\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!input) {\\r\\n        input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!input) {\\r\\n        input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_reverse'] = function(block) {\\r\\n    // Block for reversing a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var code = '(' + list + ')' + '.slice().reverse()';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['lists_sort'] = function(block) {\\r\\n    // Block for sorting a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\\r\\n    var type = block.getFieldValue('TYPE');\\r\\n    var getCompareFunctionName = Blockly.JavaScript.provideFunction_(\\r\\n        'listsGetSortCompare',\\r\\n        ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n            '(type, direction) {',\\r\\n         '  var compareFuncs = {',\\r\\n         '    \\\"NUMERIC\\\": function(a, b) {',\\r\\n         '        return parseFloat(a) - parseFloat(b); },',\\r\\n         '    \\\"TEXT\\\": function(a, b) {',\\r\\n         '        return a.toString() > b.toString() ? 1 : -1; },',\\r\\n         '    \\\"IGNORE_CASE\\\": function(a, b) {',\\r\\n         '        return a.toString().toLowerCase() > ' +\\r\\n            'b.toString().toLowerCase() ? 1 : -1; },',\\r\\n         '  };',\\r\\n         '  var compare = compareFuncs[type];',\\r\\n         '  return function(a, b) { return compare(a, b) * direction; }',\\r\\n         '}']);\\r\\n    return ['(' + list + ')' + '.slice().sort(' +\\r\\n        getCompareFunctionName + '(\\\"' + type + '\\\", ' + direction + '))',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.\\r\\n        branch = Blockly.JavaScript.prefixLines(\\r\\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + \\\"0\\\" + ', \\\\'' + id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\')'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n\\r\\n    if(returnValue)\\r\\n        returnValue = '  return Blockly_Debuggee.function_return_decorator(' + returnValue + ', caller_nest);\\\\n';\\r\\n    else\\r\\n        returnValue = '  return Blockly_Debuggee.function_return_decorator( \\\\'\\\\', caller_nest);\\\\n';\\r\\n\\r\\n    var args = [];\\r\\n    for (var i = 0; i < block.arguments_.length; i++) {\\r\\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n                '  let caller_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n                branch +    \\r\\n                returnValue + '}';\\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    // Add % so as not to collide with helper functions in definitions list.\\r\\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return Blockly_Debuggee.function_return_decorator(' + value + ', caller_nest);\\\\n';\\r\\n  } else {\\r\\n    code += '  return Blockly_Debuggee.function_return_decorator(\\\\'\\\\', caller_nest);\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      goog.asserts.assert(block.outputConnection,               //!! New blockly \\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n      if (this.STATEMENT_PREFIX) \\r\\n        code[0] = 'await $id(eval(update_values()), await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), ' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! New blockly \\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\') ') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  id = id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'eval(update_values()), await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\')'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\\r\\n\\r\\n\\r\\n // den einai kalh idea pou to exw balei sto Blockly.Generator.prototype gt einai diko m\\r\\n Blockly.Generator.prototype.myBlockToCode = function(block) {\\r\\n  if (!block || block.disabled) {\\r\\n    return '';\\r\\n  }\\r\\n  this.init(block.workspace);           //  added \\r\\n  var func = this[block.type];\\r\\n  var stmt_Prefix = this.STATEMENT_PREFIX;\\r\\n  this.STATEMENT_PREFIX = null;\\r\\n  goog.asserts.assertFunction(func,\\r\\n      'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n      this.name_, block.type);\\r\\n   var code = func.call(block, block);\\r\\n  if (goog.isArray(code)) {\\r\\n       goog.asserts.assert(block.outputConnection,\\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return this.myscrub_(block, code[0]);     // gia na ta kanei ola return san text\\r\\n  } else if (goog.isString(code)) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    //return code;\\r\\n    return this.myscrub_(block, code);\\r\\n  } else if (code === null) {\\r\\n    this.STATEMENT_PREFIX = stmt_Prefix;\\r\\n    return '';\\r\\n  } else {\\r\\n    goog.asserts.fail('Invalid code generated: %s', code);\\r\\n  }\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.JavaScript.myscrub_=function(a,b){\\r\\n  var c=\\\"\\\";\\r\\n  if(!a.outputConnection||!a.outputConnection.targetConnection){\\r\\n    var d=a.getCommentText();\\r\\n    (d=Blockly.utils.wrap(d,Blockly.JavaScript.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+(\\\"/**\\\\n\\\"+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\" * \\\")+\\\" */\\\\n\\\"):c+Blockly.JavaScript.prefixLines(d+\\\"\\\\n\\\",\\\"// \\\"));\\r\\n    for(var e=0;e<a.inputList.length;e++)\\r\\n      a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.JavaScript.allNestedComments(d))&&(c+=Blockly.JavaScript.prefixLines(d,\\\"// \\\"))\\r\\n  }\\r\\n  return c+b;\\r\\n}\\r\\n\\r\\n\\r\\nBlockly.JavaScript.finish=function(a){\\r\\n  var b=[],c;\\r\\n  for(c in Blockly.JavaScript.definitions_){\\r\\n    if(c === \\\"variables\\\") continue;\\r\\n    b.push(Blockly.JavaScript.definitions_[c]);\\r\\n  }\\r\\n  delete Blockly.JavaScript.definitions_;\\r\\n  delete Blockly.JavaScript.functionNames_;\\r\\n  Blockly.JavaScript.variableDB_.reset();\\r\\n  return b.join(\\\"\\\\n\\\\n\\\")+\\\"\\\\n\\\\n\\\\n\\\"+a};\\r\\n  Blockly.JavaScript.scrubNakedValue=function(a){return a+\\\";\\\\n\\\"};\\r\\n  Blockly.JavaScript.quote_=function(a){a=a.replace(/\\\\\\\\/g,\\\"\\\\\\\\\\\\\\\\\\\").replace(/\\\\n/g,\\\"\\\\\\\\\\\\n\\\").replace(/'/g,\\\"\\\\\\\\'\\\");\\r\\n  return\\\"'\\\"+a+\\\"'\\\"\\r\\n};\\r\\n\",\"import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\\r\\n\\r\\n\\r\\nexport var Breakpoint_Icon = function(block) {\\r\\n    Blockly.Icon.call(this, block);\\r\\n    this.createIcon();\\r\\n  };\\r\\n\\r\\n  Breakpoint_Icon.prototype = Object.create(Blockly.Icon.prototype);\\r\\n  Breakpoint_Icon.prototype.width_ = 160;\\r\\n  Breakpoint_Icon.prototype.height_ = 80;\\r\\n\\r\\n  Breakpoint_Icon.prototype.drawIcon_ = function(group) {\\r\\n    Blockly.utils.createSvgElement('circle',\\r\\n        {'class': 'breakpoint_enable', 'id' : this.block_.id, 'r': '6', 'cx': '8', 'cy': '8'},\\r\\n        group); \\r\\n        \\r\\n  }\\r\\n\\r\\n\\r\\n  Breakpoint_Icon.prototype.setVisible = function (visible){\\r\\n    var isEnable = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.block_id==this.block_.id) return obj.enable;});\\r\\n    console.log(isEnable);\\r\\n    if(isEnable[0]){\\r\\n      Blockly_Debugger.actions[\\\"Breakpoint\\\"].disable(this.block_.id);\\r\\n    }else {\\r\\n      this.myDisable();\\r\\n      var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(this.block_.id);\\r\\n      if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n    }\\r\\n}\\r\\n  \\r\\nBreakpoint_Icon.prototype.myDisable = function (){\\r\\n  goog.dom.removeNode(this.iconGroup_);  \\r\\n  this.iconGroup_=null;\\r\\n}\\r\\n\\r\\n\\r\\n// ---------------------------------------------------------------------     \\r\\n\\r\\nBlockly.utils.createSvgElement=function(a,b,c){\\r\\n  a=document.createElementNS(Blockly.SVG_NS,a);\\r\\n  for(var d in b)a.setAttribute(d,b[d]);\\r\\n  document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);\\r\\n  c&&c.appendChild(a);\\r\\n  return a;\\r\\n}\\r\\n\",\"import {Blockly_Debugger, Debuggee_Worker} from '../../../debugger/debugger.js';\\r\\nimport {Breakpoint_Icon} from './breakpoint.js';\\r\\n\\r\\nBlockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n    if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n      return;\\r\\n    }\\r\\n    // Save the current block in a variable for use in closures.\\r\\n    var block = this;\\r\\n    var menuOptions = [];\\r\\n  \\r\\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\\r\\n      if (this.isEditable() && !this.collapsed_ &&\\r\\n          this.workspace.options.comments) {\\r\\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\\r\\n      }\\r\\n  \\r\\n      // Option to make block inline.\\r\\n      if (!this.collapsed_) {\\r\\n        for (var i = 1; i < this.inputList.length; i++) {\\r\\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n            // Only display this option if there are two value or dummy inputs\\r\\n            // next to each other.\\r\\n            var inlineOption = {enabled: true};\\r\\n            var isInline = this.getInputsInline();\\r\\n            inlineOption.text = isInline ?\\r\\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\\r\\n            inlineOption.callback = function() {\\r\\n              block.setInputsInline(!isInline);\\r\\n            };\\r\\n            menuOptions.push(inlineOption);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.collapse) {\\r\\n        // Option to collapse/expand block.\\r\\n        if (this.collapsed_) {\\r\\n          var expandOption = {enabled: true};\\r\\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\\r\\n          expandOption.callback = function() {\\r\\n            block.setCollapsed(false);\\r\\n          };\\r\\n          menuOptions.push(expandOption);\\r\\n        } else {\\r\\n          var collapseOption = {enabled: true};\\r\\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\\r\\n          collapseOption.callback = function() {\\r\\n            block.setCollapsed(true);\\r\\n          };\\r\\n          menuOptions.push(collapseOption);\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.disable) {\\r\\n        // Option to disable/enable block.\\r\\n        var disableOption = {\\r\\n          text: this.disabled ?\\r\\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\\r\\n          enabled: !this.getInheritedDisabled(),\\r\\n          callback: function() {\\r\\n            block.setDisabled(!block.disabled);\\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(disableOption);\\r\\n      }\\r\\n  \\r\\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\\r\\n\\r\\n\\r\\n      // Breakpoints\\r\\n      var breakpointOption = {\\r\\n        text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n            if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)){\\r\\n              var new_br = {\\r\\n                \\\"block_id\\\" : block.id,\\r\\n                \\\"enable\\\" : true,\\r\\n                \\\"icon\\\" : new Breakpoint_Icon(block),\\r\\n                \\\"change\\\": false\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(new_br);\\r\\n              block.setCollapsed(false);                        // gia na anoigei otan exw breakpoint\\r\\n            }\\r\\n            else{\\r\\n              var icon = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.block_id === block.id) return obj.icon});\\r\\n              icon[0].myDisable();\\r\\n              var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).indexOf(block.id);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n          }\\r\\n      };\\r\\n      menuOptions.push(breakpointOption);\\r\\n\\r\\n      var DisableBreakpointOption = {\\r\\n        text: (Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id)) ? \\\"Disable Breakpoint\\\" : \\\"Enable Breakpoint\\\",\\r\\n        enabled: (Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{return obj.block_id;}).includes(block.id)) ? true : false,\\r\\n        callback: function() {\\r\\n          if(Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block.id))\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].disable(block.id);\\r\\n          else\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].enable(block.id);\\r\\n        }\\r\\n      }\\r\\n      menuOptions.push(DisableBreakpointOption);\\r\\n\\r\\n      // Run to cursor\\r\\n      var runToCursorOption = {\\r\\n        text: \\\"Run to cursor\\\",\\r\\n        enabled: true,\\r\\n        callback: function() {\\r\\n          Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n        }\\r\\n      };\\r\\n      menuOptions.push(runToCursorOption);\\r\\n\\r\\n\\r\\n      if(Debuggee_Worker.hasInstance()){\\r\\n        var watchOption = {\\r\\n          text:(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(block.toString())) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\",\\r\\n          enabled: (block.outputConnection==null) ? false : true,\\r\\n          callback: function(){\\r\\n            var name = block.toString();\\r\\n\\r\\n            if(!Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).includes(name)){\\r\\n              var code = Blockly.JavaScript.myBlockToCode(block);\\r\\n              var new_watch = {\\r\\n                \\\"name\\\": name,\\r\\n                \\\"code\\\": code, \\r\\n                \\\"value\\\": undefined\\r\\n              }\\r\\n              Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().push(new_watch);\\r\\n            }else{\\r\\n              var index = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().map((obj)=>{return obj.name;}).indexOf(name);\\r\\n              if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].getWatches().splice(index, 1);\\r\\n            }\\r\\n            Blockly_Debugger.actions[\\\"Watch\\\"].handler();  \\r\\n          }\\r\\n        }\\r\\n        menuOptions.push(watchOption);\\r\\n\\r\\n\\r\\n        // Evaluate\\r\\n        var evalOption = {\\r\\n          text: \\\"Evaluate\\\",\\r\\n          enabled: (block.type === \\\"variables_set\\\" || block.type===\\\"math_change\\\") ? true : false,\\r\\n          callback: function(){\\r\\n            Blockly_Debugger.actions[\\\"Eval\\\"].handler(Blockly.JavaScript.myBlockToCode(block));  \\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(evalOption);   \\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n    var block___ = {\\r\\n      text: \\\"block___\\\",\\r\\n      enabled:true,\\r\\n      callback: function(){\\r\\n       console.log(block);\\r\\n      }\\r\\n    };\\r\\n    menuOptions.push(block___); \\r\\n\\r\\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\\r\\n\\r\\n\\r\\n  \\r\\n    // Allow the block to add or modify menuOptions.\\r\\n    if (this.customContextMenu) {\\r\\n      this.customContextMenu(menuOptions);\\r\\n    }\\r\\n  \\r\\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);    \\r\\n    Blockly.ContextMenu.currentBlock = this;\\r\\n  };\\r\\n\\r\\n\\r\\n\",\"import '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\naddEventListener(\\\"updateTable\\\",function (){\\r\\n    let variables = Blockly_Debugger.actions[\\\"Variables\\\"].getVariables();\\r\\n    document.getElementById(\\\"variables\\\").innerHTML = '';\\r\\n    for(var i = 0; i<variables.length; ++i){\\r\\n        var red_style = ``;\\r\\n        if(variables[i].change === true) red_style = `style=\\\\\\\"color:red;\\\\\\\"`;\\r\\n        document.getElementById(\\\"variables\\\").innerHTML += `<tr>\\r\\n                                                            <td ` + red_style + `>` + variables[i].name + `</td>\\r\\n                                                            <td ` + red_style + `>` +  variables[i].value + `</td>\\r\\n                                                            <td ` + red_style + `>` + typeof variables[i].value + `</td>\\r\\n                                                          </tr>`;\\r\\n    }\\r\\n});\\r\\n\\r\\n\\r\\naddEventListener(\\\"updateWatchesTable\\\",function (){\\r\\n    let watches = Blockly_Debugger.actions[\\\"Watch\\\"].getWatches();\\r\\n    document.getElementById(\\\"watches\\\").innerHTML = '';\\r\\n    for(var i = 0; i<watches.length; ++i){\\r\\n        var red_style = ``;\\r\\n        if(watches[i].change === true) red_style = `style=\\\\\\\"color:red;\\\\\\\"`;\\r\\n        document.getElementById(\\\"watches\\\").innerHTML += `<tr>\\r\\n                                                            <td ` + red_style + `>` + watches[i].name + `</td>\\r\\n                                                            <td ` + red_style + `>` + watches[i].code + `</td>\\r\\n                                                            <td ` + red_style + `>` + watches[i].value + `</td>\\r\\n                                                            <td ` + red_style + `>` + typeof watches[i].value + `</td>\\r\\n                                                        </tr>`;\\r\\n    }\\r\\n});\",\"import './events.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js'; \\r\\n\\r\\nwindow.workspace = {};\\r\\n\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly1\\\"]);\\r\\n\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly2\\\"]);\\r\\n\\r\\n\\t//Blockly_Debugger.actions[\\\"Variables\\\"].init();\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blockly_Debugger.actions[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blockly_Debugger.actions[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blockly_Debugger.actions[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blockly_Debugger.actions[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blockly_Debugger.actions[\\\"Start\\\"].handler;\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\\r\\n\\r\\n\\r\\n// if (document.addEventListener) { // IE >= 9; other browsers\\r\\n//     document.getElementById(\\\"val_table\\\").addEventListener('contextmenu', function(e) {\\r\\n//         alert(\\\"You've tried to open context menu\\\"); //here you draw your own menu\\r\\n//         e.preventDefault();\\r\\n//     }, false);\\r\\n// } else { // IE < 9\\r\\n//     document.getElementById(\\\"val_table\\\").attachEvent('oncontextmenu', function() {\\r\\n//         alert(\\\"You've tried to open context menu\\\");\\r\\n//         window.event.returnValue = false;\\r\\n//     });\\r\\n// }\\r\\n\\r\\n// let menuVisible = false;\\r\\n\\r\\n// const toggleMenu = command => {\\r\\n//     var menu = document.getElementById(\\\"menu\\\");\\r\\n//     menu.style.display = command === \\\"show\\\" ? \\\"block\\\" : \\\"none\\\";\\r\\n//     menuVisible = !menuVisible;\\r\\n//   };\\r\\n  \\r\\n//   const setPosition = (top, left) => {\\r\\n//     var menu = document.getElementById(\\\"menu\\\");\\r\\n//     menu.style.left = left + 'px';//`${left}px`;\\r\\n//     menu.style.top = top + 'px';//`${top}px`;\\r\\n//     toggleMenu('show');\\r\\n//   };\\r\\n  \\r\\n//   window.addEventListener(\\\"click\\\", e => {\\r\\n//     if(menuVisible)toggleMenu(\\\"hide\\\");\\r\\n//   });\\r\\n  \\r\\n//   document.getElementById(\\\"val_table\\\").addEventListener(\\\"contextmenu\\\", e => {\\r\\n//     e.preventDefault();\\r\\n//     const origin = {\\r\\n//       left: e.pageX,\\r\\n//       top: e.pageY\\r\\n//     };\\r\\n//     setPosition( e.pageY, e.pageX);\\r\\n//     return false;\\r\\n//   });\",\"\\r\\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\\r\\n    var text = [];\\r\\n    var emptyFieldPlaceholder = opt_emptyToken || '?';\\r\\n    if (this.collapsed_) {\\r\\n      text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);\\r\\n    } else {\\r\\n      for (var i = 0, input; input = this.inputList[i]; i++) {\\r\\n        for (var j = 0, field; field = input.fieldRow[j]; j++) {\\r\\n          if (field instanceof Blockly.FieldDropdown && !field.getValue()) {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          } else {\\r\\n            text.push(field.getText());\\r\\n          }\\r\\n        }\\r\\n        if (input.connection) {\\r\\n          var child = input.connection.targetBlock();\\r\\n          if (child) {\\r\\n              var child_text = child.toString(undefined, opt_emptyToken);\\r\\n              child_text = \\\"(\\\" + child_text + \\\")\\\";                    // add ()\\r\\n            text.push(child_text);\\r\\n          } else {\\r\\n            text.push(emptyFieldPlaceholder);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    text = goog.string.trim(text.join(' ')) || '???';\\r\\n    if (opt_maxLength) {\\r\\n      // TODO: Improve truncation so that text from this block is given priority.\\r\\n      // E.g. \\\"1+2+3+4+5+6+7+8+9=0\\\" should be \\\"...6+7+8+9=0\\\", not \\\"1+2+3+4+5...\\\".\\r\\n      // E.g. \\\"1+2+3+4+5=6+7+8+9+0\\\" should be \\\"...4+5=6+7...\\\".\\r\\n      text = goog.string.truncate(text, opt_maxLength);\\r\\n    }\\r\\n    return text;\\r\\n  };\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\\r\\n        Blockly.JavaScript.ORDER_MEMBER;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        // Adjust index if using one-based indices.\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n        var code = text + '.slice(' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'textRandomLetter',\\r\\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n             '  var x = Math.floor(Math.random() * text.length);',\\r\\n             '  return text[x];',\\r\\n             '}']);\\r\\n        var code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else if (text.match(/^'?\\\\w+'?$/) ||\\r\\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\\r\\n        where2 != 'FROM_END' && where2 != 'LAST')) {\\r\\n      // If the text is a variable or literal or doesn't require a call for\\r\\n      // length, don't generate a helper function.\\r\\n      text = '(' + text + ')';\\r\\n      switch (where1) {\\r\\n        case 'FROM_START':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at1 = text + '.length - ' + at1;\\r\\n          break;\\r\\n        case 'FIRST':\\r\\n          var at1 = '0';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      switch (where2) {\\r\\n        case 'FROM_START':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at2 = text + '.length - ' + at2;\\r\\n          break;\\r\\n        case 'LAST':\\r\\n          var at2 = text + '.length';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\\r\\n    } else {\\r\\n      text = '(' + text + ')';\\r\\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\\r\\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\\r\\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\\r\\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n          '(sequence' +\\r\\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\\r\\n          // we add it as a parameter.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\\r\\n          ') {',\\r\\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\\r\\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\\r\\n            '  return sequence.slice(start, end);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text +\\r\\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\\r\\n          // pass it.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\\r\\n          ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\\r\\n        Blockly.JavaScript.ORDER_NONE;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var code = '(' + text + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'textToTitleCase',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(str) {',\\r\\n           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n              'txt.substring(1).toLowerCase();});',\\r\\n           '}']);\\r\\n      var code = functionName + '(' + '(' + text + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_print'] = function(block) {\\r\\n    // Print statement.\\r\\n    var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    return 'await window.alert(' + msg + ');\\\\n';\\r\\n  };\"]}","code":"!function(t){var e={};function a(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=t,a.c=e,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=3)}([,,,function(t,e,a){\"use strict\";a.r(e);var n=function(){var t,e={};function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e.alert=(t=>{window.alert(t),n.Instance().postMessage({type:\"alert\",data:\"\"})}),e.prompt=(t=>{n.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})}),e.highlightBlock=(t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)}),e.execution_finished=(()=>{t=void 0,document.getElementById(\"val_table\").innerHTML=\"\"}),t.onmessage=function(t){let a=t.data,n=a.data;e[a.type](n)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),o={actions:{}};o.actions.Continue={},o.actions.Continue.handler=(()=>{n.Instance().postMessage({type:\"continue\"})}),o.actions.StepIn={},o.actions.StepOver={},o.actions.StepParent={},o.actions.StepOut={},o.actions.StepIn.handler=(()=>{n.hasInstance()&&n.Instance().postMessage({type:\"stepIn\"})}),o.actions.StepOver.handler=(()=>{n.hasInstance()&&n.Instance().postMessage({type:\"stepOver\"})}),o.actions.StepParent.handler=(()=>{n.hasInstance()&&n.Instance().postMessage({type:\"stepParent\"})}),o.actions.StepOut.handler=(()=>{n.hasInstance()&&n.Instance().postMessage({type:\"stepOut\"})}),o.actions.Stop={},o.actions.Stop.handler=(()=>{n.Stop(),document.getElementById(\"val_table\").innerHTML=\"\",o.actions.Breakpoint.breakpoints.map(t=>{o.actions.Breakpoint.reset_view(t.block_id)}),window.workspace.blockly1.traceOn_=!0,window.workspace.blockly1.highlightBlock(\"\"),window.workspace.blockly2.traceOn_=!0,window.workspace.blockly2.highlightBlock(\"\")}),o.actions.Variables={},o.actions.Watch={},o.actions.Eval={},o.actions.Variables=function(){var t=[];return{update:function(e){for(var a=0;a<t.length;++a)t[a].value!==e[a].value?(t[a].value=e[a].value,t[a].change=!0):t[a].change=!1;dispatchEvent(new Event(\"updateTable\"))},getVariables:function(){return t},init:function(){var e=[];e[0]=window.workspace.blockly1.getAllVariables().map(t=>t.name),e[1]=window.workspace.blockly2.getAllVariables().map(t=>t.name);for(var a=0;a<e.length;a++)for(var n=t.map(t=>t.name),o=0;o<e[a].length;++o)if(!n.includes(e[a][o])){var i={name:e[a][o],value:void 0,change:!1};t.push(i)}},menuOption:function(t){return{text:o.actions.Watch.getWatches().map(t=>t.name).includes(t.toString())?\"Remove Watch\":\"Add Watch\",enabled:null!=t.outputConnection,callback:function(){var e=t.toString();if(o.actions.Watch.getWatches().map(t=>t.name).includes(e)){var a=o.actions.Watch.getWatches().map(t=>t.name).indexOf(e);-1!==a&&o.actions.Watch.getWatches().splice(a,1)}else{var n={name:e,code:Blockly.JavaScript.myBlockToCode(t),value:void 0};o.actions.Watch.getWatches().push(n)}o.actions.Watch.handler()}}}}}(),o.actions.Watch=function(){var t=[];return{handler:function(){dispatchEvent(new Event(\"updateWatchesTable\")),n.hasInstance()&&n.Instance().postMessage({type:\"watch\",data:t})},update:function(e){for(var a=0;a<t.length;++a)t[a].value!==e[a].value?(t[a].value=e[a].value,t[a].change=!0):t[a].change=!1;dispatchEvent(new Event(\"updateWatchesTable\"))},getWatches:function(){return t},init:function(){for(var e=0;e<t.length;++e)t[e].value=void 0}}}(),o.actions.Eval.handler=function(t){n.hasInstance()&&n.Instance().postMessage({type:\"eval\",data:t})},n.AddOnDispacher(\"watches\",o.actions.Watch.update),n.AddOnDispacher(\"variables\",o.actions.Variables.update),o.actions.Start={},o.actions.Start.handler=(t=>{if(!n.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";var e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),a=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),i=e+a;o.actions.Variables.init(),o.actions.Watch.init(),document.getElementById(\"val_table\").innerHTML='  <div class=\"watch\">\\n                                                            <div class=\"title\">&nbsp;Variables  \\n                                                            \\x3c!--i class=\"fa fa-bars\"></i--\\x3e\\n                                                            </div>\\n                                                            <div class=\"watch-content\">\\n                                                            <table style=\"width:100%\">\\n                                                            <tr>\\n                                                                <th>Name</th>\\n                                                                <th>Value</th> \\n                                                                <th>Type</th>\\n                                                            </tr>     \\n\\n                                                            </table>\\n                                                            <table id=\"variables\" style=\"width:100%\"></table>\\n                                                        </div>\\n                                                        </div>\\n\\n                                                        <div class=\"watch\">\\n                                                            <div class=\"title\">&nbsp;Watches</div>\\n                                                            <div class=\"watch-content\">\\n                                                            <table style=\"width:100%\">\\n                                                            <tr>\\n                                                                <th>Name</th>\\n                                                                <th>Code</th> \\n                                                                <th>Value</th>\\n                                                                <th>Type</th>\\n                                                            </tr>     \\n                                                            </table>\\n                                                            <table id=\"watches\" style=\"width:100%\"></table>\\n                                                        </div>\\n                                                        </div>',t instanceof MouseEvent&&(t=\"\"),n.Instance().postMessage({type:\"start_debugging\",data:{code:i,breakpoints:o.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable})),cursorBreakpoint:t,watches:o.actions.Watch.getWatches(),variables:o.actions.Variables.getVariables()}}),console.log(e+a)}}),o.actions.Breakpoint={},o.actions.RunToCursor={},o.actions.Breakpoint.breakpoints=[],o.actions.Breakpoint.handler=(()=>{n.hasInstance()&&n.Instance().postMessage({type:\"breakpoint\",data:o.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))})}),o.actions.Breakpoint.wait_view=(t=>{for(var e=window.workspace.blockly1.getBlockById(t)?\"blockly1\":\"blockly2\",a=window.workspace[e].getBlockById(t);null!=a;)a.setCollapsed(!1),a=a.parentBlock_;window.workspace[e].traceOn_=!0,window.workspace[e].highlightBlock(t),document.getElementById(t).style.stroke=\"red\",document.getElementById(t).style.fill=\"yellow\",document.getElementById(t).style[\"stroke-width\"]=\"5px\"}),o.actions.Breakpoint.reset_view=(t=>{document.getElementById(t).style.stroke=\"yellow\",document.getElementById(t).style.fill=\"red\",document.getElementById(t).style[\"stroke-width\"]=\"1px\"}),o.actions.Breakpoint.disable=(t=>{var e=o.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(t);-1!=e&&(document.getElementById(t).style.stroke=\"yellow\",document.getElementById(t).style.fill=\"#FA8258\",document.getElementById(t).style[\"stroke-width\"]=\"1px\",o.actions.Breakpoint.breakpoints[e].enable=!1,n.hasInstance()&&n.Instance().postMessage({type:\"breakpoint\",data:o.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))}))}),o.actions.Breakpoint.enable=(t=>{var e=o.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(t);-1!=e&&(document.getElementById(t).style.fill=\"red\",o.actions.Breakpoint.breakpoints[e].enable=!0,n.hasInstance()&&n.Instance().postMessage({type:\"breakpoint\",data:o.actions.Breakpoint.breakpoints.map(t=>({block_id:t.block_id,enable:t.enable}))}))}),o.actions.Breakpoint.menuOption=(t=>{return{text:o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(t.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(t.id)){o.actions.Breakpoint.breakpoints.map(e=>{if(e.block_id===t.id)return e.icon})[0].myDisable();var e=o.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(t.id);-1!==e&&o.actions.Breakpoint.breakpoints.splice(e,1)}else{var a={block_id:t.id,enable:!0,icon:new Breakpoint_Icon(t),change:!1};o.actions.Breakpoint.breakpoints.push(a),t.setCollapsed(!1)}o.actions.Breakpoint.handler()}}}),o.actions.Breakpoint.disableMenuOption=(t=>{return{text:o.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(t.id)?\"Disable Breakpoint\":\"Enable Breakpoint\",enabled:!!o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(t.id),callback:function(){o.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(t.id)?o.actions.Breakpoint.disable(t.id):o.actions.Breakpoint.enable(t.id)}}}),o.actions.RunToCursor.handler=(t=>{n.hasInstance()?n.Instance().postMessage({type:\"runToCursor\",data:t}):o.actions.Start.handler(t)}),o.actions.RunToCursor.menuOption=(t=>{return{text:\"Run to cursor\",enabled:!0,callback:function(){o.actions.RunToCursor.handler(t.id)}}}),n.AddOnDispacher(\"breakpoint_wait_view\",o.actions.Breakpoint.wait_view),n.AddOnDispacher(\"breakpoint_reset_view\",o.actions.Breakpoint.reset_view);var i={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",n=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[n+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",n=\"RANDOM\"==a?Blockly.JavaScript.ORDER_COMMA:Blockly.JavaScript.ORDER_MEMBER,o=Blockly.JavaScript.valueToCode(t,\"VALUE\",n)||\"[]\";switch(o=\"(\"+o+\")\",a){case\"FIRST\":if(\"GET\"==e)return[l=o+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[l=o+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return o+\".shift();\\n\";break;case\"LAST\":if(\"GET\"==e)return[l=o+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[l=o+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return o+\".pop();\\n\";break;case\"FROM_START\":var i=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"GET\"==e)return[l=o+\"[\"+i+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[l=o+\".splice(\"+i+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\".splice(\"+i+\", 1);\\n\";break;case\"FROM_END\":var l;i=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0);if(\"GET\"==e)return[l=o+\".slice(\"+i+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e)return[l=o+\".splice(\"+i+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\".splice(\"+i+\", 1);\";break;case\"RANDOM\":if(l=Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+o+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[l,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return l+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",n=t.getFieldValue(\"WHERE\")||\"FROM_START\",o=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function i(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}switch(e=\"(\"+e+\")\",n){case\"FIRST\":if(\"SET\"==a)return e+\"[0] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+o+\");\\n\";break;case\"LAST\":if(\"SET\"==a){var l=i();return l+=e+\"[\"+e+\".length - 1] = \"+o+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+o+\");\\n\";break;case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"SET\"==a)return e+\"[\"+c+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+c+\", 0, \"+o+\");\\n\";break;case\"FROM_END\":c=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION),l=i();if(\"SET\"==a)return l+=e+\"[\"+e+\".length - \"+c+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return l+=e+\".splice(\"+e+\".length - \"+c+\", 0, \"+o+\");\\n\";break;case\"RANDOM\":l=i();var r=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\",Blockly.Variables.NAME_TYPE);if(l+=\"var \"+r+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return l+=e+\"[\"+r+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return l+=e+\".splice(\"+r+\", 0, \"+o+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",n=t.getFieldValue(\"MODE\");if(\"SPLIT\"==n){e||(e=\"''\");var o=\"split\"}else{if(\"JOIN\"!=n)throw\"Unknown mode: \"+n;e||(e=\"[]\");o=\"join\"}return[\"(\"+e+\").\"+o+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_reverse=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").slice().reverse()\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_sort=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\",a=\"1\"===t.getFieldValue(\"DIRECTION\")?1:-1,n=t.getFieldValue(\"TYPE\");return[\"(\"+e+\").slice().sort(\"+Blockly.JavaScript.provideFunction_(\"listsGetSortCompare\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(type, direction) {\",\"  var compareFuncs = {\",'    \"NUMERIC\": function(a, b) {',\"        return parseFloat(a) - parseFloat(b); },\",'    \"TEXT\": function(a, b) {',\"        return a.toString() > b.toString() ? 1 : -1; },\",'    \"IGNORE_CASE\": function(a, b) {',\"        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },\",\"  };\",\"  var compare = compareFuncs[type];\",\"  return function(a, b) { return compare(a, b) * direction; }\",\"}\"])+'(\"'+n+'\", '+a+\"))\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");if(Blockly.JavaScript.STATEMENT_PREFIX){var n=t.id.replace(/\\$/g,\"$$$$\");a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(0, '\"+n+\"', '\"+i.currentSystemEditorId+\"')\"),Blockly.JavaScript.INDENT)+a}Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var o=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";o=o?\"  return Blockly_Debuggee.function_return_decorator(\"+o+\", caller_nest);\\n\":\"  return Blockly_Debuggee.function_return_decorator( '', caller_nest);\\n\";for(var l=[],c=0;c<t.arguments_.length;c++)l[c]=Blockly.JavaScript.variableDB_.getName(t.arguments_[c],Blockly.Variables.NAME_TYPE);var r=\"async function \"+e+\"(\"+l.join(\", \")+\") {\\n  let caller_nest = Blockly_Debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n\"+a+o+\"}\";return r=Blockly.JavaScript.scrub_(t,r),Blockly.JavaScript.definitions_[\"%\"+e]=r,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],n=0;n<t.arguments_.length;n++)a[n]=Blockly.JavaScript.valueToCode(t,\"ARG\"+n,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],n=0;n<t.arguments_.length;n++)a[n]=Blockly.JavaScript.valueToCode(t,\"ARG\"+n,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n\";t.hasReturnValue_?e+=\"  return Blockly_Debuggee.function_return_decorator(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\", caller_nest);\\n\":e+=\"  return Blockly_Debuggee.function_return_decorator('', caller_nest);\\n\";return e+=\"}\\n\"};a(6);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++i.nest,n=e.call(t,t);if(i.nest--,goog.isArray(n))return goog.asserts.assert(t.outputConnection,//!! New blockly \n'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX&&(n[0]=\"await $id(eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+i.currentSystemEditorId+\"'), \"+n[0]+\")\"),[this.scrub_(t,n[0]),n[1]];if(goog.isString(n)){t.id.replace(/\\$/g,\"$$$$\");return this.STATEMENT_PREFIX&&(n=this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+a+\", '\"+t.id+\"', '\"+i.currentSystemEditorId+\"') \")+n),this.scrub_(t,n)}if(null===n)return\"\";goog.asserts.fail(\"Invalid code generated: %s\",n)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return e=e.replace(/\\$/g,\"$$$$\"),this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"eval(update_values()), await wait(\"+i.nest+\", '\"+e+\"', '\"+i.currentSystemEditorId+\"')\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);i.currentSystemEditorId=t.systemEditorId;var n=\"\\n// start source code of another editor\\n\";e.push(n);for(var o,l=0;o=a[l];l++)n=this.blockToCode(o),goog.isArray(n)&&(n=n[0]),n&&(o.outputConnection&&this.scrubNakedValue&&(n=this.scrubNakedValue(n)),e.push(n));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},Blockly.Generator.prototype.myBlockToCode=function(t){if(!t||t.disabled)return\"\";this.init(t.workspace);var e=this[t.type],a=this.STATEMENT_PREFIX;this.STATEMENT_PREFIX=null,goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var n=e.call(t,t);return goog.isArray(n)?(goog.asserts.assert(t.outputConnection,'Expecting string from statement block \"%s\".',t.type),this.STATEMENT_PREFIX=a,this.myscrub_(t,n[0])):goog.isString(n)?(this.STATEMENT_PREFIX=a,this.myscrub_(t,n)):null===n?(this.STATEMENT_PREFIX=a,\"\"):void goog.asserts.fail(\"Invalid code generated: %s\",n)},Blockly.JavaScript.myscrub_=function(t,e){var a=\"\";if(!t.outputConnection||!t.outputConnection.targetConnection){var n=t.getCommentText();(n=Blockly.utils.wrap(n,Blockly.JavaScript.COMMENT_WRAP-3))&&(a=t.getProcedureDef?a+\"/**\\n\"+Blockly.JavaScript.prefixLines(n+\"\\n\",\" * \")+\" */\\n\":a+Blockly.JavaScript.prefixLines(n+\"\\n\",\"// \"));for(var o=0;o<t.inputList.length;o++)t.inputList[o].type==Blockly.INPUT_VALUE&&(n=t.inputList[o].connection.targetBlock())&&(n=Blockly.JavaScript.allNestedComments(n))&&(a+=Blockly.JavaScript.prefixLines(n,\"// \"))}return a+e},Blockly.JavaScript.finish=function(t){var e,a=[];for(e in Blockly.JavaScript.definitions_)\"variables\"!==e&&a.push(Blockly.JavaScript.definitions_[e]);return delete Blockly.JavaScript.definitions_,delete Blockly.JavaScript.functionNames_,Blockly.JavaScript.variableDB_.reset(),a.join(\"\\n\\n\")+\"\\n\\n\\n\"+t},Blockly.JavaScript.scrubNakedValue=function(t){return t+\";\\n\"},Blockly.JavaScript.quote_=function(t){return\"'\"+(t=t.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\").replace(/'/g,\"\\\\'\"))+\"'\"};var l=function(t){Blockly.Icon.call(this,t),this.createIcon()};(l.prototype=Object.create(Blockly.Icon.prototype)).width_=160,l.prototype.height_=80,l.prototype.drawIcon_=function(t){Blockly.utils.createSvgElement(\"circle\",{class:\"breakpoint_enable\",id:this.block_.id,r:\"6\",cx:\"8\",cy:\"8\"},t)},l.prototype.setVisible=function(t){var e=o.actions.Breakpoint.breakpoints.map(t=>{if(t.block_id==this.block_.id)return t.enable});if(console.log(e),e[0])o.actions.Breakpoint.disable(this.block_.id);else{this.myDisable();var a=o.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(this.block_.id);-1!==a&&o.actions.Breakpoint.breakpoints.splice(a,1)}},l.prototype.myDisable=function(){goog.dom.removeNode(this.iconGroup_),this.iconGroup_=null},Blockly.utils.createSvgElement=function(t,e,a){for(var n in t=document.createElementNS(Blockly.SVG_NS,t),e)t.setAttribute(n,e[n]);return document.body.runtimeStyle&&(t.runtimeStyle=t.currentStyle=t.style),a&&a.appendChild(t),t},Blockly.BlockSvg.prototype.showContextMenu_=function(t){if(!this.workspace.options.readOnly&&this.contextMenu){var e=this,a=[];if(this.isDeletable()&&this.isMovable()&&!e.isInFlyout){if(a.push(Blockly.ContextMenu.blockDuplicateOption(e)),this.isEditable()&&!this.collapsed_&&this.workspace.options.comments&&a.push(Blockly.ContextMenu.blockCommentOption(e)),!this.collapsed_)for(var i=1;i<this.inputList.length;i++)if(this.inputList[i-1].type!=Blockly.NEXT_STATEMENT&&this.inputList[i].type!=Blockly.NEXT_STATEMENT){var c={enabled:!0},r=this.getInputsInline();c.text=r?Blockly.Msg.EXTERNAL_INPUTS:Blockly.Msg.INLINE_INPUTS,c.callback=function(){e.setInputsInline(!r)},a.push(c);break}if(this.workspace.options.collapse)if(this.collapsed_){var s={enabled:!0};s.text=Blockly.Msg.EXPAND_BLOCK,s.callback=function(){e.setCollapsed(!1)},a.push(s)}else{var p={enabled:!0};p.text=Blockly.Msg.COLLAPSE_BLOCK,p.callback=function(){e.setCollapsed(!0)},a.push(p)}if(this.workspace.options.disable){var u={text:this.disabled?Blockly.Msg.ENABLE_BLOCK:Blockly.Msg.DISABLE_BLOCK,enabled:!this.getInheritedDisabled(),callback:function(){e.setDisabled(!e.disabled)}};a.push(u)}a.push(Blockly.ContextMenu.blockDeleteOption(e));var d={text:o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id)){o.actions.Breakpoint.breakpoints.map(t=>{if(t.block_id===e.id)return t.icon})[0].myDisable();var t=o.actions.Breakpoint.breakpoints.map(t=>t.block_id).indexOf(e.id);-1!==t&&o.actions.Breakpoint.breakpoints.splice(t,1)}else{var a={block_id:e.id,enable:!0,icon:new l(e),change:!1};o.actions.Breakpoint.breakpoints.push(a),e.setCollapsed(!1)}o.actions.Breakpoint.handler()}};a.push(d);var k={text:o.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(e.id)?\"Disable Breakpoint\":\"Enable Breakpoint\",enabled:!!o.actions.Breakpoint.breakpoints.map(t=>t.block_id).includes(e.id),callback:function(){o.actions.Breakpoint.breakpoints.map(t=>{if(t.enable)return t.block_id}).includes(e.id)?o.actions.Breakpoint.disable(e.id):o.actions.Breakpoint.enable(e.id)}};a.push(k);var v={text:\"Run to cursor\",enabled:!0,callback:function(){o.actions.RunToCursor.handler(e.id)}};if(a.push(v),n.hasInstance()){var y={text:o.actions.Watch.getWatches().map(t=>t.name).includes(e.toString())?\"Remove Watch\":\"Add Watch\",enabled:null!=e.outputConnection,callback:function(){var t=e.toString();if(o.actions.Watch.getWatches().map(t=>t.name).includes(t)){var a=o.actions.Watch.getWatches().map(t=>t.name).indexOf(t);-1!==a&&o.actions.Watch.getWatches().splice(a,1)}else{var n={name:t,code:Blockly.JavaScript.myBlockToCode(e),value:void 0};o.actions.Watch.getWatches().push(n)}o.actions.Watch.handler()}};a.push(y);var B={text:\"Evaluate\",enabled:\"variables_set\"===e.type||\"math_change\"===e.type,callback:function(){o.actions.Eval.handler(Blockly.JavaScript.myBlockToCode(e))}};a.push(B)}}var E={text:\"block___\",enabled:!0,callback:function(){console.log(e)}};a.push(E),a.push(Blockly.ContextMenu.blockHelpOption(e)),this.customContextMenu&&this.customContextMenu(a),Blockly.ContextMenu.show(t,a,this.RTL),Blockly.ContextMenu.currentBlock=this}};a(5);addEventListener(\"updateTable\",function(){let t=o.actions.Variables.getVariables();document.getElementById(\"variables\").innerHTML=\"\";for(var e=0;e<t.length;++e){var a=\"\";!0===t[e].change&&(a='style=\"color:red;\"'),document.getElementById(\"variables\").innerHTML+=\"<tr>\\n                                                            <td \"+a+\">\"+t[e].name+\"</td>\\n                                                            <td \"+a+\">\"+t[e].value+\"</td>\\n                                                            <td \"+a+\">\"+typeof t[e].value+\"</td>\\n                                                          </tr>\"}}),addEventListener(\"updateWatchesTable\",function(){let t=o.actions.Watch.getWatches();document.getElementById(\"watches\").innerHTML=\"\";for(var e=0;e<t.length;++e){var a=\"\";!0===t[e].change&&(a='style=\"color:red;\"'),document.getElementById(\"watches\").innerHTML+=\"<tr>\\n                                                            <td \"+a+\">\"+t[e].name+\"</td>\\n                                                            <td \"+a+\">\"+t[e].code+\"</td>\\n                                                            <td \"+a+\">\"+t[e].value+\"</td>\\n                                                            <td \"+a+\">\"+typeof t[e].value+\"</td>\\n                                                        </tr>\"}}),window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly1),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly2),document.getElementById(\"ContinueButton\").onclick=o.actions.Continue.handler,document.getElementById(\"StepInButton\").onclick=o.actions.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=o.actions.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=o.actions.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=o.actions.StepOut.handler,document.getElementById(\"StopButton\").onclick=o.actions.Stop.handler,document.getElementById(\"StartButton\").onclick=o.actions.Start.handler},,function(t,e){Blockly.Block.prototype.toString=function(t,e){var a=[],n=e||\"?\";if(this.collapsed_)a.push(this.getInput(\"_TEMP_COLLAPSED_INPUT\").fieldRow[0].text_);else for(var o,i=0;o=this.inputList[i];i++){for(var l,c=0;l=o.fieldRow[c];c++)l instanceof Blockly.FieldDropdown&&!l.getValue()?a.push(n):a.push(l.getText());if(o.connection){var r=o.connection.targetBlock();if(r){var s=r.toString(void 0,e);s=\"(\"+s+\")\",a.push(s)}else a.push(n)}}return a=goog.string.trim(a.join(\" \"))||\"???\",t&&(a=goog.string.truncate(a,t)),a}},function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",n=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[n+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[n,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=\"RANDOM\"==e?Blockly.JavaScript.ORDER_NONE:Blockly.JavaScript.ORDER_MEMBER,n=Blockly.JavaScript.valueToCode(t,\"VALUE\",a)||\"''\";switch(n=\"(\"+n+\")\",e){case\"FIRST\":return[n+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[n+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return[n+\".charAt(\"+Blockly.JavaScript.getAdjusted(t,\"AT\")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[n+\".slice(\"+Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0)+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"textRandomLetter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+n+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\",a=t.getFieldValue(\"WHERE1\"),n=t.getFieldValue(\"WHERE2\");if(\"FIRST\"==a&&\"LAST\"==n)var o=e;else if(e.match(/^'?\\w+'?$/)||\"FROM_END\"!=a&&\"LAST\"!=a&&\"FROM_END\"!=n&&\"LAST\"!=n){switch(e=\"(\"+e+\")\",a){case\"FROM_START\":var i=Blockly.JavaScript.getAdjusted(t,\"AT1\");break;case\"FROM_END\":i=e+\".length - \"+(i=Blockly.JavaScript.getAdjusted(t,\"AT1\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"FIRST\":i=\"0\";break;default:throw\"Unhandled option (text_getSubstring).\"}switch(n){case\"FROM_START\":var l=Blockly.JavaScript.getAdjusted(t,\"AT2\",1);break;case\"FROM_END\":l=e+\".length - \"+(l=Blockly.JavaScript.getAdjusted(t,\"AT2\",0,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"LAST\":l=e+\".length\";break;default:throw\"Unhandled option (text_getSubstring).\"}o=e+\".slice(\"+i+\", \"+l+\")\"}else{e=\"(\"+e+\")\";i=Blockly.JavaScript.getAdjusted(t,\"AT1\"),l=Blockly.JavaScript.getAdjusted(t,\"AT2\");var c=Blockly.JavaScript.text.getIndex_,r={FIRST:\"First\",LAST:\"Last\",FROM_START:\"FromStart\",FROM_END:\"FromEnd\"};o=Blockly.JavaScript.provideFunction_(\"subsequence\"+r[a]+r[n],[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(sequence\"+(\"FROM_END\"==a||\"FROM_START\"==a?\", at1\":\"\")+(\"FROM_END\"==n||\"FROM_START\"==n?\", at2\":\"\")+\") {\",\"  var start = \"+c(\"sequence\",a,\"at1\")+\";\",\"  var end = \"+c(\"sequence\",n,\"at2\")+\" + 1;\",\"  return sequence.slice(start, end);\",\"}\"])+\"(\"+e+(\"FROM_END\"==a||\"FROM_START\"==a?\", \"+i:\"\")+(\"FROM_END\"==n||\"FROM_START\"==n?\", \"+l:\"\")+\")\"}return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")],a=e?Blockly.JavaScript.ORDER_MEMBER:Blockly.JavaScript.ORDER_NONE,n=Blockly.JavaScript.valueToCode(t,\"TEXT\",a)||\"''\";if(e)var o=\"(\"+n+\")\"+e;else o=Blockly.JavaScript.provideFunction_(\"textToTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+n+\"))\";return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext,Blockly.JavaScript.text_print=function(t){return\"await window.alert(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\")+\");\\n\"}}]);","extractedComments":[]}