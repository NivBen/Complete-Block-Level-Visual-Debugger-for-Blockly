{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\continue.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\step.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\stop.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\start.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\breakpoints.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\debugger\\\\actions\\\\watches.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\blockly_init.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\lists.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\procedures.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\generator.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\core\\\\block_svg.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\index.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\generator\\\\blockly\\\\generator\\\\text.js\",\"C:\\\\Users\\\\Krystallia Savvaki\\\\Desktop\\\\blockly_debugger\\\\dummy_IDE\\\\init_blockly.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Debuggee_Worker\",\"instance\",\"dispatcher\",\"hasInstance\",\"undefined\",\"Instance\",\"Worker\",\"alert\",\"msg\",\"window\",\"prompt\",\"postMessage\",\"type\",\"data\",\"highlightBlock\",\"workspace\",\"CurrentSystemEditorId\",\"traceOn_\",\"id\",\"execution_finished\",\"onmessage\",\"obj\",\"Stop\",\"terminate\",\"AddOnDispacher\",\"event\",\"callback\",\"Blockly_Debugger\",\"actions\",\"handler\",\"cursorBreakpoint\",\"Blockly\",\"JavaScript\",\"STATEMENT_PREFIX\",\"code1\",\"workspaceToCode\",\"code2\",\"code\",\"variables1\",\"getAllVariables\",\"map\",\"variable\",\"variables2\",\"variables\",\"length\",\"nvar\",\"push\",\"variables_names\",\"includes\",\"MouseEvent\",\"breakpoints\",\"watches\",\"console\",\"log\",\"block_id\",\"generation\",\"nest\",\"currentSystemEditorId\",\"block\",\"valueToCode\",\"ORDER_MEMBER\",\"ORDER_LOGICAL_NOT\",\"operator\",\"getFieldValue\",\"item\",\"ORDER_NONE\",\"options\",\"oneBasedIndex\",\"ORDER_ADDITION\",\"ORDER_FUNCTION_CALL\",\"mode\",\"where\",\"listOrder\",\"ORDER_COMMA\",\"list\",\"at\",\"getAdjusted\",\"provideFunction_\",\"FUNCTION_NAME_PLACEHOLDER_\",\"ORDER_ASSIGNMENT\",\"cacheList\",\"match\",\"listVar\",\"variableDB_\",\"getDistinctName\",\"Variables\",\"NAME_TYPE\",\"ORDER_SUBTRACTION\",\"xVar\",\"input\",\"delimiter\",\"functionName\",\"funcName\",\"getName\",\"Procedures\",\"branch\",\"statementToCode\",\"replace\",\"prefixLines\",\"INDENT\",\"INFINITE_LOOP_TRAP\",\"returnValue\",\"args\",\"arguments_\",\"join\",\"scrub_\",\"definitions_\",\"x\",\"hasReturnValue_\",\"Generator\",\"blockToCode\",\"disabled\",\"this\",\"getNextBlock\",\"func\",\"goog\",\"asserts\",\"assertFunction\",\"name_\",\"my_nest\",\"isArray\",\"assert\",\"outputConnection\",\"isString\",\"fail\",\"addLoopTrap\",\"warn\",\"getMainWorkspace\",\"init\",\"blocks\",\"getTopBlocks\",\"systemEditorId\",\"line\",\"scrubNakedValue\",\"finish\",\"BlockSvg\",\"showContextMenu_\",\"e\",\"readOnly\",\"contextMenu\",\"menuOptions\",\"isDeletable\",\"isMovable\",\"isInFlyout\",\"ContextMenu\",\"blockDuplicateOption\",\"isEditable\",\"collapsed_\",\"comments\",\"blockCommentOption\",\"inputList\",\"NEXT_STATEMENT\",\"inlineOption\",\"enabled\",\"isInline\",\"getInputsInline\",\"text\",\"Msg\",\"setInputsInline\",\"collapse\",\"expandOption\",\"setCollapsed\",\"collapseOption\",\"disable\",\"disableOption\",\"getInheritedDisabled\",\"setDisabled\",\"blockDeleteOption\",\"breakpointOption\",\"index\",\"indexOf\",\"splice\",\"runToCursorOption\",\"watchOption\",\"getVars\",\"blockHelpOption\",\"customContextMenu\",\"show\",\"RTL\",\"currentBlock\",\"document\",\"getElementById\",\"onclick\",\"argument0\",\"textOrder\",\"where1\",\"where2\",\"at1\",\"at2\",\"getIndex_\",\"wherePascalCase\",\"FIRST\",\"LAST\",\"FROM_START\",\"FROM_END\",\"UPPERCASE\",\"LOWERCASE\",\"TITLECASE\",\"LEFT\",\"RIGHT\",\"BOTH\",\"getField\",\"quote_\",\"inject\",\"media\",\"toolbox\",\"Xml\",\"domToWorkspace\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 3);\\n\",\"export var Debuggee_Worker = (function (){\\r\\n\\tvar instance;\\r\\n\\tvar dispatcher;\\r\\n\\t  \\r\\n\\tfunction getInstance(){\\r\\n\\t\\tif(instance === undefined){\\r\\n\\t\\t\\tinstance = new Worker(\\\"./dist/debuggee.js\\\"); // to path apo to localhost kai oxi apo edw\\r\\n\\t\\t\\tinitDispacher();\\r\\n\\t\\t\\tinstance.onmessage = function(msg) {\\r\\n                let obj = msg.data;\\r\\n                let data = obj.data;\\r\\n                dispatcher[obj.type](data);\\r\\n            };\\r\\n\\t\\t}\\t\\t\\r\\n\\treturn instance;\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction Stop(){\\r\\n\\t\\tif(!hasInstance()) return;\\r\\n\\t\\tinstance.terminate();\\r\\n\\t\\tinstance = undefined;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AddOnDispacher(event, callback){\\r\\n\\t\\tdispatcher[event] = callback;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction hasInstance(){\\r\\n\\t \\tif(instance === undefined) return false;\\r\\n\\t \\telse return true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initDispacher(){\\r\\n\\t\\tdispatcher = {                              \\r\\n\\t\\t\\t\\\"alert\\\" : (msg) => {\\r\\n\\t\\t\\t\\twindow.alert(msg);\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"prompt\\\" : (msg) => {\\r\\n\\t\\t\\t\\tDebuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"prompt\\\",\\\"data\\\": window.prompt(msg)}); \\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t\\\"highlightBlock\\\" : (data) => {\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].traceOn_ = true;\\r\\n\\t\\t\\t\\twindow.workspace[data.CurrentSystemEditorId].highlightBlock(data.id);\\r\\n\\t\\t\\t\\t// var block = window.workspace[data.CurrentSystemEditorId].getBlockById(data.id);\\t\\t// gia na anoigei to block an exw mesa bp (to kanei se ola :P)\\r\\n\\t\\t\\t\\t// block.setCollapsed(false);\\r\\n\\t\\t\\t}, \\r\\n\\t\\t\\t\\\"execution_finished\\\" : () => {\\r\\n\\t\\t\\t\\tinstance = undefined;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\tInstance : getInstance,\\r\\n\\t\\tStop: Stop,\\r\\n\\t\\tAddOnDispacher: AddOnDispacher,\\r\\n\\t\\thasInstance: hasInstance\\r\\n\\t};\\r\\n\\r\\n})();\\r\\n\\r\\nexport var Blockly_Debugger = {};\\r\\nBlockly_Debugger.actions = {};\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Continue\\\"].handler = () => {\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"continue\\\"});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"] = {}; \\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"] = {}; \\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepIn\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepIn\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOver\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOver\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepParent\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepParent\\\"});\\r\\n}\\r\\n\\r\\nBlockly_Debugger.actions[\\\"StepOut\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"stepOut\\\"});\\r\\n}\",\"import { Debuggee_Worker, Blockly_Debugger} from \\\"../init.js\\\";\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Stop\\\"].handler = () => {\\r\\n    Debuggee_Worker.Stop();\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\n// function addCode(js){                                // gia na kanw debug to eval \\r\\n//     var e = document.createElement('script');\\r\\n//     e.type = 'text/javascript';\\r\\n//     e.src  = 'data:text/javascript;charset=utf-8,'+escape(js);\\r\\n//     document.head.appendChild(e);\\r\\n// }\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Start\\\"].handler = (cursorBreakpoint) => {\\r\\n    if(Debuggee_Worker.hasInstance()) return;\\r\\n    Blockly.JavaScript.STATEMENT_PREFIX = 'await $id(%1, 0);\\\\n';\\r\\n    var code1 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly1\\\"]);\\r\\n    var code2 = Blockly.JavaScript.workspaceToCode(window.workspace[\\\"blockly2\\\"]); \\r\\n    var code = code1 + code2;\\r\\n    \\r\\n\\r\\n    var variables1 = window.workspace[\\\"blockly1\\\"].getAllVariables().map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    var variables2 = (window.workspace[\\\"blockly2\\\"].getAllVariables()).map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    \\r\\n    var variables= [];\\r\\n    for(var i = 0; i<variables1.length; ++i){\\r\\n        var nvar = {\\r\\n            \\\"name\\\" : variables1[i].name,\\r\\n            \\\"value\\\" : undefined\\r\\n        }\\r\\n        variables.push(nvar);\\r\\n    }\\r\\n\\r\\n    var variables_names =  variables.map((variable) => {\\r\\n        return variable.name;\\r\\n    });\\r\\n    for(var i = 0; i<variables2.length; ++i){\\r\\n        if(variables_names.includes(variables2[i].name)) continue;\\r\\n        var nvar = {\\r\\n            \\\"name\\\" : variables2[i].name,\\r\\n            \\\"value\\\" : undefined\\r\\n        }\\r\\n        variables.push(nvar);\\r\\n    }\\r\\n\\r\\n    // var code = \\\"async function code(){\\\\n\\\" + code1 + code2 +\\\" };\\\\ncode();\\\";\\r\\n    // addCode(code);\\r\\n    if(cursorBreakpoint instanceof MouseEvent) cursorBreakpoint = \\\"\\\";\\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"start_debugging\\\", \\\"data\\\": {\\\"code\\\": code, \\r\\n                                                                               \\\"breakpoints\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints,\\r\\n                                                                               \\\"cursorBreakpoint\\\": cursorBreakpoint,\\r\\n                                                                               \\\"watches\\\": Blockly_Debugger.actions[\\\"Watch\\\"].watches\\r\\n                                                                               //\\\"variables\\\": variables\\r\\n                                                                            }});\\r\\n    console.log(code1 + code2);\\r\\n}\\r\\n\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"] = {};\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Breakpoint\\\"].handler = () => {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"breakpoint\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints});\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nBlockly_Debugger.actions[\\\"RunToCursor\\\"].handler = (block_id) => {\\r\\n    if(!Debuggee_Worker.hasInstance()) {\\r\\n        Blockly_Debugger.actions[\\\"Start\\\"].handler(block_id);\\r\\n        return;\\r\\n    }; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"runToCursor\\\", \\\"data\\\": block_id});\\r\\n}\",\"import {Debuggee_Worker, Blockly_Debugger} from '../init.js';\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"] = {};\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"].watches = [];\\r\\n\\r\\nBlockly_Debugger.actions[\\\"Watch\\\"].handler = () =>  {\\r\\n    if(!Debuggee_Worker.hasInstance()) return; \\r\\n    Debuggee_Worker.Instance().postMessage({\\\"type\\\":\\\"watch\\\", \\\"data\\\": Blockly_Debugger.actions[\\\"Watch\\\"].watches});\\r\\n}\\r\\n\",\"export var generation = {\\r\\n    nest : -1,\\r\\n    currentSystemEditorId: null\\r\\n}\",\"'use strict';\\r\\nimport {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.JavaScript['lists_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    // old blockly\\r\\n    // var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n    //     Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n      Blockly.JavaScript.ORDER_MEMBER) || '[]';   \\r\\n    return [ '(' + list + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    //return ['var ' + my_list + ' = ' + argument0 + ';\\\\n' + '!' + my_list + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n    return [ '!' + '(' + argument0 + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_indexOf'] = function(block) {\\r\\n    // Find an item in the list.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var item = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    // var code = '(' + list  + ')' + '.' + operator + '(' + item + ') + 1';\\r\\n    // return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n    var code = '(' + list + ')' + '.' + operator + '(' + item + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n// Blockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n//     // Get element at index.\\r\\n//     // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n//     var mode = block.getFieldValue('MODE') || 'GET';\\r\\n//     var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n//     var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n//         Blockly.JavaScript.ORDER_UNARY_NEGATION) || '1';\\r\\n//     var list = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n//         Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  \\r\\n//     list = '(' + list + ')';\\r\\n//     if (where == 'FIRST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.shift()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.shift();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'LAST') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.pop()';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.pop();\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_START') {\\r\\n//       // Blockly uses one-based indicies.\\r\\n//       if (Blockly.isNumber(at)) {\\r\\n//         // If the index is a naked number, decrement it right now.\\r\\n//         at = parseFloat(at) - 1;\\r\\n//       } else {\\r\\n//         // If the index is dynamic, decrement it in code.\\r\\n//         at += ' - 1';\\r\\n//       }\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '[' + at + ']';\\r\\n//         return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n//       } else if (mode == 'GET_REMOVE') {\\r\\n//         var code = list + '.splice(' + at + ', 1)[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return list + '.splice(' + at + ', 1);\\\\n';\\r\\n//       }\\r\\n//     } else if (where == 'FROM_END') {\\r\\n//       if (mode == 'GET') {\\r\\n//         var code = list + '.slice(-' + at + ')[0]';\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\\r\\n//         var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//             'lists_remove_from_end',\\r\\n//             [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//                 '(list, x) {',\\r\\n//               '  x = list.length - x;',\\r\\n//               '  return list.splice(x, 1)[0];',\\r\\n//               '}']);\\r\\n//         code = functionName + '(' + list + ', ' + at + ')';\\r\\n//         if (mode == 'GET_REMOVE') {\\r\\n//           return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//         } else if (mode == 'REMOVE') {\\r\\n//           return code + ';\\\\n';\\r\\n//         }\\r\\n//       }\\r\\n//     } else if (where == 'RANDOM') {\\r\\n//       var functionName = Blockly.JavaScript.provideFunction_(\\r\\n//           'lists_get_random_item',\\r\\n//           [ 'function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n//               '(list, remove) {',\\r\\n//             '  var x = Math.floor(Math.random() * list.length);',\\r\\n//             '  if (remove) {',\\r\\n//             '    return list.splice(x, 1)[0];',\\r\\n//             '  } else {',\\r\\n//             '    return list[x];',\\r\\n//             '  }',\\r\\n//             '}']);\\r\\n//       code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n//       if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n//         return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n//       } else if (mode == 'REMOVE') {\\r\\n//         return code + ';\\\\n';\\r\\n//       }\\r\\n//     }\\r\\n//     throw 'Unhandled combination (lists_getIndex).';\\r\\n//   };\\r\\n\\r\\nBlockly.JavaScript['lists_getIndex'] = function(block) {\\r\\n  // Get element at index.\\r\\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\\r\\n  var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  var listOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_COMMA :\\r\\n      Blockly.JavaScript.ORDER_MEMBER;\\r\\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\\r\\n  list = '(' + list + ')';\\r\\n  switch (where) {\\r\\n    case ('FIRST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.shift()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.shift();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('LAST'):\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(-1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.pop()';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.pop();\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_START'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '[' + at + ']';\\r\\n        return [code, Blockly.JavaScript.ORDER_MEMBER];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);\\\\n';\\r\\n      }\\r\\n      break;\\r\\n    case ('FROM_END'):\\r\\n      var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n      if (mode == 'GET') {\\r\\n        var code = list + '.slice(' + at + ')[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'GET_REMOVE') {\\r\\n        var code = list + '.splice(' + at + ', 1)[0]';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return list + '.splice(' + at + ', 1);';\\r\\n      }\\r\\n      break;\\r\\n    case ('RANDOM'):\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'listsGetRandomItem',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(list, remove) {',\\r\\n           '  var x = Math.floor(Math.random() * list.length);',\\r\\n           '  if (remove) {',\\r\\n           '    return list.splice(x, 1)[0];',\\r\\n           '  } else {',\\r\\n           '    return list[x];',\\r\\n           '  }',\\r\\n           '}']);\\r\\n      code = functionName + '(' + list + ', ' + (mode != 'GET') + ')';\\r\\n      if (mode == 'GET' || mode == 'GET_REMOVE') {\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      } else if (mode == 'REMOVE') {\\r\\n        return code + ';\\\\n';\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n  throw 'Unhandled combination (lists_getIndex).';\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n\\r\\n  // Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n  //   // Set element at index.\\r\\n  //   // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n  //   var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n  //   var mode = block.getFieldValue('MODE') || 'GET';\\r\\n  //   var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n  //   var at = Blockly.JavaScript.valueToCode(block, 'AT',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '1';\\r\\n  //   var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n  //       Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n  //   // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n  //   // Closure, which accesses and modifies 'list'.\\r\\n \\r\\n  //   list = '(' + list + ')';\\r\\n  //   function cacheList() {\\r\\n  //     if (list.match(/^\\\\w+$/)) {\\r\\n  //       return '';\\r\\n  //     }\\r\\n  //     var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_list', Blockly.Variables.NAME_TYPE);\\r\\n  //     var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n  //     list = listVar;\\r\\n  //     return code;\\r\\n  //   }\\r\\n  //   if (where == 'FIRST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[0] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.unshift(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'LAST') {\\r\\n  //     if (mode == 'SET') {\\r\\n  //       var code = cacheList();\\r\\n  //       code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.push(' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_START') {\\r\\n  //     // Blockly uses one-based indicies.\\r\\n  //     if (Blockly.isNumber(at)) {\\r\\n  //       // If the index is a naked number, decrement it right now.\\r\\n  //       at = parseFloat(at) - 1;\\r\\n  //     } else {\\r\\n  //       // If the index is dynamic, decrement it in code.\\r\\n  //       at += ' - 1';\\r\\n  //     }\\r\\n  //     if (mode == 'SET') {\\r\\n  //       return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n  //     }\\r\\n  //   } else if (where == 'FROM_END') {\\r\\n  //     var code = cacheList();\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n  //           ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   } else if (where == 'RANDOM') {\\r\\n  //     var code = cacheList();\\r\\n  //     var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n  //         'tmp_x', Blockly.Variables.NAME_TYPE);\\r\\n  //     code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n  //         '.length);\\\\n';\\r\\n  //     if (mode == 'SET') {\\r\\n  //       code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n  //       return code;\\r\\n  //     } else if (mode == 'INSERT') {\\r\\n  //       code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n  //       return code;\\r\\n  //     }\\r\\n  //   }\\r\\n  //   throw 'Unhandled combination (lists_setIndex).';\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_setIndex'] = function(block) {\\r\\n    // Set element at index.\\r\\n    // Note: Until February 2013 this block did not have MODE or WHERE inputs.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '[]';\\r\\n    var mode = block.getFieldValue('MODE') || 'GET';\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'TO',\\r\\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\\r\\n    // Cache non-trivial values to variables to prevent repeated look-ups.\\r\\n    // Closure, which accesses and modifies 'list'.\\r\\n\\r\\n    list = '(' + list + ')';\\r\\n    function cacheList() {\\r\\n      if (list.match(/^\\\\w+$/)) {\\r\\n        return '';\\r\\n      }\\r\\n      var listVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n          'tmpList', Blockly.Variables.NAME_TYPE);\\r\\n      var code = 'var ' + listVar + ' = ' + list + ';\\\\n';\\r\\n      list = listVar;\\r\\n      return code;\\r\\n    }\\r\\n    switch (where) {\\r\\n      case ('FIRST'):\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[0] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.unshift(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('LAST'):\\r\\n        if (mode == 'SET') {\\r\\n          var code = cacheList();\\r\\n          code += list + '[' + list + '.length - 1] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.push(' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_START'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        if (mode == 'SET') {\\r\\n          return list + '[' + at + '] = ' + value + ';\\\\n';\\r\\n        } else if (mode == 'INSERT') {\\r\\n          return list + '.splice(' + at + ', 0, ' + value + ');\\\\n';\\r\\n        }\\r\\n        break;\\r\\n      case ('FROM_END'):\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false,\\r\\n            Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n        var code = cacheList();\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\\r\\n              ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n      case ('RANDOM'):\\r\\n        var code = cacheList();\\r\\n        var xVar = Blockly.JavaScript.variableDB_.getDistinctName(\\r\\n            'tmpX', Blockly.Variables.NAME_TYPE);\\r\\n        code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\\r\\n            '.length);\\\\n';\\r\\n        if (mode == 'SET') {\\r\\n          code += list + '[' + xVar + '] = ' + value + ';\\\\n';\\r\\n          return code;\\r\\n        } else if (mode == 'INSERT') {\\r\\n          code += list + '.splice(' + xVar + ', 0, ' + value + ');\\\\n';\\r\\n          return code;\\r\\n        }\\r\\n        break;\\r\\n    }\\r\\n    throw 'Unhandled combination (lists_setIndex).';\\r\\n  };\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['lists_split'] = function(block) {\\r\\n  //   // Block for splitting text into a list, or joining a list into text.\\r\\n  //   var value_input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n  //       Blockly.JavaScript.ORDER_MEMBER);\\r\\n  //   var value_delim = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n  //       Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //   var mode = block.getFieldValue('MODE');\\r\\n  //   if (mode == 'SPLIT') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '\\\\'\\\\'';\\r\\n  //     }\\r\\n  //     var functionName = 'split';\\r\\n  //   } else if (mode == 'JOIN') {\\r\\n  //     if (!value_input) {\\r\\n  //       value_input = '[]';\\r\\n  //     }\\r\\n  //     var functionName = 'join';\\r\\n  //   } else {\\r\\n  //     throw 'Unknown mode: ' + mode;\\r\\n  //   }\\r\\n  //   var code = '(' + value_input + ')' + '.' + functionName + '(' + value_delim + ')';\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['lists_split'] = function(block) {\\r\\n    // Block for splitting text into a list, or joining a list into text.\\r\\n    var input = Blockly.JavaScript.valueToCode(block, 'INPUT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER);\\r\\n    var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var mode = block.getFieldValue('MODE');\\r\\n    if (mode == 'SPLIT') {\\r\\n      if (!input) {\\r\\n        input = '\\\\'\\\\'';\\r\\n      }\\r\\n      var functionName = 'split';\\r\\n    } else if (mode == 'JOIN') {\\r\\n      if (!input) {\\r\\n        input = '[]';\\r\\n      }\\r\\n      var functionName = 'join';\\r\\n    } else {\\r\\n      throw 'Unknown mode: ' + mode;\\r\\n    }\\r\\n    var code = '(' + input + ')' + '.' + functionName + '(' + delimiter + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['lists_reverse'] = function(block) {\\r\\n    // Block for reversing a list.\\r\\n    var list = Blockly.JavaScript.valueToCode(block, 'LIST',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\\r\\n    var code = '(' + list + ')' + '.slice().reverse()';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\n// Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n//     // Define a procedure with a return value.\\r\\n//     var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n//         block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n//     var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n//     if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n//       branch = Blockly.JavaScript.prefixLines(\\r\\n//           Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + block.id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\'), eval(update_values())'\\r\\n//         ), Blockly.JavaScript.INDENT) + branch ;\\r\\n//     }\\r\\n//     if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n//       branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n//           '\\\\'' + block.id + '\\\\'') + branch;\\r\\n//     }\\r\\n//     var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n//         Blockly.JavaScript.ORDER_NONE) || '';\\r\\n//     if (returnValue) {\\r\\n//       returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n//     }else{\\r\\n//         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n//     }\\r\\n//     var args = [];\\r\\n//     for (var x = 0; x < block.arguments_.length; x++) {\\r\\n//       args[x] = Blockly.JavaScript.variableDB_.getName(block.arguments_[x],\\r\\n//           Blockly.Variables.NAME_TYPE);\\r\\n//     }\\r\\n//     var code = 'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n//         '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n//         '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n//         branch +    \\r\\n//         returnValue + '}'; \\r\\n//     code = Blockly.JavaScript.scrub_(block, code);\\r\\n//     Blockly.JavaScript.definitions_[funcName] = code;\\r\\n//     return null;\\r\\n//   };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defreturn'] = function(block) {\\r\\n    // Define a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\\r\\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.\\r\\n        branch = Blockly.JavaScript.prefixLines(\\r\\n            Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + \\\"0\\\" + ', \\\\'' + id + '\\\\', \\\\'' + generation.currentSystemEditorId + '\\\\'), eval(update_values())'\\r\\n        ), Blockly.JavaScript.INDENT) + branch ;\\r\\n    }\\r\\n\\r\\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\\r\\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\\r\\n          '\\\\'' + block.id + '\\\\'') + branch;\\r\\n    }\\r\\n    var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '';\\r\\n\\r\\n     if (returnValue) {\\r\\n         returnValue = '  let $returnValue = ' + returnValue + ';\\\\n' + '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return $returnValue;\\\\n';\\r\\n     }else{\\r\\n         returnValue = '  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\\\n  Blockly_Debuggee.state.currNest = global_nest;\\\\n' + '  return;\\\\n';\\r\\n     }\\r\\n\\r\\n\\r\\n    var args = [];\\r\\n    for (var i = 0; i < block.arguments_.length; i++) {\\r\\n      args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i],\\r\\n          Blockly.Variables.NAME_TYPE);\\r\\n    }\\r\\n      var code =  'async function ' + funcName + '(' + args.join(', ') + ') {\\\\n' +  \\r\\n                '  let global_nest = Blockly_Debuggee.state.currNest;\\\\n' + \\r\\n                '  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\\\n' +\\r\\n                branch +    \\r\\n                returnValue + '}';\\r\\n    code = Blockly.JavaScript.scrub_(block, code);\\r\\n    // Add % so as not to collide with helper functions in definitions list.\\r\\n    Blockly.JavaScript.definitions_['%' + funcName] = code;\\r\\n    return null;\\r\\n  };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['procedures_defnoreturn'] =\\r\\n  Blockly.JavaScript['procedures_defreturn'];\\r\\n\\r\\n\\r\\n// function call \\r\\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\\r\\n    // Call a procedure with a return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ')';\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\\r\\n    // Call a procedure with no return value.\\r\\n    var funcName = Blockly.JavaScript.variableDB_.getName(\\r\\n        block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\\r\\n    var args = [];\\r\\n    for (var x = 0; x < block.arguments_.length; x++) {\\r\\n      args[x] = Blockly.JavaScript.valueToCode(block, 'ARG' + x,\\r\\n          Blockly.JavaScript.ORDER_COMMA) || 'null';\\r\\n    }\\r\\n    var code = \\\"await \\\" + funcName + '(' + args.join(', ') + ');\\\\n';\\r\\n    return code;\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['procedures_ifreturn'] = function(block) {\\r\\n  // Conditionally return value from a procedure.\\r\\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\\r\\n      Blockly.JavaScript.ORDER_NONE) || 'false';\\r\\n  var code = 'if (' + condition + ') {\\\\n' + '  Blockly_Debuggee.state.currNest = global_nest;\\\\n  Blockly_Debuggee.state.currState.parent = false;\\\\n';\\r\\n  if (block.hasReturnValue_) {\\r\\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_NONE) || 'null';\\r\\n    code += '  return ' + value + ';\\\\n';\\r\\n  } else {\\r\\n    code += '  return;\\\\n';\\r\\n  }\\r\\n  code += '}\\\\n';\\r\\n  return code;\\r\\n};\\r\\n\",\"import {generation} from '../blockly_init.js'\\r\\n\\r\\nBlockly.Generator.prototype.blockToCode = function(block) {\\r\\n    if (!block) {\\r\\n      return '';\\r\\n    }\\r\\n    if (block.disabled) {\\r\\n      // Skip past this block if it is disabled.\\r\\n      return this.blockToCode(block.getNextBlock());\\r\\n    }\\r\\n  \\r\\n    var func = this[block.type];\\r\\n    goog.asserts.assertFunction(func,\\r\\n        'Language \\\"%s\\\" does not know how to generate code for block type \\\"%s\\\".',\\r\\n        this.name_, block.type);\\r\\n    // First argument to func.call is the value of 'this' in the generator.\\r\\n    // Prior to 24 September 2013 'this' was the only way to access the block.\\r\\n    // The current prefered method of accessing the block is through the second\\r\\n    // argument to func.call, which becomes the first parameter to the generator.\\r\\n    var my_nest = ++generation.nest;\\r\\n    var code = func.call(block, block);\\r\\n    generation.nest--;\\r\\n    if (goog.isArray(code)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      goog.asserts.assert(block.outputConnection,               //!! Now blockly \\r\\n        'Expecting string from statement block \\\"%s\\\".', block.type);\\r\\n      code[0] = 'await $id(await wait(' + my_nest + ', ' + '\\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), eval(update_values()), ' + code[0] + ')';\\r\\n      return [this.scrub_(block, code[0]), code[1]];\\r\\n    } else if (goog.isString(code)) {\\r\\n      var id = block.id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n      if (this.STATEMENT_PREFIX) {\\r\\n        code = this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + my_nest + ', \\\\'' + block.id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'),  eval(update_values())') +\\r\\n            code;\\r\\n      }\\r\\n      return this.scrub_(block, code);\\r\\n    } else if (code === null) {\\r\\n      // Block has handled code generation itself.\\r\\n      return '';\\r\\n    } else {\\r\\n      goog.asserts.fail('Invalid code generated: %s', code);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.addLoopTrap = function(branch, id) {\\r\\n  id = id.replace(/\\\\$/g, '$$$$');  // Issue 251.  //!! Now blockly \\r\\n  if (this.INFINITE_LOOP_TRAP) {\\r\\n    branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\\\\'' + id + '\\\\'') + branch;\\r\\n  }\\r\\n  if (this.STATEMENT_PREFIX) {\\r\\n    branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, 'await wait(' + generation.nest + ', \\\\'' + id + '\\\\', \\\\''+ generation.currentSystemEditorId + '\\\\'), eval(update_values())'), this.INDENT);\\r\\n  }\\r\\n  return branch;\\r\\n};\\r\\n\\r\\n\\r\\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\\r\\n  if (!workspace) {\\r\\n    // Backwards compatability from before there could be multiple workspaces.\\r\\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\\r\\n    workspace = Blockly.getMainWorkspace();\\r\\n  }\\r\\n  var code = [];\\r\\n  this.init(workspace);\\r\\n  var blocks = workspace.getTopBlocks(true);\\r\\n  generation.currentSystemEditorId = workspace.systemEditorId;\\r\\n  var line = \\\"\\\\n// start source code of another editor\\\\n\\\";\\r\\n  // var line = \\\"\\\\n// start source code of another editor\\\\nCurrentSystemEditorId = '\\\" + workspace.systemEditorId + \\\"';\\\\n\\\";\\r\\n  code.push(line);\\r\\n  for (var x = 0, block; block = blocks[x]; x++) {\\r\\n    line = this.blockToCode(block);\\r\\n    if (goog.isArray(line)) {\\r\\n      // Value blocks return tuples of code and operator order.\\r\\n      // Top-level blocks don't care about operator order.\\r\\n      line = line[0];\\r\\n    }\\r\\n    if (line) {\\r\\n      if (block.outputConnection && this.scrubNakedValue) {\\r\\n        // This block is a naked value.  Ask the language's code generator if\\r\\n        // it wants to append a semicolon, or something.\\r\\n        line = this.scrubNakedValue(line);\\r\\n      }\\r\\n      code.push(line);\\r\\n    }\\r\\n  }\\r\\n  code = code.join('\\\\n');  // Blank line between each section.\\r\\n  code = this.finish(code);\\r\\n  // Final scrubbing of whitespace.\\r\\n  code = code.replace(/^\\\\s+\\\\n/, '');\\r\\n  code = code.replace(/\\\\n\\\\s+$/, '\\\\n');\\r\\n  code = code.replace(/[ \\\\t]+\\\\n/g, '\\\\n');\\r\\n  return code;\\r\\n};\",\"import {Blockly_Debugger} from '../../../debugger/debugger.js';\\r\\n\\r\\n  Blockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n    if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n      return;\\r\\n    }\\r\\n    // Save the current block in a variable for use in closures.\\r\\n    var block = this;\\r\\n    var menuOptions = [];\\r\\n  \\r\\n    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n      menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block));\\r\\n      if (this.isEditable() && !this.collapsed_ &&\\r\\n          this.workspace.options.comments) {\\r\\n        menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\\r\\n      }\\r\\n  \\r\\n      // Option to make block inline.\\r\\n      if (!this.collapsed_) {\\r\\n        for (var i = 1; i < this.inputList.length; i++) {\\r\\n          if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n              this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n            // Only display this option if there are two value or dummy inputs\\r\\n            // next to each other.\\r\\n            var inlineOption = {enabled: true};\\r\\n            var isInline = this.getInputsInline();\\r\\n            inlineOption.text = isInline ?\\r\\n                Blockly.Msg['EXTERNAL_INPUTS'] : Blockly.Msg['INLINE_INPUTS'];\\r\\n            inlineOption.callback = function() {\\r\\n              block.setInputsInline(!isInline);\\r\\n            };\\r\\n            menuOptions.push(inlineOption);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.collapse) {\\r\\n        // Option to collapse/expand block.\\r\\n        if (this.collapsed_) {\\r\\n          var expandOption = {enabled: true};\\r\\n          expandOption.text = Blockly.Msg['EXPAND_BLOCK'];\\r\\n          expandOption.callback = function() {\\r\\n            block.setCollapsed(false);\\r\\n          };\\r\\n          menuOptions.push(expandOption);\\r\\n        } else {\\r\\n          var collapseOption = {enabled: true};\\r\\n          collapseOption.text = Blockly.Msg['COLLAPSE_BLOCK'];\\r\\n          collapseOption.callback = function() {\\r\\n            block.setCollapsed(true);\\r\\n          };\\r\\n          menuOptions.push(collapseOption);\\r\\n        }\\r\\n      }\\r\\n  \\r\\n      if (this.workspace.options.disable) {\\r\\n        // Option to disable/enable block.\\r\\n        var disableOption = {\\r\\n          text: this.disabled ?\\r\\n              Blockly.Msg['ENABLE_BLOCK'] : Blockly.Msg['DISABLE_BLOCK'],\\r\\n          enabled: !this.getInheritedDisabled(),\\r\\n          callback: function() {\\r\\n            block.setDisabled(!block.disabled);\\r\\n          }\\r\\n        };\\r\\n        menuOptions.push(disableOption);\\r\\n      }\\r\\n  \\r\\n      menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\\r\\n    }\\r\\n  \\r\\n\\r\\n        // Breakpoints\\r\\n    var breakpointOption = {\\r\\n      text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n      enabled: true,\\r\\n      callback: function() {\\r\\n          if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) {\\r\\n            Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(block.id);\\r\\n            block.setCollapsed(false);                                  // expand the block if it is collapted \\r\\n          } else {\\r\\n            var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.indexOf(block.id);\\r\\n            if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n          }\\r\\n          Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n          alert(\\\"Selected: \\\" + block.id + \\\"\\\\n breakpoints: \\\" + Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints);\\r\\n        }\\r\\n    };\\r\\n    menuOptions.push(breakpointOption);\\r\\n\\r\\n    // Run to cursor\\r\\n    var runToCursorOption = {\\r\\n      text: \\\"Run to cursor\\\",\\r\\n      enabled: true,\\r\\n      callback: function() {\\r\\n        Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n       // window.alert(\\\"Run to cursor   \\\" + block.id);\\r\\n      }\\r\\n    };\\r\\n    menuOptions.push(runToCursorOption);\\r\\n\\r\\n\\r\\n    // Add/Remove watch\\r\\n    var watchOption = {\\r\\n      text: (block.type===\\\"variables_set\\\" || block.type===\\\"variables_get\\\") ?((!Blockly_Debugger.actions[\\\"Watch\\\"].watches.includes(block.getVars()[0])) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\") : \\\"Add Watch\\\",\\r\\n      enabled: (block.type===\\\"variables_set\\\" || block.type===\\\"variables_get\\\") ? true : false,\\r\\n      //enabled: true,\\r\\n      callback: function(){\\r\\n        //alert(block.nextConnection);\\r\\n        // console.log(block.nextConnection);  \\r\\n        // console.log(block.nextConnection.sourceBlock_.getVars());  \\r\\n        if(!Blockly_Debugger.actions[\\\"Watch\\\"].watches.includes(block.getVars()[0])){\\r\\n          Blockly_Debugger.actions[\\\"Watch\\\"].watches.push(block.getVars()[0]);\\r\\n        }else{\\r\\n          var index = Blockly_Debugger.actions[\\\"Watch\\\"].watches.indexOf(block.getVars()[0]);\\r\\n          if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].watches.splice(index, 1);\\r\\n        }\\r\\n        Blockly_Debugger.actions[\\\"Watch\\\"].handler();        \\r\\n        alert(Blockly_Debugger.actions[\\\"Watch\\\"].watches);\\r\\n\\r\\n      }\\r\\n    }\\r\\n\\r\\n    menuOptions.push(watchOption);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    menuOptions.push(Blockly.ContextMenu.blockHelpOption(block));\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n    // Allow the block to add or modify menuOptions.\\r\\n    if (this.customContextMenu) {\\r\\n      this.customContextMenu(menuOptions);\\r\\n    }\\r\\n  \\r\\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\\r\\n    Blockly.ContextMenu.currentBlock = this;\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// Blockly.BlockSvg.prototype.showContextMenu_ = function(e) {\\r\\n//     if (this.workspace.options.readOnly || !this.contextMenu) {\\r\\n//       return;\\r\\n//     }\\r\\n//     // Save the current block in a variable for use in closures.\\r\\n//     var block = this;\\r\\n//     var menuOptions = [];\\r\\n  \\r\\n//     if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\\r\\n//       // Option to duplicate this block.\\r\\n//       var duplicateOption = {\\r\\n//         text: Blockly.Msg.DUPLICATE_BLOCK,\\r\\n//         enabled: true,\\r\\n//         callback: function() {\\r\\n//           Blockly.duplicate_(block);\\r\\n//         }\\r\\n//       };\\r\\n//       if (this.getDescendants().length > this.workspace.remainingCapacity()) {\\r\\n//         duplicateOption.enabled = false;\\r\\n//       }\\r\\n//       menuOptions.push(duplicateOption);\\r\\n  \\r\\n//       if (this.isEditable() && !this.collapsed_ &&\\r\\n//           this.workspace.options.comments) {\\r\\n//         // Option to add/remove a comment.\\r\\n//         var commentOption = {enabled: !goog.userAgent.IE};\\r\\n//         if (this.comment) {\\r\\n//           commentOption.text = Blockly.Msg.REMOVE_COMMENT;\\r\\n//           commentOption.callback = function() {\\r\\n//             block.setCommentText(null);\\r\\n//           };\\r\\n//         } else {\\r\\n//           commentOption.text = Blockly.Msg.ADD_COMMENT;\\r\\n//           commentOption.callback = function() {\\r\\n//             block.setCommentText('');\\r\\n//           };\\r\\n//         }\\r\\n//         menuOptions.push(commentOption);\\r\\n//       }\\r\\n  \\r\\n//       // Option to make block inline.\\r\\n//       if (!this.collapsed_) {\\r\\n//         for (var i = 1; i < this.inputList.length; i++) {\\r\\n//           if (this.inputList[i - 1].type != Blockly.NEXT_STATEMENT &&\\r\\n//               this.inputList[i].type != Blockly.NEXT_STATEMENT) {\\r\\n//             // Only display this option if there are two value or dummy inputs\\r\\n//             // next to each other.\\r\\n//             var inlineOption = {enabled: true};\\r\\n//             var isInline = this.getInputsInline();\\r\\n//             inlineOption.text = isInline ?\\r\\n//                 Blockly.Msg.EXTERNAL_INPUTS : Blockly.Msg.INLINE_INPUTS;\\r\\n//             inlineOption.callback = function() {\\r\\n//               block.setInputsInline(!isInline);\\r\\n//             };\\r\\n//             menuOptions.push(inlineOption);\\r\\n//             break;\\r\\n//           }\\r\\n//         }\\r\\n//       }\\r\\n  \\r\\n//       if (this.workspace.options.collapse) {\\r\\n//         // Option to collapse/expand block.\\r\\n//         if (this.collapsed_) {\\r\\n//           var expandOption = {enabled: true};\\r\\n//           expandOption.text = Blockly.Msg.EXPAND_BLOCK;\\r\\n//           expandOption.callback = function() {\\r\\n//             block.setCollapsed(false);\\r\\n//           };\\r\\n//           menuOptions.push(expandOption);\\r\\n//         } else {\\r\\n//           var collapseOption = {enabled: true};\\r\\n//           collapseOption.text = Blockly.Msg.COLLAPSE_BLOCK;\\r\\n//           collapseOption.callback = function() {\\r\\n//             block.setCollapsed(true);\\r\\n//           };\\r\\n//           menuOptions.push(collapseOption);\\r\\n//         }\\r\\n//       }\\r\\n  \\r\\n//       if (this.workspace.options.disable) {\\r\\n//         // Option to disable/enable block.\\r\\n//         var disableOption = {\\r\\n//           text: this.disabled ?\\r\\n//               Blockly.Msg.ENABLE_BLOCK : Blockly.Msg.DISABLE_BLOCK,\\r\\n//           enabled: !this.getInheritedDisabled(),\\r\\n//           callback: function() {\\r\\n//             block.setDisabled(!block.disabled);\\r\\n//           }\\r\\n//         };\\r\\n//         menuOptions.push(disableOption);\\r\\n//       }\\r\\n  \\r\\n//       // Option to delete this block.\\r\\n//       // Count the number of blocks that are nested in this block.\\r\\n//       var descendantCount = this.getDescendants().length;\\r\\n//       var nextBlock = this.getNextBlock();\\r\\n//       if (nextBlock) {\\r\\n//         // Blocks in the current stack would survive this block's deletion.\\r\\n//         descendantCount -= nextBlock.getDescendants().length;\\r\\n//       }\\r\\n//       var deleteOption = {\\r\\n//         text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :\\r\\n//             Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),\\r\\n//         enabled: true,\\r\\n//         callback: function() {\\r\\n//           block.dispose(true, true);\\r\\n//         }\\r\\n//       };\\r\\n//       menuOptions.push(deleteOption);\\r\\n//     }\\r\\n  \\r\\n\\r\\n//     // Breakpoints\\r\\n//     var breakpointOption = {\\r\\n//       text: (!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) ? \\\"Add Breakpoint\\\" : \\\"Remove Breakpoint\\\",\\r\\n//       enabled: true,\\r\\n//       callback: function() {\\r\\n//           if(!Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.includes(block.id)) {\\r\\n//             Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.push(block.id);\\r\\n//             block.setCollapsed(false);                                  // expand the block if it is collapted \\r\\n//           } else {\\r\\n//             var index = Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.indexOf(block.id);\\r\\n//             if (index !== -1) Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints.splice(index, 1);\\r\\n//           }\\r\\n//           Blockly_Debugger.actions[\\\"Breakpoint\\\"].handler();\\r\\n//           alert(\\\"Selected: \\\" + block.id + \\\"\\\\n breakpoints: \\\" + Blockly_Debugger.actions[\\\"Breakpoint\\\"].breakpoints);\\r\\n//         }\\r\\n//     };\\r\\n//     menuOptions.push(breakpointOption);\\r\\n\\r\\n//     // Run to cursor\\r\\n//     var runToCursorOption = {\\r\\n//       text: \\\"Run to cursor\\\",\\r\\n//       enabled: true,\\r\\n//       callback: function() {\\r\\n//         Blockly_Debugger.actions[\\\"RunToCursor\\\"].handler(block.id);\\r\\n//        // window.alert(\\\"Run to cursor   \\\" + block.id);\\r\\n//       }\\r\\n//     };\\r\\n//     menuOptions.push(runToCursorOption);\\r\\n\\r\\n\\r\\n//     // Add/Remove watch\\r\\n//     var watchOption = {\\r\\n//       text: (block.type===\\\"variables_set\\\" || block.type===\\\"variables_get\\\") ?((!Blockly_Debugger.actions[\\\"Watch\\\"].watches.includes(block.getVars()[0])) ? \\\"Add Watch\\\" : \\\"Remove Watch\\\") : \\\"Add Watch\\\",\\r\\n//       enabled: (block.type===\\\"variables_set\\\" || block.type===\\\"variables_get\\\") ? true : false,\\r\\n//       //enabled: true,\\r\\n//       callback: function(){\\r\\n//         //alert(block.nextConnection);\\r\\n//         // console.log(block.nextConnection);  \\r\\n//         // console.log(block.nextConnection.sourceBlock_.getVars());  \\r\\n//         if(!Blockly_Debugger.actions[\\\"Watch\\\"].watches.includes(block.getVars()[0])){\\r\\n//           Blockly_Debugger.actions[\\\"Watch\\\"].watches.push(block.getVars()[0]);\\r\\n//         }else{\\r\\n//           var index = Blockly_Debugger.actions[\\\"Watch\\\"].watches.indexOf(block.getVars()[0]);\\r\\n//           if (index !== -1) Blockly_Debugger.actions[\\\"Watch\\\"].watches.splice(index, 1);\\r\\n//         }\\r\\n//         Blockly_Debugger.actions[\\\"Watch\\\"].handler();        \\r\\n//         alert(Blockly_Debugger.actions[\\\"Watch\\\"].watches);\\r\\n\\r\\n//       }\\r\\n//     }\\r\\n\\r\\n//     menuOptions.push(watchOption);\\r\\n\\r\\n//     // Option to get help.\\r\\n//     var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;\\r\\n//     var helpOption = {enabled: !!url};\\r\\n//     helpOption.text = Blockly.Msg.HELP;\\r\\n//     helpOption.callback = function() {\\r\\n//       block.showHelp_();\\r\\n//     };\\r\\n//     menuOptions.push(helpOption);\\r\\n    \\r\\n//     // Allow the block to add or modify menuOptions.\\r\\n//     if (this.customContextMenu && !block.isInFlyout) {\\r\\n//       this.customContextMenu(menuOptions);\\r\\n//     }\\r\\n  \\r\\n//     Blockly.ContextMenu.show(e, menuOptions, this.RTL);\\r\\n//     Blockly.ContextMenu.currentBlock = this;\\r\\n\\r\\n\\r\\n//   };\\r\\n\",\"import './init_blockly.js';\\r\\nimport '../debugger/debugger.js';\\r\\nimport '../generator/blockly/blockly.js';\\r\\nimport {Blockly_Debugger} from '../debugger/debugger.js';\\r\\n\\r\\ndocument.getElementById(\\\"ContinueButton\\\").onclick = Blockly_Debugger.actions[\\\"Continue\\\"].handler;\\r\\ndocument.getElementById(\\\"StepInButton\\\").onclick = Blockly_Debugger.actions[\\\"StepIn\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOverButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOver\\\"].handler;\\r\\ndocument.getElementById(\\\"StepParentButton\\\").onclick = Blockly_Debugger.actions[\\\"StepParent\\\"].handler;\\r\\ndocument.getElementById(\\\"StepOutButton\\\").onclick = Blockly_Debugger.actions[\\\"StepOut\\\"].handler;\\r\\ndocument.getElementById(\\\"StopButton\\\").onclick = Blockly_Debugger.actions[\\\"Stop\\\"].handler;\\r\\ndocument.getElementById(\\\"StartButton\\\").onclick = Blockly_Debugger.actions[\\\"Start\\\"].handler;\\r\\n\\r\\n\\r\\n//$(\\\"#RunButton\\\").onclick((ev)=> Run(ev));\",\"Blockly.JavaScript['text_length'] = function(block) {\\r\\n    // String or array length.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    return ['(' + text + ')' + '.length', Blockly.JavaScript.ORDER_MEMBER];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_isEmpty'] = function(block) {\\r\\n    // Is the string null or array empty?\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['!' + '(' + text + ')' + '.length', Blockly.JavaScript.ORDER_LOGICAL_NOT];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_indexOf'] = function(block) {\\r\\n    // Search the text for a substring.\\r\\n    var operator = block.getFieldValue('END') == 'FIRST' ?\\r\\n        'indexOf' : 'lastIndexOf';\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'FIND',\\r\\n        Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    var argument1 = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    var code = '(' + argument1 + ')' + '.' + operator + '(' + argument0 + ')';\\r\\n    if (block.workspace.options.oneBasedIndex) {\\r\\n      return [code + ' + 1', Blockly.JavaScript.ORDER_ADDITION];\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n  Blockly.JavaScript['text_charAt'] = function(block) {\\r\\n    // Get letter at index.\\r\\n    // Note: Until January 2013 this block did not have the WHERE input.\\r\\n    var where = block.getFieldValue('WHERE') || 'FROM_START';\\r\\n    var textOrder = (where == 'RANDOM') ? Blockly.JavaScript.ORDER_NONE :\\r\\n        Blockly.JavaScript.ORDER_MEMBER;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'VALUE',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n        text = '(' + text + ')';\\r\\n    switch (where) {\\r\\n      case 'FIRST':\\r\\n        var code = text + '.charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'LAST':\\r\\n        var code = text + '.slice(-1)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_START':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT');\\r\\n        // Adjust index if using one-based indices.\\r\\n        var code = text + '.charAt(' + at + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'FROM_END':\\r\\n        var at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\\r\\n        var code = text + '.slice(' + at + ').charAt(0)';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n      case 'RANDOM':\\r\\n        var functionName = Blockly.JavaScript.provideFunction_(\\r\\n            'textRandomLetter',\\r\\n            ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n                '(text) {',\\r\\n             '  var x = Math.floor(Math.random() * text.length);',\\r\\n             '  return text[x];',\\r\\n             '}']);\\r\\n        var code = functionName + '(' + text + ')';\\r\\n        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n    }\\r\\n    throw 'Unhandled option (text_charAt).';\\r\\n  };\\r\\n  \\r\\n\\r\\n  Blockly.JavaScript['text_getSubstring'] = function(block) {\\r\\n    // Get substring.\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'STRING',\\r\\n        Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\\\'\\\\'';\\r\\n    var where1 = block.getFieldValue('WHERE1');\\r\\n    var where2 = block.getFieldValue('WHERE2');\\r\\n    if (where1 == 'FIRST' && where2 == 'LAST') {\\r\\n      var code = text;\\r\\n    } else if (text.match(/^'?\\\\w+'?$/) ||\\r\\n        (where1 != 'FROM_END' && where1 != 'LAST' &&\\r\\n        where2 != 'FROM_END' && where2 != 'LAST')) {\\r\\n      // If the text is a variable or literal or doesn't require a call for\\r\\n      // length, don't generate a helper function.\\r\\n      text = '(' + text + ')';\\r\\n      switch (where1) {\\r\\n        case 'FROM_START':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at1 = text + '.length - ' + at1;\\r\\n          break;\\r\\n        case 'FIRST':\\r\\n          var at1 = '0';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      switch (where2) {\\r\\n        case 'FROM_START':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\\r\\n          break;\\r\\n        case 'FROM_END':\\r\\n          var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false,\\r\\n              Blockly.JavaScript.ORDER_SUBTRACTION);\\r\\n          at2 = text + '.length - ' + at2;\\r\\n          break;\\r\\n        case 'LAST':\\r\\n          var at2 = text + '.length';\\r\\n          break;\\r\\n        default:\\r\\n          throw 'Unhandled option (text_getSubstring).';\\r\\n      }\\r\\n      code = text + '.slice(' + at1 + ', ' + at2 + ')';\\r\\n    } else {\\r\\n      text = '(' + text + ')';\\r\\n      var at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\\r\\n      var at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\\r\\n      var getIndex_ = Blockly.JavaScript.text.getIndex_;\\r\\n      var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\\r\\n        'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n          '(sequence' +\\r\\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\\r\\n          // we add it as a parameter.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\\r\\n          ') {',\\r\\n            '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\\r\\n            '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\\r\\n            '  return sequence.slice(start, end);',\\r\\n            '}']);\\r\\n      var code = functionName + '(' + text +\\r\\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\\r\\n          // pass it.\\r\\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\\r\\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\\r\\n          ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  // Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n  //   // Change capitalization.\\r\\n  //   var OPERATORS = {\\r\\n  //     'UPPERCASE': '.toUpperCase()',\\r\\n  //     'LOWERCASE': '.toLowerCase()',\\r\\n  //     'TITLECASE': null\\r\\n  //   };\\r\\n  //   var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n  //   var code;\\r\\n  //   if (operator) {\\r\\n  //     // Upper and lower case are functions built into JavaScript.\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n  //     code = '(' + argument0 + ')' + operator;\\r\\n  //   } else {\\r\\n  //     // Title case is not a native JavaScript function.  Define one.\\r\\n  //     var functionName = Blockly.JavaScript.provideFunction_(\\r\\n  //         'text_toTitleCase',\\r\\n  //         [ 'function ' +\\r\\n  //             Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(str) {',\\r\\n  //           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n  //           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n  //               'txt.substring(1).toLowerCase();});',\\r\\n  //           '}']);\\r\\n  //     var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n  //         Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n  //     code = functionName + '(' + '(' + argument0 + ')' + ')';\\r\\n  //   }\\r\\n  //   return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  // };\\r\\n\\r\\n\\r\\n  Blockly.JavaScript['text_changeCase'] = function(block) {\\r\\n    // Change capitalization.\\r\\n    var OPERATORS = {\\r\\n      'UPPERCASE': '.toUpperCase()',\\r\\n      'LOWERCASE': '.toLowerCase()',\\r\\n      'TITLECASE': null\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('CASE')];\\r\\n    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER :\\r\\n        Blockly.JavaScript.ORDER_NONE;\\r\\n    var text = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        textOrder) || '\\\\'\\\\'';\\r\\n    if (operator) {\\r\\n      // Upper and lower case are functions built into JavaScript.\\r\\n      var code = '(' + text + ')' + operator;\\r\\n    } else {\\r\\n      // Title case is not a native JavaScript function.  Define one.\\r\\n      var functionName = Blockly.JavaScript.provideFunction_(\\r\\n          'textToTitleCase',\\r\\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\\r\\n              '(str) {',\\r\\n           '  return str.replace(/\\\\\\\\S+/g,',\\r\\n           '      function(txt) {return txt[0].toUpperCase() + ' +\\r\\n              'txt.substring(1).toLowerCase();});',\\r\\n           '}']);\\r\\n      var code = functionName + '(' + '(' + text + ')' + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n\\r\\n\\r\\n  ////\\r\\n\\r\\n  Blockly.JavaScript['text_trim'] = function(block) {\\r\\n    // Trim spaces.\\r\\n    var OPERATORS = {\\r\\n      'LEFT': \\\".replace(/^[\\\\\\\\s\\\\\\\\xa0]+/, '')\\\",\\r\\n      'RIGHT': \\\".replace(/[\\\\\\\\s\\\\\\\\xa0]+$/, '')\\\",\\r\\n      'BOTH': '.trim()'\\r\\n    };\\r\\n    var operator = OPERATORS[block.getFieldValue('MODE')];\\r\\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n        Blockly.JavaScript.ORDER_MEMBER) || '\\\\'\\\\'';\\r\\n    return ['(' + argument0 + ')' + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  \\r\\n  Blockly.JavaScript['text_prompt_ext'] = function(block) {\\r\\n    // Prompt function.\\r\\n    if (block.getField('TEXT')) {\\r\\n      // Internal message.\\r\\n      var msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\\r\\n    } else {\\r\\n      // External message.\\r\\n      var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\\r\\n          Blockly.JavaScript.ORDER_NONE) || '\\\\'\\\\'';\\r\\n    }\\r\\n    var code = '(await window.prompt(' + msg + '))';\\r\\n    var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\\r\\n    if (toNumber) {\\r\\n      code = 'parseFloat(' + code + ')';\\r\\n    }\\r\\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\\r\\n  };\\r\\n  \\r\\n  Blockly.JavaScript['text_prompt'] = Blockly.JavaScript['text_prompt_ext'];\\r\\n\\r\\n\\r\\n\",\" window.workspace = {};\\r\\n\\r\\nwindow.workspace[\\\"blockly1\\\"] = Blockly.inject('blocklyDiv',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly1\\\"].systemEditorId = 'blockly1';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(//window.workspace[\\\"blockly1\\\"],\\r\\n\\tdocument.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly1\\\"]);\\r\\n\\r\\n\\r\\n\\r\\nwindow.workspace[\\\"blockly2\\\"] = Blockly.inject('blocklyDiv2',\\r\\n\\t{media: '../../media/',\\r\\n\\t toolbox: document.getElementById('toolbox')});\\r\\nwindow.workspace[\\\"blockly2\\\"].systemEditorId = 'blockly2';\\t \\r\\n\\r\\n Blockly.Xml.domToWorkspace(//window.workspace[\\\"blockly2\\\"],   \\r\\n\\tdocument.getElementById('startBlocks'), \\r\\n\\twindow.workspace[\\\"blockly2\\\"]);\\r\\n\\r\\n\"]}","code":"!function(t){var e={};function a(l){if(e[l])return e[l].exports;var o=e[l]={i:l,l:!1,exports:{}};return t[l].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=t,a.c=e,a.d=function(t,e,l){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:l})},a.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,\"a\",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p=\"\",a(a.s=3)}([,,,function(t,e,a){\"use strict\";a.r(e);a(6);var l=function(){var t,e;function a(){return void 0!==t}return{Instance:function(){return void 0===t&&(t=new Worker(\"./dist/debuggee.js\"),e={alert:t=>{window.alert(t)},prompt:t=>{l.Instance().postMessage({type:\"prompt\",data:window.prompt(t)})},highlightBlock:t=>{window.workspace[t.CurrentSystemEditorId].traceOn_=!0,window.workspace[t.CurrentSystemEditorId].highlightBlock(t.id)},execution_finished:()=>{t=void 0}},t.onmessage=function(t){let a=t.data,l=a.data;e[a.type](l)}),t},Stop:function(){a()&&(t.terminate(),t=void 0)},AddOnDispacher:function(t,a){e[t]=a},hasInstance:a}}(),o={actions:{}};o.actions.Continue={},o.actions.Continue.handler=(()=>{l.Instance().postMessage({type:\"continue\"})}),o.actions.StepIn={},o.actions.StepOver={},o.actions.StepParent={},o.actions.StepOut={},o.actions.StepIn.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepIn\"})}),o.actions.StepOver.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOver\"})}),o.actions.StepParent.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepParent\"})}),o.actions.StepOut.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"stepOut\"})}),o.actions.Stop={},o.actions.Stop.handler=(()=>{l.Stop()}),o.actions.Start={},o.actions.Start.handler=(t=>{if(!l.hasInstance()){Blockly.JavaScript.STATEMENT_PREFIX=\"await $id(%1, 0);\\n\";for(var e=Blockly.JavaScript.workspaceToCode(window.workspace.blockly1),a=Blockly.JavaScript.workspaceToCode(window.workspace.blockly2),c=e+a,r=window.workspace.blockly1.getAllVariables().map(t=>t.name),n=window.workspace.blockly2.getAllVariables().map(t=>t.name),i=[],s=0;s<r.length;++s){var p={name:r[s].name,value:void 0};i.push(p)}var u=i.map(t=>t.name);for(s=0;s<n.length;++s)if(!u.includes(n[s].name)){p={name:n[s].name,value:void 0};i.push(p)}t instanceof MouseEvent&&(t=\"\"),l.Instance().postMessage({type:\"start_debugging\",data:{code:c,breakpoints:o.actions.Breakpoint.breakpoints,cursorBreakpoint:t,watches:o.actions.Watch.watches}}),console.log(e+a)}}),o.actions.Breakpoint={},o.actions.RunToCursor={},o.actions.Breakpoint.breakpoints=[],o.actions.Breakpoint.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"breakpoint\",data:o.actions.Breakpoint.breakpoints})}),o.actions.RunToCursor.handler=(t=>{l.hasInstance()?l.Instance().postMessage({type:\"runToCursor\",data:t}):o.actions.Start.handler(t)}),o.actions.Watch={},o.actions.Watch.watches=[],o.actions.Watch.handler=(()=>{l.hasInstance()&&l.Instance().postMessage({type:\"watch\",data:o.actions.Watch.watches})});var c={nest:-1,currentSystemEditorId:null};Blockly.JavaScript.lists_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.lists_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.lists_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",l=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[l+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[l,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_getIndex=function(t){var e=t.getFieldValue(\"MODE\")||\"GET\",a=t.getFieldValue(\"WHERE\")||\"FROM_START\",l=\"RANDOM\"==a?Blockly.JavaScript.ORDER_COMMA:Blockly.JavaScript.ORDER_MEMBER,o=Blockly.JavaScript.valueToCode(t,\"VALUE\",l)||\"[]\";switch(o=\"(\"+o+\")\",a){case\"FIRST\":if(\"GET\"==e)return[r=o+\"[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=o+\".shift()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return o+\".shift();\\n\";break;case\"LAST\":if(\"GET\"==e)return[r=o+\".slice(-1)[0]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=o+\".pop()\",Blockly.JavaScript.ORDER_MEMBER];if(\"REMOVE\"==e)return o+\".pop();\\n\";break;case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"GET\"==e)return[r=o+\"[\"+c+\"]\",Blockly.JavaScript.ORDER_MEMBER];if(\"GET_REMOVE\"==e)return[r=o+\".splice(\"+c+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\".splice(\"+c+\", 1);\\n\";break;case\"FROM_END\":var r;c=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0);if(\"GET\"==e)return[r=o+\".slice(\"+c+\")[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"GET_REMOVE\"==e)return[r=o+\".splice(\"+c+\", 1)[0]\",Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return o+\".splice(\"+c+\", 1);\";break;case\"RANDOM\":if(r=Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(list, remove) {\",\"  var x = Math.floor(Math.random() * list.length);\",\"  if (remove) {\",\"    return list.splice(x, 1)[0];\",\"  } else {\",\"    return list[x];\",\"  }\",\"}\"])+\"(\"+o+\", \"+(\"GET\"!=e)+\")\",\"GET\"==e||\"GET_REMOVE\"==e)return[r,Blockly.JavaScript.ORDER_FUNCTION_CALL];if(\"REMOVE\"==e)return r+\";\\n\"}throw\"Unhandled combination (lists_getIndex).\"},Blockly.JavaScript.lists_setIndex=function(t){var e=Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_MEMBER)||\"[]\",a=t.getFieldValue(\"MODE\")||\"GET\",l=t.getFieldValue(\"WHERE\")||\"FROM_START\",o=Blockly.JavaScript.valueToCode(t,\"TO\",Blockly.JavaScript.ORDER_ASSIGNMENT)||\"null\";function c(){if(e.match(/^\\w+$/))return\"\";var t=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\",Blockly.Variables.NAME_TYPE),a=\"var \"+t+\" = \"+e+\";\\n\";return e=t,a}switch(e=\"(\"+e+\")\",l){case\"FIRST\":if(\"SET\"==a)return e+\"[0] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".unshift(\"+o+\");\\n\";break;case\"LAST\":if(\"SET\"==a){var r=c();return r+=e+\"[\"+e+\".length - 1] = \"+o+\";\\n\"}if(\"INSERT\"==a)return e+\".push(\"+o+\");\\n\";break;case\"FROM_START\":var n=Blockly.JavaScript.getAdjusted(t,\"AT\");if(\"SET\"==a)return e+\"[\"+n+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return e+\".splice(\"+n+\", 0, \"+o+\");\\n\";break;case\"FROM_END\":n=Blockly.JavaScript.getAdjusted(t,\"AT\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION),r=c();if(\"SET\"==a)return r+=e+\"[\"+e+\".length - \"+n+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return r+=e+\".splice(\"+e+\".length - \"+n+\", 0, \"+o+\");\\n\";break;case\"RANDOM\":r=c();var i=Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\",Blockly.Variables.NAME_TYPE);if(r+=\"var \"+i+\" = Math.floor(Math.random() * \"+e+\".length);\\n\",\"SET\"==a)return r+=e+\"[\"+i+\"] = \"+o+\";\\n\";if(\"INSERT\"==a)return r+=e+\".splice(\"+i+\", 0, \"+o+\");\\n\"}throw\"Unhandled combination (lists_setIndex).\"},Blockly.JavaScript.lists_split=function(t){var e=Blockly.JavaScript.valueToCode(t,\"INPUT\",Blockly.JavaScript.ORDER_MEMBER),a=Blockly.JavaScript.valueToCode(t,\"DELIM\",Blockly.JavaScript.ORDER_NONE)||\"''\",l=t.getFieldValue(\"MODE\");if(\"SPLIT\"==l){e||(e=\"''\");var o=\"split\"}else{if(\"JOIN\"!=l)throw\"Unknown mode: \"+l;e||(e=\"[]\");o=\"join\"}return[\"(\"+e+\").\"+o+\"(\"+a+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.lists_reverse=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"LIST\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"[]\")+\").slice().reverse()\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_defreturn=function(t){var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=Blockly.JavaScript.statementToCode(t,\"STACK\");if(Blockly.JavaScript.STATEMENT_PREFIX){var l=t.id.replace(/\\$/g,\"$$$$\");a=Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g,\"await wait(0, '\"+l+\"', '\"+c.currentSystemEditorId+\"'), eval(update_values())\"),Blockly.JavaScript.INDENT)+a}Blockly.JavaScript.INFINITE_LOOP_TRAP&&(a=Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+t.id+\"'\")+a);var o=Blockly.JavaScript.valueToCode(t,\"RETURN\",Blockly.JavaScript.ORDER_NONE)||\"\";o=o?\"  let $returnValue = \"+o+\";\\n  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return $returnValue;\\n\":\"  if(Blockly_Debuggee.state.currNest != -1) Blockly_Debuggee.state.currState.parent = false;\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  return;\\n\";for(var r=[],n=0;n<t.arguments_.length;n++)r[n]=Blockly.JavaScript.variableDB_.getName(t.arguments_[n],Blockly.Variables.NAME_TYPE);var i=\"async function \"+e+\"(\"+r.join(\", \")+\") {\\n  let global_nest = Blockly_Debuggee.state.currNest;\\n  if(isStepOver() || isStepParent()) Blockly_Debuggee.state.currNest = -1;\\n\"+a+o+\"}\";return i=Blockly.JavaScript.scrub_(t,i),Blockly.JavaScript.definitions_[\"%\"+e]=i,null},Blockly.JavaScript.procedures_defnoreturn=Blockly.JavaScript.procedures_defreturn,Blockly.JavaScript.procedures_callreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return[\"await \"+e+\"(\"+a.join(\", \")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.procedures_callnoreturn=function(t){for(var e=Blockly.JavaScript.variableDB_.getName(t.getFieldValue(\"NAME\"),Blockly.Procedures.NAME_TYPE),a=[],l=0;l<t.arguments_.length;l++)a[l]=Blockly.JavaScript.valueToCode(t,\"ARG\"+l,Blockly.JavaScript.ORDER_COMMA)||\"null\";return\"await \"+e+\"(\"+a.join(\", \")+\");\\n\"},Blockly.JavaScript.procedures_ifreturn=function(t){var e=\"if (\"+(Blockly.JavaScript.valueToCode(t,\"CONDITION\",Blockly.JavaScript.ORDER_NONE)||\"false\")+\") {\\n  Blockly_Debuggee.state.currNest = global_nest;\\n  Blockly_Debuggee.state.currState.parent = false;\\n\";t.hasReturnValue_?e+=\"  return \"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_NONE)||\"null\")+\";\\n\":e+=\"  return;\\n\";return e+=\"}\\n\"};a(5);Blockly.Generator.prototype.blockToCode=function(t){if(!t)return\"\";if(t.disabled)return this.blockToCode(t.getNextBlock());var e=this[t.type];goog.asserts.assertFunction(e,'Language \"%s\" does not know how to generate code for block type \"%s\".',this.name_,t.type);var a=++c.nest,l=e.call(t,t);if(c.nest--,goog.isArray(l))return goog.asserts.assert(t.outputConnection,//!! Now blockly \n'Expecting string from statement block \"%s\".',t.type),l[0]=\"await $id(await wait(\"+a+\", '\"+t.id+\"', '\"+c.currentSystemEditorId+\"'), eval(update_values()), \"+l[0]+\")\",[this.scrub_(t,l[0]),l[1]];if(goog.isString(l)){t.id.replace(/\\$/g,\"$$$$\");return this.STATEMENT_PREFIX&&(l=this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+a+\", '\"+t.id+\"', '\"+c.currentSystemEditorId+\"'),  eval(update_values())\")+l),this.scrub_(t,l)}if(null===l)return\"\";goog.asserts.fail(\"Invalid code generated: %s\",l)},Blockly.Generator.prototype.addLoopTrap=function(t,e){return e=e.replace(/\\$/g,\"$$$$\"),this.INFINITE_LOOP_TRAP&&(t=this.INFINITE_LOOP_TRAP.replace(/%1/g,\"'\"+e+\"'\")+t),this.STATEMENT_PREFIX&&(t+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,\"await wait(\"+c.nest+\", '\"+e+\"', '\"+c.currentSystemEditorId+\"'), eval(update_values())\"),this.INDENT)),t},Blockly.Generator.prototype.workspaceToCode=function(t){t||(console.warn(\"No workspace specified in workspaceToCode call.  Guessing.\"),t=Blockly.getMainWorkspace());var e=[];this.init(t);var a=t.getTopBlocks(!0);c.currentSystemEditorId=t.systemEditorId;var l=\"\\n// start source code of another editor\\n\";e.push(l);for(var o,r=0;o=a[r];r++)l=this.blockToCode(o),goog.isArray(l)&&(l=l[0]),l&&(o.outputConnection&&this.scrubNakedValue&&(l=this.scrubNakedValue(l)),e.push(l));return e=e.join(\"\\n\"),e=(e=(e=(e=this.finish(e)).replace(/^\\s+\\n/,\"\")).replace(/\\n\\s+$/,\"\\n\")).replace(/[ \\t]+\\n/g,\"\\n\")},Blockly.BlockSvg.prototype.showContextMenu_=function(t){if(!this.workspace.options.readOnly&&this.contextMenu){var e=this,a=[];if(this.isDeletable()&&this.isMovable()&&!e.isInFlyout){if(a.push(Blockly.ContextMenu.blockDuplicateOption(e)),this.isEditable()&&!this.collapsed_&&this.workspace.options.comments&&a.push(Blockly.ContextMenu.blockCommentOption(e)),!this.collapsed_)for(var l=1;l<this.inputList.length;l++)if(this.inputList[l-1].type!=Blockly.NEXT_STATEMENT&&this.inputList[l].type!=Blockly.NEXT_STATEMENT){var c={enabled:!0},r=this.getInputsInline();c.text=r?Blockly.Msg.EXTERNAL_INPUTS:Blockly.Msg.INLINE_INPUTS,c.callback=function(){e.setInputsInline(!r)},a.push(c);break}if(this.workspace.options.collapse)if(this.collapsed_){var n={enabled:!0};n.text=Blockly.Msg.EXPAND_BLOCK,n.callback=function(){e.setCollapsed(!1)},a.push(n)}else{var i={enabled:!0};i.text=Blockly.Msg.COLLAPSE_BLOCK,i.callback=function(){e.setCollapsed(!0)},a.push(i)}if(this.workspace.options.disable){var s={text:this.disabled?Blockly.Msg.ENABLE_BLOCK:Blockly.Msg.DISABLE_BLOCK,enabled:!this.getInheritedDisabled(),callback:function(){e.setDisabled(!e.disabled)}};a.push(s)}a.push(Blockly.ContextMenu.blockDeleteOption(e))}var p={text:o.actions.Breakpoint.breakpoints.includes(e.id)?\"Remove Breakpoint\":\"Add Breakpoint\",enabled:!0,callback:function(){if(o.actions.Breakpoint.breakpoints.includes(e.id)){var t=o.actions.Breakpoint.breakpoints.indexOf(e.id);-1!==t&&o.actions.Breakpoint.breakpoints.splice(t,1)}else o.actions.Breakpoint.breakpoints.push(e.id),e.setCollapsed(!1);o.actions.Breakpoint.handler(),alert(\"Selected: \"+e.id+\"\\n breakpoints: \"+o.actions.Breakpoint.breakpoints)}};a.push(p);var u={text:\"Run to cursor\",enabled:!0,callback:function(){o.actions.RunToCursor.handler(e.id)}};a.push(u);var d={text:(\"variables_set\"===e.type||\"variables_get\"===e.type)&&o.actions.Watch.watches.includes(e.getVars()[0])?\"Remove Watch\":\"Add Watch\",enabled:\"variables_set\"===e.type||\"variables_get\"===e.type,callback:function(){if(o.actions.Watch.watches.includes(e.getVars()[0])){var t=o.actions.Watch.watches.indexOf(e.getVars()[0]);-1!==t&&o.actions.Watch.watches.splice(t,1)}else o.actions.Watch.watches.push(e.getVars()[0]);o.actions.Watch.handler(),alert(o.actions.Watch.watches)}};a.push(d),a.push(Blockly.ContextMenu.blockHelpOption(e)),this.customContextMenu&&this.customContextMenu(a),Blockly.ContextMenu.show(t,a,this.RTL),Blockly.ContextMenu.currentBlock=this}},document.getElementById(\"ContinueButton\").onclick=o.actions.Continue.handler,document.getElementById(\"StepInButton\").onclick=o.actions.StepIn.handler,document.getElementById(\"StepOverButton\").onclick=o.actions.StepOver.handler,document.getElementById(\"StepParentButton\").onclick=o.actions.StepParent.handler,document.getElementById(\"StepOutButton\").onclick=o.actions.StepOut.handler,document.getElementById(\"StopButton\").onclick=o.actions.Stop.handler,document.getElementById(\"StartButton\").onclick=o.actions.Start.handler},,function(t,e){Blockly.JavaScript.text_length=function(t){return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\")+\").length\",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_isEmpty=function(t){return[\"!(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").length\",Blockly.JavaScript.ORDER_LOGICAL_NOT]},Blockly.JavaScript.text_indexOf=function(t){var e=\"FIRST\"==t.getFieldValue(\"END\")?\"indexOf\":\"lastIndexOf\",a=Blockly.JavaScript.valueToCode(t,\"FIND\",Blockly.JavaScript.ORDER_NONE)||\"''\",l=\"(\"+(Blockly.JavaScript.valueToCode(t,\"VALUE\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\").\"+e+\"(\"+a+\")\";return t.workspace.options.oneBasedIndex?[l+\" + 1\",Blockly.JavaScript.ORDER_ADDITION]:[l,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_charAt=function(t){var e=t.getFieldValue(\"WHERE\")||\"FROM_START\",a=\"RANDOM\"==e?Blockly.JavaScript.ORDER_NONE:Blockly.JavaScript.ORDER_MEMBER,l=Blockly.JavaScript.valueToCode(t,\"VALUE\",a)||\"''\";switch(l=\"(\"+l+\")\",e){case\"FIRST\":return[l+\".charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"LAST\":return[l+\".slice(-1)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_START\":return[l+\".charAt(\"+Blockly.JavaScript.getAdjusted(t,\"AT\")+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"FROM_END\":return[l+\".slice(\"+Blockly.JavaScript.getAdjusted(t,\"AT\",1,!0)+\").charAt(0)\",Blockly.JavaScript.ORDER_FUNCTION_CALL];case\"RANDOM\":return[Blockly.JavaScript.provideFunction_(\"textRandomLetter\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(text) {\",\"  var x = Math.floor(Math.random() * text.length);\",\"  return text[x];\",\"}\"])+\"(\"+l+\")\",Blockly.JavaScript.ORDER_FUNCTION_CALL]}throw\"Unhandled option (text_charAt).\"},Blockly.JavaScript.text_getSubstring=function(t){var e=Blockly.JavaScript.valueToCode(t,\"STRING\",Blockly.JavaScript.ORDER_FUNCTION_CALL)||\"''\",a=t.getFieldValue(\"WHERE1\"),l=t.getFieldValue(\"WHERE2\");if(\"FIRST\"==a&&\"LAST\"==l)var o=e;else if(e.match(/^'?\\w+'?$/)||\"FROM_END\"!=a&&\"LAST\"!=a&&\"FROM_END\"!=l&&\"LAST\"!=l){switch(e=\"(\"+e+\")\",a){case\"FROM_START\":var c=Blockly.JavaScript.getAdjusted(t,\"AT1\");break;case\"FROM_END\":c=e+\".length - \"+(c=Blockly.JavaScript.getAdjusted(t,\"AT1\",1,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"FIRST\":c=\"0\";break;default:throw\"Unhandled option (text_getSubstring).\"}switch(l){case\"FROM_START\":var r=Blockly.JavaScript.getAdjusted(t,\"AT2\",1);break;case\"FROM_END\":r=e+\".length - \"+(r=Blockly.JavaScript.getAdjusted(t,\"AT2\",0,!1,Blockly.JavaScript.ORDER_SUBTRACTION));break;case\"LAST\":r=e+\".length\";break;default:throw\"Unhandled option (text_getSubstring).\"}o=e+\".slice(\"+c+\", \"+r+\")\"}else{e=\"(\"+e+\")\";c=Blockly.JavaScript.getAdjusted(t,\"AT1\"),r=Blockly.JavaScript.getAdjusted(t,\"AT2\");var n=Blockly.JavaScript.text.getIndex_,i={FIRST:\"First\",LAST:\"Last\",FROM_START:\"FromStart\",FROM_END:\"FromEnd\"};o=Blockly.JavaScript.provideFunction_(\"subsequence\"+i[a]+i[l],[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(sequence\"+(\"FROM_END\"==a||\"FROM_START\"==a?\", at1\":\"\")+(\"FROM_END\"==l||\"FROM_START\"==l?\", at2\":\"\")+\") {\",\"  var start = \"+n(\"sequence\",a,\"at1\")+\";\",\"  var end = \"+n(\"sequence\",l,\"at2\")+\" + 1;\",\"  return sequence.slice(start, end);\",\"}\"])+\"(\"+e+(\"FROM_END\"==a||\"FROM_START\"==a?\", \"+c:\"\")+(\"FROM_END\"==l||\"FROM_START\"==l?\", \"+r:\"\")+\")\"}return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_changeCase=function(t){var e={UPPERCASE:\".toUpperCase()\",LOWERCASE:\".toLowerCase()\",TITLECASE:null}[t.getFieldValue(\"CASE\")],a=e?Blockly.JavaScript.ORDER_MEMBER:Blockly.JavaScript.ORDER_NONE,l=Blockly.JavaScript.valueToCode(t,\"TEXT\",a)||\"''\";if(e)var o=\"(\"+l+\")\"+e;else o=Blockly.JavaScript.provideFunction_(\"textToTitleCase\",[\"function \"+Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_+\"(str) {\",\"  return str.replace(/\\\\S+/g,\",\"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\",\"}\"])+\"((\"+l+\"))\";return[o,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_trim=function(t){var e={LEFT:\".replace(/^[\\\\s\\\\xa0]+/, '')\",RIGHT:\".replace(/[\\\\s\\\\xa0]+$/, '')\",BOTH:\".trim()\"}[t.getFieldValue(\"MODE\")];return[\"(\"+(Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_MEMBER)||\"''\")+\")\"+e,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt_ext=function(t){if(t.getField(\"TEXT\"))var e=Blockly.JavaScript.quote_(t.getFieldValue(\"TEXT\"));else e=Blockly.JavaScript.valueToCode(t,\"TEXT\",Blockly.JavaScript.ORDER_NONE)||\"''\";var a=\"(await window.prompt(\"+e+\"))\";return\"NUMBER\"==t.getFieldValue(\"TYPE\")&&(a=\"parseFloat(\"+a+\")\"),[a,Blockly.JavaScript.ORDER_FUNCTION_CALL]},Blockly.JavaScript.text_prompt=Blockly.JavaScript.text_prompt_ext},function(t,e){window.workspace={},window.workspace.blockly1=Blockly.inject(\"blocklyDiv\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly1.systemEditorId=\"blockly1\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly1),window.workspace.blockly2=Blockly.inject(\"blocklyDiv2\",{media:\"../../media/\",toolbox:document.getElementById(\"toolbox\")}),window.workspace.blockly2.systemEditorId=\"blockly2\",Blockly.Xml.domToWorkspace(document.getElementById(\"startBlocks\"),window.workspace.blockly2)}]);","extractedComments":[]}